%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: FVContourPDG.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 12/16/13
%%BoundingBox: 0 0 567 545
%%HiResBoundingBox: 0 0 566.9287 544.1001
%%CropBox: 0 0 566.9287 544.1001
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: font Symbol
%%+ font Helvetica-Bold
%%+ font Helvetica
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: Symbol
%%+ Helvetica-Bold
%%+ Helvetica
%%DocumentNeededFonts: Symbol
%%+ Helvetica-Bold
%%+ Helvetica
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2013-12-16T16:40:55-08:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>248</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA+AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUq8y+YrPQN&#xA;Pivrwqtu9zbWryu6xpGLmZYvUd22CpzqcVU/KXmzRvNGi2mqaZcRSi4t4biW3SVJJIDPGJBHKELc&#xA;XFaEHwxVOcVY9out+ZtU0q01KPS7KOC+giuYFa+lLhJkDgOBaUBAbsTiqt+kvNH1H61+i7Svper6&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2013-12-16T16:40:56-08:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-12-16T16:40:56-08:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Keywords>ROOT</pdf:Keywords>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">FVContourPDG.pdf</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>7.208333</stDim:w>
            <stDim:h>6.930556</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>8.0d3e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica-Bold</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Bold</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>8.0d3e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.007</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbo; Symbol Bitmapped Fonts</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:06801174072068118C14A5F004D5F715</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:06801174072068118C14A5F004D5F715</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:06801174072068118C14A5F004D5F715</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:06801174072068118C14A5F004D5F715</stEvt:instanceID>
                  <stEvt:when>2013-12-16T16:40:56-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -544.1 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 544.1 li
566.929 544.1 li
566.929 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
90.709 457.044 mo
538.583 457.044 li
538.583 27.2051 li
90.709 27.2051 li
90.709 457.044 li
ef
90.709 457.044 mo
90.709 457.419 li
538.958 457.419 li
538.958 26.83 li
90.3339 26.83 li
90.3339 457.419 li
90.709 457.419 li
90.709 457.044 li
91.084 457.044 li
91.084 27.5801 li
538.208 27.5801 li
538.208 456.669 li
90.709 456.669 li
90.709 457.044 li
91.084 457.044 li
90.709 457.044 li
0 0 0 rgb
f
90.709 457.044 mo
538.583 457.044 li
538.583 27.2051 li
90.709 27.2051 li
90.709 457.044 li
1 1 1 rgb
ef
90.709 457.044 mo
90.709 457.419 li
538.958 457.419 li
538.958 26.83 li
90.3339 26.83 li
90.3339 457.419 li
90.709 457.419 li
90.709 457.044 li
91.084 457.044 li
91.084 27.5801 li
538.208 27.5801 li
538.208 456.669 li
90.709 456.669 li
90.709 457.044 li
91.084 457.044 li
90.709 457.044 li
0 0 0 rgb
f
90.709 457.419 mo
538.583 457.419 li
538.583 456.669 li
90.709 456.669 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMW+Helvetica /Helvetica findfont ct_VMDictPut/JWLNMW+Helvetica*1 [86{/.notdef}rp /V 169{/.notdef}rp]JWLNMW+Helvetica nfJWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf526.979 511.758 mo(V)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Symbol
/JWLNMX+Symbol /Symbol findfont ct_VMDictPut/JWLNMX+Symbol*1 [107{/.notdef}rp /kappa 148{/.notdef}rp]JWLNMX+Symbol nfJWLNMX+Symbol*1 [25.683 0 0 -25.683 0 0 ]msf511.758 503.198 mo(k)shgrestore
90.334 444.149 mo
90.334 457.044 li
91.084 457.044 li
91.084 444.149 li
f
106.329 450.596 mo
106.329 457.044 li
107.079 457.044 li
107.079 450.596 li
f
122.325 450.596 mo
122.325 457.044 li
123.075 457.044 li
123.075 450.596 li
f
138.32 450.596 mo
138.32 457.044 li
139.07 457.044 li
139.07 450.596 li
f
154.316 444.149 mo
154.316 457.044 li
155.066 457.044 li
155.066 444.149 li
f
170.311 450.596 mo
170.311 457.044 li
171.061 457.044 li
171.061 450.596 li
f
186.307 450.596 mo
186.307 457.044 li
187.057 457.044 li
187.057 450.596 li
f
202.302 450.596 mo
202.302 457.044 li
203.052 457.044 li
203.052 450.596 li
f
218.298 444.149 mo
218.298 457.044 li
219.048 457.044 li
219.048 444.149 li
f
234.293 450.596 mo
234.293 457.044 li
235.043 457.044 li
235.043 450.596 li
f
250.289 450.596 mo
250.289 457.044 li
251.039 457.044 li
251.039 450.596 li
f
266.284 450.596 mo
266.284 457.044 li
267.034 457.044 li
267.034 450.596 li
f
282.28 444.149 mo
282.28 457.044 li
283.03 457.044 li
283.03 444.149 li
f
298.274 450.596 mo
298.274 457.044 li
299.024 457.044 li
299.024 450.596 li
f
314.271 450.596 mo
314.271 457.044 li
315.021 457.044 li
315.021 450.596 li
f
330.267 450.596 mo
330.267 457.044 li
331.017 457.044 li
331.017 450.596 li
f
346.262 444.149 mo
346.262 457.044 li
347.012 457.044 li
347.012 444.149 li
f
362.257 450.596 mo
362.257 457.044 li
363.007 457.044 li
363.007 450.596 li
f
378.253 450.596 mo
378.253 457.044 li
379.003 457.044 li
379.003 450.596 li
f
394.248 450.596 mo
394.248 457.044 li
394.998 457.044 li
394.998 450.596 li
f
410.244 444.149 mo
410.244 457.044 li
410.994 457.044 li
410.994 444.149 li
f
426.239 450.596 mo
426.239 457.044 li
426.989 457.044 li
426.989 450.596 li
f
442.235 450.596 mo
442.235 457.044 li
442.985 457.044 li
442.985 450.596 li
f
458.229 450.596 mo
458.229 457.044 li
458.979 457.044 li
458.979 450.596 li
f
474.226 444.149 mo
474.226 457.044 li
474.976 457.044 li
474.976 444.149 li
f
490.222 450.596 mo
490.222 457.044 li
490.972 457.044 li
490.972 450.596 li
f
506.217 450.596 mo
506.217 457.044 li
506.967 457.044 li
506.967 450.596 li
f
522.212 450.596 mo
522.212 457.044 li
522.962 457.044 li
522.962 450.596 li
f
538.208 444.149 mo
538.208 457.044 li
538.958 457.044 li
538.958 444.149 li
f
538.208 444.149 mo
538.208 457.044 li
538.958 457.044 li
538.958 444.149 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMW+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero 3{/.notdef}rp /four 33{/.notdef}rp /V 169{/.notdef}rp]JWLNMW+Helvetica nfJWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf78.0005 479.417 mo(0.4)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMW+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero 3{/.notdef}rp /four /.notdef /six 31{/.notdef}rp /V 169{/.notdef}rp]JWLNMW+Helvetica nfJWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf141.732 479.417 mo(0.6)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMW+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero 3{/.notdef}rp /four /.notdef /six /.notdef /eight 29{/.notdef}rp /V 169{/.notdef}rp]JWLNMW+Helvetica nfJWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf205.464 479.417 mo(0.8)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMW+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one 2{/.notdef}rp /four /.notdef /six /.notdef /eight 29{/.notdef}rp /V 169{/.notdef}rp]JWLNMW+Helvetica nfJWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf278.708 479.417 mo(1)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMW+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 29{/.notdef}rp /V 169{/.notdef}rp]JWLNMW+Helvetica nfJWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf333.879 479.417 mo(1.2)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf397.611 479.417 mo(1.4)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf461.343 479.417 mo(1.6)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf526.027 479.417 mo(1.8)shgrestore
90.709 27.5801 mo
538.583 27.5801 li
538.583 26.8301 li
90.709 26.8301 li
f
91.084 40.1001 mo
91.084 27.2051 li
90.334 27.2051 li
90.334 40.1001 li
f
107.079 33.6533 mo
107.079 27.2051 li
106.329 27.2051 li
106.329 33.6533 li
f
123.075 33.6533 mo
123.075 27.2051 li
122.325 27.2051 li
122.325 33.6533 li
f
139.07 33.6533 mo
139.07 27.2051 li
138.32 27.2051 li
138.32 33.6533 li
f
155.066 40.1001 mo
155.066 27.2051 li
154.316 27.2051 li
154.316 40.1001 li
f
171.061 33.6533 mo
171.061 27.2051 li
170.311 27.2051 li
170.311 33.6533 li
f
187.057 33.6533 mo
187.057 27.2051 li
186.307 27.2051 li
186.307 33.6533 li
f
203.052 33.6533 mo
203.052 27.2051 li
202.302 27.2051 li
202.302 33.6533 li
f
219.048 40.1001 mo
219.048 27.2051 li
218.298 27.2051 li
218.298 40.1001 li
f
235.043 33.6533 mo
235.043 27.2051 li
234.293 27.2051 li
234.293 33.6533 li
f
251.039 33.6533 mo
251.039 27.2051 li
250.289 27.2051 li
250.289 33.6533 li
f
267.034 33.6533 mo
267.034 27.2051 li
266.284 27.2051 li
266.284 33.6533 li
f
283.03 40.1001 mo
283.03 27.2051 li
282.28 27.2051 li
282.28 40.1001 li
f
299.024 33.6533 mo
299.024 27.2051 li
298.274 27.2051 li
298.274 33.6533 li
f
315.021 33.6533 mo
315.021 27.2051 li
314.271 27.2051 li
314.271 33.6533 li
f
331.017 33.6533 mo
331.017 27.2051 li
330.267 27.2051 li
330.267 33.6533 li
f
347.012 40.1001 mo
347.012 27.2051 li
346.262 27.2051 li
346.262 40.1001 li
f
363.007 33.6533 mo
363.007 27.2051 li
362.257 27.2051 li
362.257 33.6533 li
f
379.003 33.6533 mo
379.003 27.2051 li
378.253 27.2051 li
378.253 33.6533 li
f
394.998 33.6533 mo
394.998 27.2051 li
394.248 27.2051 li
394.248 33.6533 li
f
410.994 40.1001 mo
410.994 27.2051 li
410.244 27.2051 li
410.244 40.1001 li
f
426.989 33.6533 mo
426.989 27.2051 li
426.239 27.2051 li
426.239 33.6533 li
f
442.985 33.6533 mo
442.985 27.2051 li
442.235 27.2051 li
442.235 33.6533 li
f
458.979 33.6533 mo
458.979 27.2051 li
458.229 27.2051 li
458.229 33.6533 li
f
474.976 40.1001 mo
474.976 27.2051 li
474.226 27.2051 li
474.226 40.1001 li
f
490.972 33.6533 mo
490.972 27.2051 li
490.222 27.2051 li
490.222 33.6533 li
f
506.967 33.6533 mo
506.967 27.2051 li
506.217 27.2051 li
506.217 33.6533 li
f
522.962 33.6533 mo
522.962 27.2051 li
522.212 27.2051 li
522.212 33.6533 li
f
538.958 40.1001 mo
538.958 27.2051 li
538.208 27.2051 li
538.208 40.1001 li
f
538.958 40.1001 mo
538.958 27.2051 li
538.208 27.2051 li
538.208 40.1001 li
f
91.084 457.044 mo
91.084 27.2051 li
90.3339 27.2051 li
90.3339 457.044 li
91.084 457.044 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMW+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 13{/.notdef}rp /F 15{/.notdef}rp /V 169{/.notdef}rp]JWLNMW+Helvetica nfJWLNMW+Helvetica*1 [-1.04843e-15 -17.122 -17.122 1.04842e-15 0 0 ]msf60.8784 37.0981 mo(F)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMX+Symbol*1 [-1.57264e-15 -25.683 -25.683 1.57263e-15 0 0 ]msf52.3159 52.3164 mo(k)shgrestore
104.145 420.849 mo
90.709 420.849 li
90.709 421.599 li
104.145 421.599 li
f
97.4268 402.939 mo
90.709 402.939 li
90.709 403.689 li
97.4268 403.689 li
97.4268 402.939 li
f
97.4268 385.029 mo
90.709 385.029 li
90.709 385.779 li
97.4268 385.779 li
97.4268 385.029 li
f
97.4268 367.119 mo
90.709 367.119 li
90.709 367.869 li
97.4268 367.869 li
97.4268 367.119 li
f
104.144 349.21 mo
90.709 349.21 li
90.709 349.959 li
104.144 349.959 li
104.144 349.21 li
f
97.4268 331.299 mo
90.709 331.299 li
90.709 332.049 li
97.4268 332.049 li
97.4268 331.299 li
f
97.4268 313.389 mo
90.709 313.389 li
90.709 314.139 li
97.4268 314.139 li
97.4268 313.389 li
f
97.4268 295.479 mo
90.709 295.479 li
90.709 296.229 li
97.4268 296.229 li
f
104.145 277.57 mo
90.709 277.57 li
90.709 278.32 li
104.145 278.32 li
f
97.4268 259.66 mo
90.709 259.66 li
90.709 260.41 li
97.4268 260.41 li
f
97.4268 241.75 mo
90.709 241.75 li
90.709 242.5 li
97.4268 242.5 li
f
97.4268 223.84 mo
90.709 223.84 li
90.709 224.59 li
97.4268 224.59 li
97.4268 223.84 li
f
104.144 205.93 mo
90.709 205.93 li
90.709 206.68 li
104.144 206.68 li
104.144 205.93 li
f
97.4268 188.02 mo
90.709 188.02 li
90.709 188.77 li
97.4268 188.77 li
97.4268 188.02 li
f
97.4268 170.11 mo
90.709 170.11 li
90.709 170.86 li
97.4268 170.86 li
97.4268 170.11 li
f
97.4268 152.2 mo
90.709 152.2 li
90.709 152.95 li
97.4268 152.95 li
f
104.145 134.29 mo
90.709 134.29 li
90.709 135.04 li
104.145 135.04 li
f
97.4268 116.38 mo
90.709 116.38 li
90.709 117.13 li
97.4268 117.13 li
f
97.4268 98.4702 mo
90.709 98.4702 li
90.709 99.2202 li
97.4268 99.2202 li
f
97.4268 80.5601 mo
90.709 80.5601 li
90.709 81.3101 li
97.4268 81.3101 li
f
104.145 62.6499 mo
90.709 62.6499 li
90.709 63.3999 li
104.145 63.3999 li
f
104.145 420.849 mo
90.709 420.849 li
90.709 421.599 li
104.145 421.599 li
f
97.4268 438.759 mo
90.709 438.759 li
90.709 439.509 li
97.4268 439.509 li
f
97.4268 456.669 mo
90.709 456.669 li
90.709 457.419 li
97.4268 457.419 li
f
104.145 62.6499 mo
90.709 62.6499 li
90.709 63.3999 li
104.145 63.3999 li
f
97.4268 44.7402 mo
90.709 44.7402 li
90.709 45.4902 li
97.4268 45.4902 li
f
97.4268 26.8301 mo
90.709 26.8301 li
90.709 27.5801 li
97.4268 27.5801 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMW+Helvetica*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 13{/.notdef}rp /F 15{/.notdef}rp /V 169{/.notdef}rp]JWLNMW+Helvetica nfJWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf66.5854 427.1 mo(-4)[5.70166 0 ]xshgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf66.5854 355.758 mo(-2)[5.70166 0 ]xshgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf72.293 284.417 mo(0)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf72.293 212.124 mo(2)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf72.293 140.781 mo(4)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMW+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf72.293 69.4399 mo(6)shgrestore
538.958 457.044 mo
538.958 27.2051 li
538.208 27.2051 li
538.208 457.044 li
f
525.146 421.599 mo
538.583 421.599 li
538.583 420.849 li
525.146 420.849 li
f
531.865 403.689 mo
538.583 403.689 li
538.583 402.939 li
531.865 402.939 li
f
531.865 385.779 mo
538.583 385.779 li
538.583 385.029 li
531.865 385.029 li
f
531.865 367.869 mo
538.583 367.869 li
538.583 367.119 li
531.865 367.119 li
f
525.146 349.959 mo
538.583 349.959 li
538.583 349.209 li
525.146 349.209 li
f
531.865 332.049 mo
538.583 332.049 li
538.583 331.299 li
531.865 331.299 li
f
531.865 314.139 mo
538.583 314.139 li
538.583 313.389 li
531.865 313.389 li
f
531.865 296.229 mo
538.583 296.229 li
538.583 295.479 li
531.865 295.479 li
f
525.146 278.32 mo
538.583 278.32 li
538.583 277.57 li
525.146 277.57 li
f
531.865 260.41 mo
538.583 260.41 li
538.583 259.66 li
531.865 259.66 li
f
531.865 242.5 mo
538.583 242.5 li
538.583 241.75 li
531.865 241.75 li
f
531.865 224.59 mo
538.583 224.59 li
538.583 223.84 li
531.865 223.84 li
f
525.146 206.68 mo
538.583 206.68 li
538.583 205.93 li
525.146 205.93 li
f
531.865 188.77 mo
538.583 188.77 li
538.583 188.02 li
531.865 188.02 li
f
531.865 170.86 mo
538.583 170.86 li
538.583 170.11 li
531.865 170.11 li
f
531.865 152.95 mo
538.583 152.95 li
538.583 152.2 li
531.865 152.2 li
f
525.146 135.04 mo
538.583 135.04 li
538.583 134.29 li
525.146 134.29 li
f
531.865 117.13 mo
538.583 117.13 li
538.583 116.38 li
531.865 116.38 li
f
531.865 99.2202 mo
538.583 99.2202 li
538.583 98.4702 li
531.865 98.4702 li
f
531.865 81.3101 mo
538.583 81.3101 li
538.583 80.5601 li
531.865 80.5601 li
f
525.146 63.3999 mo
538.583 63.3999 li
538.583 62.6499 li
525.146 62.6499 li
f
525.146 421.599 mo
538.583 421.599 li
538.583 420.849 li
525.146 420.849 li
f
531.865 439.509 mo
538.583 439.509 li
538.583 438.759 li
531.865 438.759 li
f
531.865 457.419 mo
538.583 457.419 li
538.583 456.669 li
531.865 456.669 li
f
525.146 63.3999 mo
538.583 63.3999 li
538.583 62.6499 li
525.146 62.6499 li
f
531.865 45.4902 mo
538.583 45.4902 li
538.583 44.7402 li
531.865 44.7402 li
f
531.865 27.5801 mo
538.583 27.5801 li
538.583 26.8301 li
531.865 26.8301 li
f
277.569 440.499 mo
263.464 440.216 li
249.359 439.652 li
235.254 438.61 li
231.617 438.339 li
221.15 437.655 li
207.045 436.057 li
193.144 434.186 li
192.94 434.165 li
178.835 432.665 li
164.731 430.924 li
158.466 430.033 li
150.626 428.891 li
136.521 426.338 li
134.561 425.881 li
122.416 423.083 li
116.629 421.728 li
108.312 419.85 li
98.084 417.575 li
94.207 416.66 li
91.084 415.906 li
91.084 403.689 li
97.4268 403.689 li
97.4268 402.939 li
91.084 402.939 li
91.084 385.779 li
97.4268 385.779 li
97.4268 385.029 li
91.084 385.029 li
91.084 367.869 li
97.4268 367.869 li
97.4268 367.119 li
91.084 367.119 li
91.084 349.959 li
104.144 349.959 li
104.144 349.21 li
91.084 349.21 li
91.084 332.049 li
97.4268 332.049 li
97.4268 331.299 li
91.084 331.299 li
91.084 315.865 li
94.207 314.682 li
95.4906 314.139 li
97.4268 314.139 li
97.4268 313.389 li
97.087 313.389 li
104.217 309.604 li
108.312 307.409 li
112.843 305.452 li
122.416 301.736 li
123.67 301.299 li
135.579 297.146 li
136.521 296.876 li
147.274 292.994 li
150.626 291.797 li
162.829 288.841 li
164.731 288.432 li
178.835 286.181 li
191.116 284.688 li
192.94 284.423 li
207.045 283.01 li
221.15 281.853 li
235.254 281.357 li
249.359 281.103 li
263.464 281.204 li
277.569 281.499 li
291.674 282.068 li
305.778 282.792 li
319.883 283.683 li
333.498 284.688 li
333.987 284.706 li
348.093 285.482 li
362.196 286.508 li
376.302 287.714 li
384.778 288.841 li
390.407 289.297 li
404.512 290.555 li
418.616 292.225 li
424.324 292.994 li
432.722 293.805 li
446.826 295.495 li
456.353 297.146 li
460.931 297.831 li
475.035 300.114 li
481.112 301.299 li
489.14 302.776 li
500.33 305.452 li
503.245 306.435 li
512.659 309.604 li
517.351 312.572 li
519.67 313.757 li
524.115 317.91 li
524.494 322.063 li
522.015 326.215 li
517.896 330.368 li
517.351 330.999 li
515.135 334.521 li
511.286 338.674 li
507.026 342.826 li
503.245 346.087 li
502.489 346.979 li
499.108 351.132 li
495.642 355.284 li
492.327 359.437 li
489.14 363.36 li
489.011 363.59 li
486.994 367.743 li
484.05 371.895 li
480.435 376.048 li
476.047 380.201 li
475.035 381.377 li
473.219 384.353 li
469.783 388.506 li
464.936 392.659 li
460.931 395.069 li
458.722 396.812 li
452.851 400.964 li
446.826 404.46 li
445.833 405.117 li
438.406 409.27 li
432.722 412.124 li
430.558 413.423 li
421.306 417.575 li
418.616 418.532 li
409.835 421.728 li
404.512 423.553 li
397.133 425.881 li
390.407 427.959 li
380.788 430.033 li
376.302 431.079 li
362.196 433.402 li
356.868 434.186 li
348.093 435.492 li
333.987 437.229 li
319.883 438.244 li
317.981 438.339 li
305.778 439.152 li
291.674 440.009 li
277.569 440.499 li
233.197 311.921 mo
228.978 313.757 li
221.15 317.065 li
219.094 317.91 li
207.045 322.02 li
206.931 322.063 li
196.539 326.215 li
192.94 327.988 li
188.191 330.368 li
179.539 334.521 li
178.835 334.873 li
170.594 338.674 li
164.731 342.189 li
163.584 342.826 li
156.366 346.979 li
150.626 350.37 li
149.301 351.132 li
143.023 355.284 li
137.801 359.437 li
136.521 360.709 li
133.32 363.59 li
131.301 367.743 li
129.613 371.895 li
129.76 376.048 li
130.908 380.201 li
133.215 384.353 li
136.521 387.34 li
137.655 388.506 li
144.286 392.659 li
150.626 396.094 li
151.902 396.812 li
161.923 400.964 li
164.731 401.874 li
174.827 405.117 li
178.835 406.344 li
189.488 409.27 li
192.94 410.1 li
207.045 413.115 li
208.616 413.423 li
221.15 415.739 li
233.938 417.575 li
235.254 417.763 li
249.359 419.199 li
263.464 420.222 li
277.569 420.894 li
291.674 420.799 li
305.778 420.045 li
319.883 418.924 li
332.063 417.575 li
333.987 417.367 li
348.093 415.122 li
355.492 413.423 li
362.196 412.001 li
372.938 409.27 li
376.302 408.406 li
386.635 405.117 li
390.407 403.544 li
396.043 400.964 li
403.258 396.812 li
404.512 396.048 li
410.592 392.659 li
416.19 388.506 li
418.616 386.093 li
420.625 384.353 li
424.981 380.201 li
428.517 376.048 li
431.256 371.895 li
432.722 369.024 li
433.541 367.743 li
436.171 363.59 li
437.967 359.437 li
439.883 355.284 li
441.826 351.132 li
444.319 346.979 li
446.448 342.826 li
446.826 342.136 li
449.119 338.674 li
452.099 334.521 li
454.61 330.368 li
456.424 326.215 li
457.382 322.063 li
456.972 317.91 li
452.345 313.757 li
446.826 311.484 li
442.373 309.604 li
432.722 306.929 li
426.168 305.452 li
418.616 304.091 li
404.512 302.223 li
396.944 301.299 li
390.407 300.559 li
376.302 299.303 li
362.196 298.379 li
348.093 297.878 li
333.987 297.757 li
319.883 297.7 li
305.778 297.848 li
291.674 298.702 li
277.569 299.904 li
275.5 300.205 li
275.113 300.153 li
269.858 299.561 li
264.422 299.078 li
263.46 299.011 li
257.062 298.716 li
250.664 298.556 li
244.265 298.657 li
237.867 298.972 li
236.701 299.078 li
231.469 300.025 li
230.989 300.153 li
226.336 301.227 li
225.071 301.757 li
224.06 302.302 li
223.805 303.377 li
222.915 304.451 li
222.929 305.526 li
224.072 306.6 li
224.721 307.675 li
225.071 307.979 li
226.03 308.75 li
228.096 309.824 li
230.65 310.899 li
231.469 311.229 li
233.197 311.921 li
1 1 .898039 rgb
f
91.084 415.906 mo
90.709 415.816 li
90.709 403.689 li
91.084 403.689 li
91.084 415.906 li
91.084 402.939 mo
90.709 402.939 li
90.709 385.779 li
91.084 385.779 li
91.084 402.939 li
91.084 385.029 mo
90.709 385.029 li
90.709 367.869 li
91.084 367.869 li
91.084 385.029 li
91.084 367.119 mo
90.709 367.119 li
90.709 349.959 li
91.084 349.959 li
91.084 367.119 li
91.084 349.21 mo
90.709 349.21 li
90.709 332.049 li
91.084 332.049 li
91.084 349.21 li
91.084 331.299 mo
90.709 331.299 li
90.709 316.007 li
91.084 315.865 li
91.084 331.299 li
.501961 .501961 .4 rgb
f
97.4268 403.689 mo
91.084 403.689 li
90.709 403.689 li
90.709 402.939 li
91.084 402.939 li
97.4268 402.939 li
97.4268 403.689 li
f
97.4268 385.779 mo
91.084 385.779 li
90.709 385.779 li
90.709 385.029 li
91.084 385.029 li
97.4268 385.029 li
97.4268 385.779 li
f
97.4268 367.869 mo
91.084 367.869 li
90.709 367.869 li
90.709 367.119 li
91.084 367.119 li
97.4268 367.119 li
97.4268 367.869 li
f
104.144 349.959 mo
91.084 349.959 li
90.709 349.959 li
90.709 349.21 li
91.084 349.21 li
104.144 349.21 li
104.144 349.959 li
f
97.4268 332.049 mo
91.084 332.049 li
90.709 332.049 li
90.709 331.299 li
91.084 331.299 li
97.4268 331.299 li
97.4268 332.049 li
f
97.4268 314.139 mo
95.4906 314.139 li
96.3935 313.757 li
97.087 313.389 li
97.4268 313.389 li
97.4268 314.139 li
f
263.464 274.715 mo
249.359 274.699 li
235.254 274.404 li
221.15 272.871 li
217.213 272.23 li
207.045 271.168 li
192.94 269.516 li
183.158 268.077 li
178.835 267.101 li
168.418 263.924 li
164.731 261.874 li
159.996 259.772 li
150.626 256.307 li
149.132 255.619 li
141.746 251.466 li
136.661 247.314 li
136.521 247.204 li
129.793 243.161 li
124.978 239.008 li
122.416 237.415 li
118.2 234.855 li
112.23 230.703 li
108.312 228.951 li
97.541 226.55 li
94.207 225.862 li
91.084 224.808 li
91.084 224.59 li
97.4268 224.59 li
97.4268 223.84 li
91.084 223.84 li
91.084 206.68 li
104.144 206.68 li
104.144 205.93 li
91.084 205.93 li
91.084 188.77 li
97.4268 188.77 li
97.4268 188.02 li
91.084 188.02 li
91.084 170.86 li
97.4268 170.86 li
97.4268 170.11 li
91.084 170.11 li
91.084 157.266 li
94.207 156.573 li
96.208 155.954 li
108.312 153.114 li
115.978 151.801 li
122.416 150.79 li
136.521 149.141 li
147.994 147.648 li
150.626 147.259 li
164.731 145.116 li
177.611 143.496 li
178.835 143.342 li
192.94 142.197 li
207.045 140.717 li
220.086 139.343 li
221.15 139.224 li
235.254 137.527 li
249.359 136.372 li
263.464 135.923 li
277.569 136.355 li
291.674 136.536 li
305.778 137.266 li
319.883 138.68 li
325.826 139.343 li
333.987 140.185 li
348.093 142.534 li
352.666 143.496 li
362.196 145.47 li
370.165 147.648 li
376.302 149.298 li
383.811 151.801 li
390.407 154.245 li
394.685 155.954 li
404.062 160.106 li
404.512 160.332 li
412.327 164.259 li
418.465 168.412 li
418.616 168.52 li
424.601 172.565 li
430.72 176.717 li
432.722 178.326 li
436.239 180.87 li
440.735 185.023 li
443.826 189.175 li
446.826 192.162 li
448.369 193.328 li
453.911 197.481 li
458.996 201.634 li
460.931 203.319 li
464.715 205.786 li
470.153 209.939 li
475.035 213.619 li
475.716 214.092 li
482.61 218.245 li
488.313 222.397 li
489.14 222.921 li
496.344 226.55 li
503.245 230.357 li
504.035 230.703 li
511.219 234.855 li
514.89 239.008 li
512.524 243.161 li
504.899 247.314 li
503.245 247.843 li
493.042 251.466 li
489.14 252.419 li
475.035 255.58 li
474.832 255.619 li
460.931 258.041 li
447.569 259.772 li
446.826 259.887 li
432.722 262.156 li
418.616 263.635 li
415.138 263.924 li
404.512 265.165 li
390.407 266.581 li
376.302 267.755 li
372.02 268.077 li
362.196 269.184 li
348.093 270.435 li
333.987 271.191 li
319.883 271.825 li
308.073 272.23 li
305.778 272.422 li
291.674 273.228 li
277.569 274.082 li
263.464 274.715 li
257.951 228.236 mo
247.216 228.276 li
236.481 228.738 li
233.41 228.991 li
225.746 229.727 li
215.011 231.236 li
214.242 231.379 li
204.277 233.608 li
203.705 233.767 li
196.842 236.155 li
193.542 237.67 li
191.957 238.543 li
188.944 240.931 li
187.154 243.319 li
186.5 245.707 li
186.913 248.095 li
188.358 250.483 li
190.899 252.871 li
193.542 254.497 li
195.086 255.259 li
202.462 257.647 li
204.277 258.029 li
215.011 259.524 li
222.514 260.035 li
225.746 260.174 li
236.481 260.232 li
243.696 260.035 li
247.216 259.91 li
257.951 259.143 li
268.685 258.111 li
272.553 257.647 li
273.765 257.461 li
276.256 257.66 li
282.655 257.889 li
289.053 257.912 li
295.451 257.751 li
301.849 257.538 li
307.935 257.169 li
308.247 257.149 li
314.645 256.7 li
321.044 256.198 li
322.009 256.094 li
327.442 255.503 li
332.011 255.02 li
333.84 254.795 li
340.237 253.945 li
342.174 253.638 li
348.093 253.765 li
362.196 253.381 li
376.302 252.231 li
383.421 251.466 li
390.407 250.287 li
404.399 247.314 li
404.512 247.257 li
412.112 243.161 li
411.882 239.008 li
405.913 234.855 li
404.512 234.262 li
397.32 231.974 li
397.506 231.379 li
397.631 230.304 li
397.543 229.229 li
397.228 228.155 li
396.687 227.08 li
395.881 226.006 li
394.798 224.931 li
393.317 223.856 li
391.719 222.782 li
391.424 222.609 li
389.174 221.707 li
385.999 220.633 li
385.026 220.343 li
381.599 219.558 li
378.628 218.977 li
373.644 218.483 li
372.23 218.356 li
371.632 218.338 li
371.541 218.245 li
368.531 214.092 li
365.312 209.939 li
363.332 205.786 li
362.196 204.01 li
360.278 201.634 li
357.175 197.481 li
350.571 193.328 li
348.093 192.061 li
342.06 189.175 li
333.987 185.5 li
332.938 185.023 li
322.748 180.87 li
319.883 179.843 li
307.851 176.717 li
305.778 176.283 li
291.674 174.207 li
277.569 174.546 li
263.464 176.675 li
263.25 176.717 li
249.359 180.089 li
247.1 180.87 li
240.68 185.023 li
236.134 189.175 li
235.254 190.758 li
233.688 193.328 li
235.254 196.834 li
235.509 197.481 li
238.978 201.634 li
242.69 205.786 li
248.129 209.939 li
249.359 210.685 li
255.568 214.092 li
262.265 218.245 li
263.464 218.943 li
270.712 222.397 li
277.569 225.261 li
280.734 226.55 li
287.264 230.703 li
287.312 230.757 li
279.42 229.588 li
273.163 228.991 li
268.685 228.636 li
257.951 228.236 li
1 1 .898039 rgb
f
91.084 224.808 mo
90.709 224.681 li
90.709 224.59 li
91.084 224.59 li
91.084 224.808 li
91.084 223.84 mo
90.709 223.84 li
90.709 206.68 li
91.084 206.68 li
91.084 223.84 li
91.084 205.93 mo
90.709 205.93 li
90.709 188.77 li
91.084 188.77 li
91.084 205.93 li
91.084 188.02 mo
90.709 188.02 li
90.709 170.86 li
91.084 170.86 li
91.084 188.02 li
91.084 170.11 mo
90.709 170.11 li
90.709 157.349 li
91.084 157.266 li
91.084 170.11 li
.501961 .501961 .4 rgb
f
97.4268 224.59 mo
91.084 224.59 li
90.709 224.59 li
90.709 223.84 li
91.084 223.84 li
97.4268 223.84 li
97.4268 224.59 li
f
104.144 206.68 mo
91.084 206.68 li
90.709 206.68 li
90.709 205.93 li
91.084 205.93 li
104.144 205.93 li
104.144 206.68 li
f
97.4268 188.77 mo
91.084 188.77 li
90.709 188.77 li
90.709 188.02 li
91.084 188.02 li
97.4268 188.02 li
97.4268 188.77 li
f
97.4268 170.86 mo
91.084 170.86 li
90.709 170.86 li
90.709 170.11 li
91.084 170.11 li
97.4268 170.11 li
97.4268 170.86 li
f
277.569 420.894 mo
263.464 420.222 li
249.359 419.199 li
235.254 417.763 li
233.938 417.575 li
221.15 415.739 li
208.616 413.423 li
207.045 413.115 li
192.94 410.1 li
189.488 409.27 li
178.835 406.344 li
174.827 405.117 li
164.731 401.874 li
161.923 400.964 li
151.902 396.812 li
150.626 396.094 li
144.286 392.659 li
137.655 388.506 li
136.521 387.34 li
133.215 384.353 li
130.908 380.201 li
129.76 376.048 li
129.613 371.895 li
131.301 367.743 li
133.32 363.59 li
136.521 360.709 li
137.801 359.437 li
143.023 355.284 li
149.301 351.132 li
150.626 350.37 li
156.366 346.979 li
163.584 342.826 li
164.731 342.189 li
170.594 338.674 li
178.835 334.873 li
179.539 334.521 li
188.191 330.368 li
192.94 327.988 li
196.539 326.215 li
206.931 322.063 li
207.045 322.02 li
219.094 317.91 li
221.15 317.065 li
228.978 313.757 li
233.197 311.921 li
233.328 311.973 li
237.504 313.048 li
237.867 313.141 li
243.249 314.124 li
244.265 314.302 li
250.664 315.09 li
252.309 315.197 li
257.062 315.473 li
263.46 315.865 li
269.858 315.273 li
270.712 315.197 li
276.256 314.642 li
279.529 314.124 li
282.655 313.47 li
284.096 313.048 li
289.053 312.044 li
289.323 311.973 li
291.687 310.899 li
293.356 309.824 li
295.167 308.75 li
295.407 307.675 li
294.949 306.6 li
293.831 305.526 li
292.14 304.451 li
289.96 303.377 li
289.053 303.025 li
285.884 302.302 li
282.655 301.761 li
280.461 301.227 li
276.256 300.308 li
275.5 300.205 li
277.569 299.904 li
291.674 298.702 li
305.778 297.848 li
319.883 297.7 li
333.987 297.757 li
348.093 297.878 li
362.196 298.379 li
376.302 299.303 li
390.407 300.559 li
396.944 301.299 li
404.512 302.223 li
418.616 304.091 li
426.168 305.452 li
432.722 306.929 li
442.373 309.604 li
446.826 311.484 li
452.345 313.757 li
456.972 317.91 li
457.382 322.063 li
456.424 326.215 li
454.61 330.368 li
452.099 334.521 li
449.119 338.674 li
446.826 342.136 li
446.448 342.826 li
444.319 346.979 li
441.826 351.132 li
439.883 355.284 li
437.967 359.437 li
436.171 363.59 li
433.541 367.743 li
432.722 369.024 li
431.256 371.895 li
428.517 376.048 li
424.981 380.201 li
420.625 384.353 li
418.616 386.093 li
416.19 388.506 li
410.592 392.659 li
404.512 396.048 li
403.258 396.812 li
396.043 400.964 li
390.407 403.544 li
386.635 405.117 li
376.302 408.406 li
372.938 409.27 li
362.196 412.001 li
355.492 413.423 li
348.093 415.122 li
333.987 417.367 li
332.063 417.575 li
319.883 418.924 li
305.778 420.045 li
291.674 420.799 li
277.569 420.894 li
1 1 .447059 rgb
f
348.093 253.765 mo
342.174 253.638 li
346.637 252.931 li
347.024 252.871 li
353.035 251.824 li
353.185 251.796 li
358.388 250.721 li
359.433 250.496 li
363.026 249.647 li
365.831 248.974 li
367.492 248.572 li
371.377 247.498 li
372.23 247.243 li
374.821 246.423 li
378.033 245.348 li
378.628 245.131 li
380.844 244.274 li
383.435 243.199 li
385.026 242.488 li
385.794 242.125 li
387.827 241.05 li
389.712 239.975 li
391.424 238.901 li
391.425 238.901 li
392.808 237.826 li
394.033 236.752 li
395.082 235.677 li
395.955 234.602 li
396.659 233.528 li
397.171 232.453 li
397.32 231.974 li
404.512 234.262 li
405.913 234.855 li
411.882 239.008 li
412.112 243.161 li
404.512 247.257 li
404.399 247.314 li
390.407 250.287 li
383.421 251.466 li
376.302 252.231 li
362.196 253.381 li
348.093 253.765 li
296.053 232.623 mo
291.149 231.379 li
290.155 231.178 li
287.312 230.757 li
287.264 230.703 li
280.734 226.55 li
277.569 225.261 li
270.712 222.397 li
263.464 218.943 li
262.265 218.245 li
255.568 214.092 li
249.359 210.685 li
248.129 209.939 li
242.69 205.786 li
238.978 201.634 li
235.509 197.481 li
235.254 196.834 li
233.688 193.328 li
235.254 190.758 li
236.134 189.175 li
240.68 185.023 li
247.1 180.87 li
249.359 180.089 li
263.25 176.717 li
263.464 176.675 li
277.569 174.546 li
291.674 174.207 li
305.778 176.283 li
307.851 176.717 li
319.883 179.843 li
322.748 180.87 li
332.938 185.023 li
333.987 185.5 li
342.06 189.175 li
348.093 192.061 li
350.571 193.328 li
357.175 197.481 li
360.278 201.634 li
362.196 204.01 li
363.332 205.786 li
365.312 209.939 li
368.531 214.092 li
371.541 218.245 li
371.632 218.338 li
365.831 218.168 li
359.433 218.353 li
357.8 218.483 li
353.035 218.846 li
347.019 219.558 li
346.637 219.602 li
340.237 220.588 li
340.011 220.633 li
334.358 221.707 li
333.84 221.801 li
329.705 222.782 li
327.442 223.247 li
324.748 223.856 li
321.044 224.77 li
320.478 224.931 li
316.599 226.006 li
314.645 226.592 li
313.142 227.08 li
309.267 228.155 li
308.247 228.455 li
305.928 229.229 li
302.628 230.304 li
301.849 230.553 li
299.56 231.379 li
296.546 232.453 li
296.053 232.623 li
f
233.197 311.921 mo
231.469 311.229 li
230.65 310.899 li
228.096 309.824 li
226.03 308.75 li
225.071 307.979 li
224.721 307.675 li
224.072 306.6 li
222.929 305.526 li
222.915 304.451 li
223.805 303.377 li
224.06 302.302 li
225.071 301.757 li
226.336 301.227 li
230.989 300.153 li
231.469 300.025 li
236.701 299.078 li
237.867 298.972 li
244.265 298.657 li
250.664 298.556 li
257.062 298.716 li
263.46 299.011 li
264.422 299.078 li
269.858 299.561 li
275.113 300.153 li
275.5 300.205 li
267.994 301.299 li
263.464 302.133 li
250.865 305.452 li
249.359 305.947 li
238.553 309.604 li
235.254 311.025 li
233.197 311.921 li
.898039 .898039 .94902 rgb
f
263.46 315.865 mo
257.062 315.473 li
252.309 315.197 li
250.664 315.09 li
244.265 314.302 li
243.249 314.124 li
237.867 313.141 li
237.504 313.048 li
233.328 311.973 li
233.197 311.921 li
235.254 311.025 li
238.553 309.604 li
249.359 305.947 li
250.865 305.452 li
263.464 302.133 li
267.994 301.299 li
275.5 300.205 li
276.256 300.308 li
280.461 301.227 li
282.655 301.761 li
285.884 302.302 li
289.053 303.025 li
289.96 303.377 li
292.14 304.451 li
293.831 305.526 li
294.949 306.6 li
295.407 307.675 li
295.167 308.75 li
293.356 309.824 li
291.687 310.899 li
289.323 311.973 li
289.053 312.044 li
284.096 313.048 li
282.655 313.47 li
279.529 314.124 li
276.256 314.642 li
270.712 315.197 li
269.858 315.273 li
263.46 315.865 li
.898039 .898039 .72549 rgb
f
289.053 257.912 mo
282.655 257.889 li
276.256 257.66 li
273.765 257.461 li
279.42 256.596 li
286.996 255.259 li
290.155 254.543 li
294.869 253.322 li
295.451 253.375 li
301.849 253.497 li
308.247 253.292 li
314.645 252.957 li
315.665 252.871 li
321.044 252.368 li
322.759 252.175 li
333.987 253.463 li
342.174 253.638 li
340.237 253.945 li
333.84 254.795 li
332.011 255.02 li
327.442 255.503 li
322.009 256.094 li
321.044 256.198 li
314.645 256.7 li
308.247 257.149 li
307.935 257.169 li
301.849 257.538 li
295.451 257.751 li
289.053 257.912 li
397.32 231.974 mo
393.324 230.703 li
390.407 229.489 li
382.42 226.55 li
376.302 222.869 li
375.59 222.397 li
371.632 218.338 li
372.23 218.356 li
373.644 218.483 li
378.628 218.977 li
381.599 219.558 li
385.026 220.343 li
385.999 220.633 li
389.174 221.707 li
391.424 222.609 li
391.719 222.782 li
393.317 223.856 li
394.798 224.931 li
395.881 226.006 li
396.687 227.08 li
397.228 228.155 li
397.543 229.229 li
397.631 230.304 li
397.506 231.379 li
397.32 231.974 li
.898039 .898039 .94902 rgb
f
342.174 253.638 mo
333.987 253.463 li
322.759 252.175 li
326.127 251.796 li
327.442 251.635 li
333.772 250.721 li
333.84 250.711 li
339.381 249.647 li
340.237 249.483 li
344.776 248.572 li
346.637 248.138 li
349.102 247.498 li
352.985 246.423 li
353.035 246.408 li
356.088 245.348 li
358.996 244.274 li
359.433 244.088 li
361.315 243.199 li
363.231 242.125 li
365.071 241.05 li
365.831 240.474 li
366.42 239.975 li
367.302 238.901 li
367.952 237.826 li
368.202 236.752 li
367.974 235.677 li
367.429 234.602 li
366.11 233.528 li
365.831 233.332 li
363.994 232.453 li
360.36 231.379 li
359.433 231.167 li
353.035 230.504 li
346.637 230.475 li
340.237 230.883 li
336.245 231.379 li
333.84 231.656 li
328.909 232.453 li
327.442 232.692 li
323.522 233.528 li
321.044 234.013 li
318.627 234.602 li
314.645 235.557 li
314.231 235.677 li
310.492 236.752 li
308.247 237.378 li
308.151 237.41 li
306.194 236.155 li
300.89 233.875 li
300.565 233.767 li
296.053 232.623 li
296.546 232.453 li
299.56 231.379 li
301.849 230.553 li
302.628 230.304 li
305.928 229.229 li
308.247 228.455 li
309.267 228.155 li
313.142 227.08 li
314.645 226.592 li
316.599 226.006 li
320.478 224.931 li
321.044 224.77 li
324.748 223.856 li
327.442 223.247 li
329.705 222.782 li
333.84 221.801 li
334.358 221.707 li
340.011 220.633 li
340.237 220.588 li
346.637 219.602 li
347.019 219.558 li
353.035 218.846 li
357.8 218.483 li
359.433 218.353 li
365.831 218.168 li
371.632 218.338 li
375.59 222.397 li
376.302 222.869 li
382.42 226.55 li
390.407 229.489 li
393.324 230.703 li
397.32 231.974 li
397.171 232.453 li
396.659 233.528 li
395.955 234.602 li
395.082 235.677 li
394.033 236.752 li
392.808 237.826 li
391.425 238.901 li
391.424 238.901 li
389.712 239.975 li
387.827 241.05 li
385.794 242.125 li
385.026 242.488 li
383.435 243.199 li
380.844 244.274 li
378.628 245.131 li
378.033 245.348 li
374.821 246.423 li
372.23 247.243 li
371.377 247.498 li
367.492 248.572 li
365.831 248.974 li
363.026 249.647 li
359.433 250.496 li
358.388 250.721 li
353.185 251.796 li
353.035 251.824 li
347.024 252.871 li
346.637 252.931 li
342.174 253.638 li
.898039 .898039 .72549 rgb
f
301.849 253.497 mo
295.451 253.375 li
294.869 253.322 li
296.612 252.871 li
300.89 251.435 li
303.401 250.483 li
307.913 248.095 li
308.065 247.972 li
317.593 251.466 li
319.883 251.845 li
322.759 252.175 li
321.044 252.368 li
315.665 252.871 li
314.645 252.957 li
308.247 253.292 li
301.849 253.497 li
.447059 .447059 .976471 rgb
f
322.759 252.175 mo
319.883 251.845 li
317.593 251.466 li
308.065 247.972 li
310.871 245.707 li
311.624 244.33 li
312.108 243.319 li
311.856 240.931 li
311.624 240.585 li
309.918 238.543 li
308.151 237.41 li
308.247 237.378 li
310.492 236.752 li
314.231 235.677 li
314.645 235.557 li
318.627 234.602 li
321.044 234.013 li
323.522 233.528 li
327.442 232.692 li
328.909 232.453 li
333.84 231.656 li
336.245 231.379 li
340.237 230.883 li
346.637 230.475 li
353.035 230.504 li
359.433 231.167 li
360.36 231.379 li
363.994 232.453 li
365.831 233.332 li
366.11 233.528 li
367.429 234.602 li
367.974 235.677 li
368.202 236.752 li
367.952 237.826 li
367.302 238.901 li
366.42 239.975 li
365.831 240.474 li
365.071 241.05 li
363.231 242.125 li
361.315 243.199 li
359.433 244.088 li
358.996 244.274 li
356.088 245.348 li
353.035 246.408 li
352.985 246.423 li
349.102 247.498 li
346.637 248.138 li
344.776 248.572 li
340.237 249.483 li
339.381 249.647 li
333.84 250.711 li
333.772 250.721 li
327.442 251.635 li
326.127 251.796 li
322.759 252.175 li
.447059 .447059 .862745 rgb
f
236.481 260.232 mo
225.746 260.174 li
222.514 260.035 li
215.011 259.524 li
204.277 258.029 li
202.462 257.647 li
195.086 255.259 li
193.542 254.497 li
190.899 252.871 li
188.358 250.483 li
186.913 248.095 li
186.5 245.707 li
187.154 243.319 li
188.944 240.931 li
191.957 238.543 li
193.542 237.67 li
196.842 236.155 li
203.705 233.767 li
204.277 233.608 li
214.242 231.379 li
215.011 231.236 li
225.746 229.727 li
233.41 228.991 li
236.481 228.738 li
247.216 228.276 li
257.951 228.236 li
268.685 228.636 li
273.163 228.991 li
279.42 229.588 li
287.312 230.757 li
290.761 234.626 li
289.053 235.271 li
288.087 235.677 li
285.497 236.752 li
282.873 237.826 li
282.655 237.917 li
281.444 238.468 li
279.42 237.791 li
272 236.155 li
268.685 235.622 li
257.951 234.745 li
247.216 234.686 li
236.481 235.415 li
231.159 236.155 li
225.746 237.138 li
220.624 238.543 li
215.011 240.734 li
214.637 240.931 li
211.92 243.319 li
210.926 245.707 li
211.593 248.095 li
213.988 250.483 li
215.011 251.042 li
219.859 252.871 li
225.746 254.193 li
235.823 255.259 li
236.481 255.301 li
247.216 255.315 li
248.207 255.259 li
257.951 254.52 li
260.626 254.17 li
261.627 255.02 li
263.46 255.749 li
264.593 256.094 li
269.858 257.141 li
270.101 257.169 li
273.765 257.461 li
272.553 257.647 li
268.685 258.111 li
257.951 259.143 li
247.216 259.91 li
243.696 260.035 li
236.481 260.232 li
.898039 1 .847059 rgb
f
290.761 234.626 mo
287.312 230.757 li
290.155 231.178 li
291.149 231.379 li
296.053 232.623 li
295.451 232.83 li
293.634 233.528 li
290.823 234.602 li
290.761 234.626 li
.898039 1 .623529 rgb
f
273.765 257.461 mo
270.101 257.169 li
269.858 257.141 li
264.593 256.094 li
263.46 255.749 li
261.627 255.02 li
260.626 254.17 li
268.685 253.115 li
270.013 252.871 li
279.42 250.549 li
279.633 250.483 li
284.688 248.095 li
287.578 245.707 li
288.126 243.319 li
286.194 240.931 li
281.668 238.543 li
281.444 238.468 li
282.655 237.917 li
282.873 237.826 li
285.497 236.752 li
288.087 235.677 li
289.053 235.271 li
290.761 234.626 li
290.965 234.855 li
291.674 235.49 li
296.463 239.008 li
298.721 240.665 li
297.717 241.05 li
295.451 241.915 li
294.976 242.125 li
292.701 243.199 li
290.397 244.274 li
289.053 244.958 li
288.382 245.348 li
286.77 246.423 li
285.479 247.498 li
284.529 248.572 li
283.921 249.647 li
284.254 250.721 li
285.838 251.796 li
289.053 252.744 li
289.867 252.871 li
294.869 253.322 li
290.155 254.543 li
286.996 255.259 li
279.42 256.596 li
273.765 257.461 li
.847059 .94902 .87451 rgb
f
298.721 240.665 mo
296.463 239.008 li
291.674 235.49 li
290.965 234.855 li
290.761 234.626 li
290.823 234.602 li
293.634 233.528 li
295.451 232.83 li
296.053 232.623 li
300.565 233.767 li
300.89 233.875 li
306.194 236.155 li
308.151 237.41 li
306.888 237.826 li
303.61 238.901 li
301.849 239.474 li
300.522 239.975 li
298.721 240.665 li
.847059 .94902 .764706 rgb
f
294.869 253.322 mo
289.867 252.871 li
289.053 252.744 li
285.838 251.796 li
284.254 250.721 li
283.921 249.647 li
284.529 248.572 li
285.479 247.498 li
286.77 246.423 li
288.382 245.348 li
289.053 244.958 li
290.397 244.274 li
292.701 243.199 li
294.976 242.125 li
295.451 241.915 li
297.717 241.05 li
298.721 240.665 li
302.121 243.161 li
305.778 246.832 li
306.27 247.314 li
308.065 247.972 li
307.913 248.095 li
303.401 250.483 li
300.89 251.435 li
296.612 252.871 li
294.869 253.322 li
.623529 .72549 .886274 rgb
f
308.065 247.972 mo
306.27 247.314 li
305.778 246.832 li
302.121 243.161 li
298.721 240.665 li
300.522 239.975 li
301.849 239.474 li
303.61 238.901 li
306.888 237.826 li
308.151 237.41 li
309.918 238.543 li
311.624 240.585 li
311.856 240.931 li
312.108 243.319 li
311.624 244.33 li
310.871 245.707 li
308.065 247.972 li
.623529 .72549 .831372 rgb
f
247.216 255.315 mo
236.481 255.301 li
235.823 255.259 li
225.746 254.193 li
219.859 252.871 li
215.011 251.042 li
213.988 250.483 li
211.593 248.095 li
210.926 245.707 li
211.92 243.319 li
214.637 240.931 li
215.011 240.734 li
220.624 238.543 li
225.746 237.138 li
231.159 236.155 li
236.481 235.415 li
247.216 234.686 li
257.951 234.745 li
268.685 235.622 li
272 236.155 li
279.42 237.791 li
281.444 238.468 li
280.493 238.901 li
278.116 239.975 li
276.256 240.815 li
275.779 241.05 li
273.649 242.125 li
271.566 243.199 li
269.858 244.068 li
269.485 244.274 li
267.677 245.348 li
265.956 246.423 li
264.29 247.498 li
263.46 248.096 li
262.853 248.572 li
261.685 249.647 li
260.792 250.721 li
260.197 251.796 li
259.95 252.871 li
260.361 253.945 li
260.626 254.17 li
257.951 254.52 li
248.207 255.259 li
247.216 255.315 li
.447059 1 .423529 rgb
f
260.626 254.17 mo
260.361 253.945 li
259.95 252.871 li
260.197 251.796 li
260.792 250.721 li
261.685 249.647 li
262.853 248.572 li
263.46 248.096 li
264.29 247.498 li
265.956 246.423 li
267.677 245.348 li
269.485 244.274 li
269.858 244.068 li
271.566 243.199 li
273.649 242.125 li
275.779 241.05 li
276.256 240.815 li
278.116 239.975 li
280.493 238.901 li
281.444 238.468 li
281.668 238.543 li
286.194 240.931 li
288.126 243.319 li
287.578 245.707 li
284.688 248.095 li
279.633 250.483 li
279.42 250.549 li
270.013 252.871 li
268.685 253.115 li
260.626 254.17 li
.423529 .976471 .435294 rgb
f
235.282 438.236 mo
231.645 437.965 li
231.589 438.713 li
235.226 438.984 li
.6 .6 .6 rgb
f
249.387 439.278 mo
235.282 438.236 li
235.226 438.984 li
249.331 440.026 li
f
263.479 439.842 mo
249.374 439.277 li
249.344 440.027 li
263.449 440.591 li
f
277.576 440.125 mo
263.471 439.841 li
263.456 440.591 li
277.561 440.874 li
f
291.661 439.634 mo
277.556 440.125 li
277.582 440.874 li
291.687 440.384 li
f
305.756 438.778 mo
291.651 439.635 li
291.697 440.384 li
305.801 439.526 li
f
317.957 437.965 mo
305.753 438.778 li
305.803 439.526 li
318.006 438.714 li
f
207.095 435.685 mo
193.194 433.814 li
193.094 434.558 li
206.995 436.429 li
f
221.192 437.282 mo
207.087 435.685 li
207.003 436.43 li
221.108 438.027 li
f
231.642 437.965 mo
221.174 437.281 li
221.125 438.029 li
231.593 438.714 li
f
319.864 437.869 mo
317.963 437.965 li
318 438.714 li
319.902 438.618 li
f
333.96 436.855 mo
319.856 437.87 li
319.91 438.618 li
334.014 437.603 li
f
348.047 435.12 mo
333.941 436.857 li
334.033 437.601 li
348.139 435.864 li
f
356.813 433.815 mo
348.038 435.121 li
348.148 435.863 li
356.923 434.557 li
f
164.784 430.553 mo
158.519 429.661 li
158.413 430.404 li
164.679 431.296 li
f
178.881 432.293 mo
164.777 430.552 li
164.685 431.296 li
178.789 433.038 li
f
192.98 433.793 mo
178.875 432.293 li
178.795 433.038 li
192.9 434.538 li
f
193.182 433.813 mo
192.977 433.792 li
192.902 434.539 li
193.107 434.559 li
f
362.142 433.031 mo
356.814 433.815 li
356.923 434.557 li
362.251 433.773 li
f
376.241 430.709 mo
362.135 433.032 li
362.257 433.772 li
376.363 431.449 li
f
380.703 429.667 mo
376.217 430.713 li
376.387 431.444 li
380.873 430.398 li
f
136.607 425.973 mo
134.647 425.516 li
134.476 426.247 li
136.436 426.704 li
f
150.693 428.522 mo
136.588 425.969 li
136.455 426.707 li
150.559 429.26 li
f
158.52 429.662 mo
150.68 428.52 li
150.572 429.262 li
158.412 430.404 li
f
390.328 427.592 mo
380.709 429.666 li
380.867 430.399 li
390.486 428.325 li
f
397.022 425.523 mo
390.297 427.6 li
390.518 428.317 li
397.243 426.24 li
f
122.501 422.717 mo
116.714 421.363 li
116.543 422.093 li
122.331 423.448 li
f
134.646 425.516 mo
122.5 422.717 li
122.332 423.448 li
134.477 426.247 li
f
404.399 423.196 mo
397.02 425.524 li
397.246 426.239 li
404.625 423.911 li
f
409.713 421.373 mo
404.39 423.198 li
404.633 423.908 li
409.957 422.083 li
f
108.393 419.484 mo
98.1654 417.209 li
98.0025 417.941 li
108.23 420.216 li
f
116.711 421.362 mo
108.394 419.484 li
108.229 420.216 li
116.546 422.094 li
f
418.488 418.179 mo
409.707 421.376 li
409.963 422.08 li
418.744 418.884 li
f
421.18 417.221 mo
418.49 418.178 li
418.742 418.885 li
421.431 417.928 li
f
94.295 416.295 mo
90.7969 415.451 li
90.621 416.18 li
94.1191 417.024 li
f
98.1701 417.21 mo
94.2932 416.295 li
94.1209 417.025 li
97.9978 417.94 li
f
430.404 413.081 mo
421.152 417.233 li
421.459 417.917 li
430.711 413.765 li
f
432.529 411.803 mo
430.365 413.102 li
430.751 413.745 li
432.915 412.446 li
f
438.238 408.935 mo
432.553 411.789 li
432.89 412.46 li
438.575 409.605 li
f
445.65 404.789 mo
438.223 408.943 li
438.589 409.597 li
446.016 405.444 li
f
446.619 404.148 mo
445.626 404.804 li
446.04 405.43 li
447.033 404.773 li
f
452.662 400.64 mo
446.638 404.136 li
447.014 404.785 li
453.039 401.289 li
f
458.505 396.506 mo
452.634 400.658 li
453.067 401.271 li
458.938 397.118 li
f
460.698 394.774 mo
458.489 396.518 li
458.954 397.106 li
461.163 395.363 li
f
464.743 392.337 mo
460.737 394.747 li
461.124 395.39 li
465.13 392.98 li
f
469.539 388.222 mo
464.693 392.374 li
465.18 392.943 li
470.027 388.791 li
f
472.93 384.114 mo
469.494 388.267 li
470.072 388.745 li
473.508 384.592 li
f
474.715 381.182 mo
472.899 384.158 li
473.539 384.548 li
475.355 381.573 li
f
475.763 379.956 mo
474.751 381.133 li
475.319 381.622 li
476.331 380.445 li
f
480.177 375.776 mo
475.789 379.928 li
476.305 380.473 li
480.692 376.321 li
f
483.767 371.649 mo
480.152 375.802 li
480.717 376.295 li
484.333 372.141 li
f
486.688 367.526 mo
483.744 371.678 li
484.356 372.112 li
487.3 367.96 li
f
488.673 363.426 mo
486.657 367.579 li
487.331 367.906 li
489.348 363.754 li
f
488.812 363.177 mo
488.683 363.407 li
489.338 363.773 li
489.467 363.543 li
f
492.036 359.201 mo
488.849 363.123 li
489.431 363.596 li
492.618 359.673 li
f
495.348 355.05 mo
492.034 359.203 li
492.62 359.671 li
495.935 355.518 li
f
498.821 350.892 mo
495.354 355.043 li
495.929 355.524 li
499.396 351.373 li
f
502.198 346.742 mo
498.818 350.896 li
499.399 351.369 li
502.78 347.216 li
f
502.959 345.845 mo
502.203 346.736 li
502.775 347.221 li
503.531 346.33 li
f
506.781 342.542 mo
503 345.803 li
503.49 346.371 li
507.271 343.11 li
f
511.024 338.406 mo
506.765 342.557 li
507.288 343.094 li
511.548 338.943 li
f
514.86 334.266 mo
511.011 338.419 li
511.561 338.929 li
515.41 334.776 li
f
517.033 330.8 mo
514.817 334.321 li
515.452 334.721 li
517.668 331.199 li
f
517.612 330.123 mo
517.067 330.755 li
517.635 331.244 li
518.179 330.613 li
f
521.748 325.951 mo
517.629 330.104 li
518.162 330.632 li
522.281 326.479 li
f
524.172 321.871 mo
521.693 326.023 li
522.337 326.408 li
524.816 322.255 li
f
523.742 317.944 mo
524.121 322.097 li
524.868 322.029 li
524.489 317.876 li
f
90.8418 316.358 mo
94.3399 315.033 li
94.0742 314.331 li
90.5761 315.657 li
f
94.3531 315.027 mo
96.5396 314.103 li
96.2475 313.412 li
94.061 314.337 li
f
519.414 314.031 mo
523.859 318.184 li
524.371 317.636 li
519.926 313.483 li
f
96.5694 314.089 mo
104.393 309.935 li
104.041 309.273 li
96.2177 313.426 li
f
512.459 309.921 mo
517.15 312.889 li
517.551 312.255 li
512.86 309.287 li
f
517.18 312.906 mo
519.499 314.091 li
519.841 313.423 li
517.521 312.238 li
f
104.394 309.934 mo
108.489 307.739 li
108.134 307.078 li
104.04 309.273 li
f
108.46 307.753 mo
112.991 305.796 li
112.694 305.107 li
108.163 307.064 li
f
500.21 305.807 mo
503.125 306.79 li
503.365 306.08 li
500.45 305.096 li
f
503.125 306.79 mo
512.539 309.959 li
512.779 309.249 li
503.365 306.08 li
f
112.978 305.801 mo
122.552 302.085 li
122.28 301.386 li
112.707 305.102 li
f
122.539 302.09 mo
123.793 301.653 li
123.547 300.945 li
122.293 301.382 li
f
481.044 301.668 mo
489.072 303.145 li
489.207 302.407 li
481.18 300.93 li
f
489.052 303.141 mo
500.243 305.816 li
500.417 305.087 li
489.227 302.411 li
f
123.793 301.653 mo
135.703 297.5 li
135.456 296.792 li
123.546 300.945 li
f
456.297 297.517 mo
460.875 298.201 li
460.986 297.46 li
456.408 296.775 li
f
460.871 298.201 mo
474.975 300.484 li
475.095 299.744 li
460.991 297.46 li
f
474.963 300.482 mo
481.04 301.667 li
481.184 300.931 li
475.107 299.746 li
f
135.682 297.507 mo
136.625 297.237 li
136.418 296.516 li
135.476 296.785 li
f
136.649 297.229 mo
147.402 293.346 li
147.147 292.641 li
136.394 296.524 li
f
424.288 293.367 mo
432.686 294.178 li
432.758 293.432 li
424.36 292.62 li
f
432.677 294.177 mo
446.782 295.867 li
446.871 295.122 li
432.766 293.433 li
f
446.762 295.864 mo
456.288 297.515 li
456.417 296.776 li
446.89 295.125 li
f
147.4 293.347 mo
150.752 292.151 li
150.5 291.444 li
147.148 292.64 li
f
150.714 292.162 mo
162.917 289.206 li
162.741 288.477 li
150.538 291.433 li
f
384.748 289.215 mo
390.377 289.671 li
390.438 288.924 li
384.809 288.468 li
f
390.374 289.671 mo
404.478 290.929 li
404.545 290.182 li
390.441 288.924 li
f
404.468 290.928 mo
418.572 292.597 li
418.66 291.853 li
404.556 290.183 li
f
418.566 292.597 mo
424.274 293.365 li
424.374 292.622 li
418.666 291.853 li
f
162.908 289.208 mo
164.81 288.799 li
164.653 288.065 li
162.75 288.475 li
f
164.791 288.802 mo
178.894 286.551 li
178.776 285.811 li
164.672 288.062 li
f
178.88 286.553 mo
191.161 285.06 li
191.071 284.316 li
178.79 285.809 li
f
333.485 285.063 mo
333.974 285.08 li
334.001 284.331 li
333.512 284.313 li
f
333.967 285.08 mo
348.072 285.856 li
348.113 285.107 li
334.008 284.331 li
f
348.066 285.856 mo
362.169 286.882 li
362.223 286.134 li
348.12 285.108 li
f
362.164 286.882 mo
376.27 288.088 li
376.334 287.341 li
362.228 286.135 li
f
376.252 288.086 mo
384.729 289.213 li
384.828 288.47 li
376.351 287.343 li
f
191.17 285.059 mo
192.994 284.794 li
192.886 284.052 li
191.062 284.317 li
f
192.977 284.796 mo
207.082 283.383 li
207.008 282.637 li
192.903 284.05 li
f
207.076 283.384 mo
221.181 282.227 li
221.119 281.479 li
207.014 282.637 li
f
221.163 282.228 mo
235.267 281.732 li
235.241 280.982 li
221.137 281.478 li
f
235.261 281.732 mo
249.366 281.478 li
249.352 280.728 li
235.247 280.982 li
f
249.356 281.478 mo
263.461 281.579 li
263.467 280.829 li
249.362 280.728 li
f
263.456 281.579 mo
277.561 281.873 li
277.577 281.124 li
263.472 280.829 li
f
277.554 281.873 mo
291.659 282.443 li
291.689 281.693 li
277.584 281.124 li
f
291.655 282.442 mo
305.759 283.167 li
305.798 282.418 li
291.693 281.693 li
f
305.755 283.167 mo
319.859 284.057 li
319.906 283.309 li
305.802 282.418 li
f
319.855 284.057 mo
333.47 285.062 li
333.526 284.314 li
319.91 283.309 li
f
221.21 272.501 mo
217.273 271.86 li
217.153 272.6 li
221.09 273.241 li
f
235.294 274.031 mo
221.19 272.498 li
221.109 273.244 li
235.213 274.777 li
f
249.367 274.324 mo
235.262 274.029 li
235.246 274.779 li
249.351 275.074 li
f
263.464 274.34 mo
249.359 274.324 li
249.358 275.074 li
263.463 275.09 li
f
277.552 273.707 mo
263.447 274.341 li
263.481 275.09 li
277.586 274.457 li
f
291.651 272.854 mo
277.546 273.708 li
277.591 274.456 li
291.696 273.602 li
f
305.757 272.047 mo
291.652 272.854 li
291.695 273.602 li
305.8 272.796 li
f
308.042 271.856 mo
305.747 272.048 li
305.81 272.796 li
308.104 272.604 li
f
192.995 269.145 mo
183.213 267.706 li
183.104 268.448 li
192.885 269.887 li
f
207.089 270.796 mo
192.984 269.144 li
192.896 269.889 li
207.001 271.54 li
f
217.252 271.857 mo
207.084 270.795 li
207.006 271.541 li
217.174 272.603 li
f
319.87 271.45 mo
308.06 271.855 li
308.086 272.605 li
319.896 272.2 li
f
333.97 270.816 mo
319.866 271.451 li
319.9 272.2 li
334.004 271.566 li
f
348.073 270.061 mo
333.967 270.816 li
334.007 271.565 li
348.113 270.81 li
f
362.163 268.811 mo
348.06 270.062 li
348.126 270.809 li
362.229 269.558 li
f
371.979 267.704 mo
362.154 268.811 li
362.238 269.557 li
372.062 268.45 li
f
178.944 266.742 mo
168.527 263.566 li
168.309 264.283 li
178.726 267.46 li
f
183.241 267.711 mo
178.918 266.735 li
178.752 267.467 li
183.076 268.443 li
f
376.274 267.381 mo
371.992 267.703 li
372.049 268.451 li
376.33 268.129 li
f
390.376 266.207 mo
376.271 267.381 li
376.333 268.129 li
390.438 266.955 li
f
404.474 264.792 mo
390.37 266.208 li
390.445 266.954 li
404.549 265.538 li
f
415.094 263.552 mo
404.468 264.793 li
404.555 265.538 li
415.181 264.297 li
f
164.884 261.531 mo
160.148 259.429 li
159.844 260.115 li
164.579 262.217 li
f
168.6 263.597 mo
164.914 261.546 li
164.549 262.202 li
168.236 264.252 li
f
418.585 263.262 mo
415.107 263.551 li
415.169 264.298 li
418.647 264.009 li
f
432.683 261.783 mo
418.577 263.262 li
418.655 264.008 li
432.761 262.529 li
f
446.767 259.517 mo
432.662 261.786 li
432.781 262.526 li
446.886 260.257 li
f
447.512 259.401 mo
446.769 259.517 li
446.884 260.258 li
447.627 260.143 li
f
150.783 255.966 mo
149.289 255.279 li
148.975 255.96 li
150.469 256.648 li
f
160.126 259.42 mo
150.756 255.955 li
150.496 256.659 li
159.866 260.124 li
f
460.882 257.669 mo
447.521 259.4 li
447.617 260.144 li
460.979 258.413 li
f
474.768 255.25 mo
460.866 257.672 li
460.995 258.41 li
474.896 255.989 li
f
149.316 255.292 mo
141.93 251.139 li
141.562 251.793 li
148.948 255.946 li
f
474.964 255.212 mo
474.761 255.251 li
474.903 255.987 li
475.106 255.948 li
f
489.058 252.053 mo
474.953 255.214 li
475.117 255.946 li
489.222 252.785 li
f
492.953 251.102 mo
489.051 252.055 li
489.229 252.783 li
493.131 251.831 li
f
141.983 251.176 mo
136.898 247.023 li
136.424 247.604 li
141.509 251.757 li
f
503.12 247.49 mo
492.917 251.113 li
493.167 251.82 li
503.371 248.197 li
f
504.785 246.957 mo
503.131 247.486 li
503.359 248.2 li
505.014 247.671 li
f
136.715 246.883 mo
129.986 242.84 li
129.6 243.483 li
136.328 247.526 li
f
136.893 247.019 mo
136.753 246.909 li
136.29 247.499 li
136.429 247.609 li
f
512.345 242.832 mo
504.72 246.985 li
505.079 247.643 li
512.704 243.49 li
f
130.038 242.877 mo
125.223 238.724 li
124.734 239.292 li
129.548 243.445 li
f
514.564 238.823 mo
512.199 242.976 li
512.85 243.347 li
515.215 239.194 li
f
122.611 237.094 mo
118.395 234.534 li
118.006 235.176 li
122.221 237.736 li
f
125.177 238.69 mo
122.614 237.097 li
122.218 237.733 li
124.781 239.327 li
f
510.938 235.103 mo
514.609 239.257 li
515.171 238.76 li
511.5 234.607 li
f
118.414 234.547 mo
112.445 230.395 li
112.016 231.011 li
117.986 235.163 li
f
503.848 231.028 mo
511.031 235.18 li
511.406 234.53 li
504.223 230.378 li
f
108.393 228.585 mo
97.6226 226.184 li
97.4594 226.916 li
108.23 229.317 li
f
112.384 230.361 mo
108.465 228.609 li
108.158 229.294 li
112.077 231.045 li
f
496.163 226.879 mo
503.064 230.685 li
503.426 230.029 li
496.525 226.222 li
f
503.095 230.7 mo
503.885 231.047 li
504.186 230.36 li
503.396 230.013 li
f
94.327 225.507 mo
90.8289 224.326 li
90.589 225.036 li
94.0871 226.218 li
f
97.6168 226.183 mo
94.2828 225.495 li
94.1312 226.23 li
97.4652 226.918 li
f
488.113 222.714 mo
488.939 223.238 li
489.34 222.604 li
488.514 222.08 li
f
488.971 223.256 mo
496.175 226.885 li
496.512 226.215 li
489.308 222.586 li
f
482.39 218.548 mo
488.093 222.7 li
488.534 222.094 li
482.831 217.942 li
f
475.522 214.414 mo
482.417 218.566 li
482.804 217.924 li
475.909 213.771 li
f
469.928 210.238 mo
474.809 213.919 li
475.261 213.32 li
470.379 209.64 li
f
474.821 213.927 mo
475.502 214.4 li
475.93 213.784 li
475.249 213.311 li
f
464.487 206.084 mo
469.926 210.237 li
470.381 209.641 li
464.942 205.488 li
f
458.75 201.917 mo
460.684 203.602 li
461.177 203.036 li
459.242 201.351 li
f
460.726 203.633 mo
464.51 206.1 li
464.92 205.472 li
461.135 203.005 li
f
453.674 197.771 mo
458.759 201.925 li
459.233 201.344 li
454.148 197.191 li
f
448.144 193.628 mo
453.686 197.781 li
454.136 197.181 li
448.594 193.028 li
f
443.562 189.441 mo
446.562 192.428 li
447.091 191.896 li
444.091 188.91 li
f
446.6 192.461 mo
448.143 193.627 li
448.595 193.029 li
447.052 191.863 li
f
440.435 185.247 mo
443.525 189.399 li
444.127 188.951 li
441.036 184.799 li
f
435.985 181.146 mo
440.481 185.298 li
440.99 184.747 li
436.494 180.595 li
f
430.485 177.01 mo
432.487 178.618 li
432.957 178.034 li
430.955 176.425 li
f
432.502 178.63 mo
436.02 181.174 li
436.459 180.566 li
432.941 178.022 li
f
424.39 172.875 mo
430.509 177.028 li
430.93 176.407 li
424.811 172.255 li
f
418.247 168.717 mo
418.398 168.825 li
418.834 168.215 li
418.683 168.107 li
f
418.406 168.831 mo
424.391 172.876 li
424.811 172.254 li
418.826 168.209 li
f
412.117 164.57 mo
418.255 168.723 li
418.675 168.102 li
412.537 163.949 li
f
403.893 160.441 mo
404.343 160.667 li
404.68 159.997 li
404.23 159.771 li
f
404.343 160.667 mo
412.159 164.594 li
412.496 163.924 li
404.68 159.997 li
f
90.7902 157.715 mo
94.2882 156.939 li
94.1258 156.207 li
90.6278 156.983 li
f
94.3179 156.931 mo
96.3188 156.312 li
96.0972 155.596 li
94.0962 156.215 li
f
394.533 156.297 mo
403.91 160.449 li
404.213 159.763 li
394.836 155.611 li
f
96.2937 156.319 mo
108.397 153.479 li
108.226 152.749 li
96.1223 155.589 li
f
108.375 153.484 mo
116.041 152.171 li
115.914 151.432 li
108.248 152.745 li
f
383.681 152.153 mo
390.277 154.597 li
390.538 153.893 li
383.942 151.45 li
f
390.268 154.593 mo
394.545 156.302 li
394.824 155.606 li
390.546 153.897 li
f
116.036 152.172 mo
122.474 151.16 li
122.358 150.42 li
115.919 151.431 li
f
122.46 151.162 mo
136.565 149.514 li
136.478 148.769 li
122.372 150.418 li
f
136.57 149.513 mo
148.043 148.02 li
147.946 147.276 li
136.473 148.769 li
f
370.068 148.01 mo
376.204 149.66 li
376.399 148.936 li
370.262 147.286 li
f
376.183 149.654 mo
383.693 152.157 li
383.93 151.445 li
376.42 148.943 li
f
148.049 148.019 mo
150.681 147.63 li
150.571 146.888 li
147.939 147.277 li
f
150.682 147.63 mo
164.788 145.487 li
164.675 144.745 li
150.57 146.889 li
f
164.778 145.488 mo
177.658 143.868 li
177.564 143.124 li
164.685 144.744 li
f
352.59 143.863 mo
362.12 145.837 li
362.272 145.103 li
352.742 143.129 li
f
362.097 145.832 mo
370.066 148.01 li
370.264 147.286 li
362.295 145.108 li
f
177.658 143.868 mo
178.882 143.714 li
178.788 142.97 li
177.564 143.124 li
f
178.865 143.716 mo
192.97 142.571 li
192.91 141.823 li
178.805 142.969 li
f
192.979 142.57 mo
207.084 141.09 li
207.006 140.344 li
192.901 141.824 li
f
207.084 141.09 mo
220.125 139.716 li
220.047 138.97 li
207.006 140.344 li
f
325.788 139.716 mo
333.949 140.558 li
334.026 139.812 li
325.865 138.97 li
f
333.926 140.555 mo
348.031 142.904 li
348.154 142.164 li
334.049 139.815 li
f
348.016 142.901 mo
352.589 143.863 li
352.743 143.129 li
348.17 142.167 li
f
220.128 139.716 mo
221.192 139.597 li
221.108 138.851 li
220.044 138.971 li
f
221.195 139.596 mo
235.299 137.899 li
235.209 137.155 li
221.105 138.852 li
f
235.285 137.901 mo
249.389 136.746 li
249.328 135.998 li
235.223 137.153 li
f
249.371 136.747 mo
263.476 136.298 li
263.452 135.549 li
249.347 135.997 li
f
263.452 136.298 mo
277.557 136.73 li
277.58 135.98 li
263.475 135.549 li
f
277.564 136.73 mo
291.669 136.911 li
291.679 136.161 li
277.574 135.98 li
f
291.654 136.911 mo
305.759 137.641 li
305.798 136.892 li
291.693 136.162 li
f
305.741 137.639 mo
319.845 139.053 li
319.92 138.307 li
305.816 136.893 li
f
319.841 139.053 mo
325.785 139.716 li
325.868 138.971 li
319.924 138.307 li
f
235.307 417.392 mo
233.991 417.203 li
233.885 417.946 li
235.201 418.134 li
f
249.397 418.826 mo
235.292 417.39 li
235.216 418.136 li
249.321 419.572 li
f
263.491 419.848 mo
249.386 418.825 li
249.332 419.573 li
263.437 420.596 li
f
277.587 420.519 mo
263.482 419.848 li
263.446 420.597 li
277.551 421.269 li
f
291.671 420.424 mo
277.566 420.519 li
277.571 421.269 li
291.676 421.174 li
f
305.758 419.671 mo
291.654 420.425 li
291.694 421.174 li
305.798 420.42 li
f
319.853 418.55 mo
305.749 419.672 li
305.808 420.419 li
319.913 419.298 li
f
332.022 417.202 mo
319.841 418.552 li
319.924 419.297 li
332.105 417.947 li
f
221.218 415.37 mo
208.684 413.055 li
208.548 413.792 li
221.082 416.108 li
f
233.991 417.203 mo
221.203 415.368 li
221.097 416.11 li
233.885 417.946 li
f
333.947 416.994 mo
332.023 417.202 li
332.104 417.948 li
334.028 417.74 li
f
348.034 414.751 mo
333.928 416.996 li
334.046 417.737 li
348.152 415.492 li
f
355.408 413.058 mo
348.009 414.756 li
348.177 415.487 li
355.576 413.789 li
f
193.028 409.735 mo
189.575 408.905 li
189.4 409.635 li
192.852 410.465 li
f
207.123 412.748 mo
193.018 409.733 li
192.862 410.467 li
206.967 413.481 li
f
208.688 413.055 mo
207.117 412.747 li
206.973 413.483 li
208.544 413.791 li
f
362.118 411.634 mo
355.414 413.056 li
355.57 413.79 li
362.274 412.367 li
f
372.846 408.907 mo
362.104 411.637 li
362.289 412.364 li
373.031 409.633 li
f
178.945 405.986 mo
174.937 404.758 li
174.717 405.475 li
178.725 406.703 li
f
189.587 408.908 mo
178.934 405.983 li
178.736 406.706 li
189.388 409.632 li
f
376.208 408.043 mo
372.845 408.907 li
373.032 409.633 li
376.395 408.769 li
f
386.521 404.759 mo
376.188 408.048 li
376.415 408.763 li
386.749 405.474 li
f
164.847 401.518 mo
162.038 400.608 li
161.807 401.321 li
164.616 402.231 li
f
174.942 404.76 mo
164.846 401.517 li
164.617 402.232 li
174.712 405.474 li
f
390.263 403.198 mo
386.49 404.771 li
386.779 405.463 li
390.551 403.891 li
f
395.887 400.623 mo
390.251 403.203 li
390.563 403.885 li
396.199 401.305 li
f
162.066 400.618 mo
152.046 396.466 li
151.759 397.158 li
161.779 401.311 li
f
403.071 396.487 mo
395.856 400.639 li
396.23 401.289 li
403.445 397.137 li
f
150.805 395.765 mo
144.465 392.329 li
144.107 392.988 li
150.447 396.424 li
f
152.086 396.485 mo
150.81 395.767 li
150.442 396.421 li
151.719 397.139 li
f
404.317 395.728 mo
403.063 396.492 li
403.453 397.132 li
404.707 396.369 li
f
410.409 392.331 mo
404.329 395.721 li
404.694 396.376 li
410.774 392.986 li
f
144.485 392.341 mo
137.854 388.189 li
137.456 388.824 li
144.087 392.977 li
f
415.967 388.205 mo
410.368 392.357 li
410.815 392.96 li
416.414 388.808 li
f
136.773 387.062 mo
133.466 384.075 li
132.963 384.631 li
136.27 387.619 li
f
137.924 388.245 mo
136.79 387.079 li
136.253 387.602 li
137.386 388.768 li
f
418.352 385.827 mo
415.926 388.24 li
416.455 388.772 li
418.881 386.359 li
f
420.379 384.07 mo
418.371 385.81 li
418.862 386.377 li
420.871 384.636 li
f
133.543 384.171 mo
131.236 380.019 li
130.58 380.383 li
132.887 384.535 li
f
424.723 379.929 mo
420.366 384.082 li
420.884 384.624 li
425.24 380.472 li
f
131.27 380.101 mo
130.121 375.948 li
129.398 376.148 li
130.547 380.301 li
f
428.231 375.805 mo
424.696 379.958 li
425.267 380.444 li
428.802 376.291 li
f
130.135 376.035 mo
129.988 371.882 li
129.239 371.908 li
129.385 376.062 li
f
430.943 371.689 mo
428.204 375.842 li
428.83 376.255 li
431.569 372.101 li
f
129.961 372.036 mo
131.648 367.884 li
130.953 367.601 li
129.266 371.754 li
f
432.388 368.853 mo
430.922 371.724 li
431.59 372.066 li
433.056 369.194 li
f
433.225 367.541 mo
432.406 368.822 li
433.038 369.226 li
433.857 367.945 li
f
131.638 367.907 mo
133.658 363.754 li
132.983 363.426 li
130.964 367.579 li
f
435.854 363.39 mo
433.224 367.542 li
433.858 367.943 li
436.488 363.791 li
f
133.571 363.869 mo
136.772 360.987 li
136.271 360.43 li
133.069 363.312 li
f
136.786 360.974 mo
138.065 359.703 li
137.536 359.171 li
136.257 360.443 li
f
437.623 359.288 mo
435.827 363.441 li
436.515 363.739 li
438.311 359.586 li
f
138.034 359.73 mo
143.257 355.577 li
142.79 354.99 li
137.567 359.143 li
f
439.542 355.127 mo
437.626 359.28 li
438.307 359.594 li
440.223 355.441 li
f
143.23 355.596 mo
149.508 351.445 li
149.094 350.82 li
142.817 354.971 li
f
441.487 350.973 mo
439.543 355.125 li
440.222 355.443 li
442.166 351.291 li
f
149.488 351.457 mo
150.813 350.695 li
150.439 350.045 li
149.114 350.807 li
f
150.817 350.693 mo
156.557 347.302 li
156.175 346.656 li
150.435 350.047 li
f
443.998 346.786 mo
441.505 350.939 li
442.148 351.325 li
444.641 347.172 li
f
156.553 347.304 mo
163.771 343.151 li
163.397 342.501 li
156.179 346.654 li
f
446.115 342.655 mo
443.986 346.808 li
444.653 347.15 li
446.782 342.997 li
f
163.766 343.154 mo
164.913 342.517 li
164.549 341.861 li
163.402 342.498 li
f
164.924 342.511 mo
170.787 338.996 li
170.401 338.353 li
164.539 341.867 li
f
446.497 341.956 mo
446.119 342.645 li
446.777 343.006 li
447.155 342.316 li
f
448.806 338.467 mo
446.514 341.929 li
447.139 342.343 li
449.432 338.881 li
f
170.751 339.015 mo
178.992 335.213 li
178.678 334.532 li
170.437 338.334 li
f
179.002 335.208 mo
179.707 334.856 li
179.372 334.185 li
178.667 334.537 li
f
451.794 334.302 mo
448.814 338.456 li
449.424 338.893 li
452.403 334.74 li
f
179.701 334.859 mo
188.353 330.706 li
188.029 330.03 li
179.377 334.183 li
f
454.289 330.174 mo
451.778 334.327 li
452.419 334.715 li
454.931 330.562 li
f
188.359 330.703 mo
193.108 328.323 li
192.772 327.653 li
188.023 330.032 li
f
193.106 328.324 mo
196.705 326.552 li
196.373 325.879 li
192.774 327.651 li
f
456.08 326.065 mo
454.267 330.218 li
454.954 330.518 li
456.767 326.365 li
f
196.678 326.564 mo
207.07 322.411 li
206.792 321.715 li
196.4 325.867 li
f
457.016 321.979 mo
456.058 326.131 li
456.789 326.3 li
457.747 322.147 li
f
207.064 322.414 mo
207.177 322.371 li
206.912 321.669 li
206.799 321.712 li
f
207.166 322.375 mo
219.215 318.265 li
218.973 317.555 li
206.924 321.665 li
f
456.598 317.947 mo
457.009 322.1 li
457.755 322.026 li
457.345 317.873 li
f
219.236 318.257 mo
221.292 317.412 li
221.007 316.718 li
218.951 317.563 li
f
221.296 317.41 mo
229.124 314.103 li
228.832 313.412 li
221.004 316.719 li
f
452.094 314.036 mo
456.721 318.189 li
457.222 317.631 li
452.595 313.478 li
f
229.128 314.101 mo
235.404 311.369 li
235.104 310.681 li
228.828 313.413 li
f
235.402 311.369 mo
238.701 309.948 li
238.404 309.26 li
235.106 310.68 li
f
442.227 309.949 mo
446.68 311.829 li
446.972 311.138 li
442.519 309.259 li
f
446.683 311.831 mo
452.202 314.104 li
452.488 313.411 li
446.969 311.137 li
f
238.673 309.959 mo
249.479 306.302 li
249.239 305.592 li
238.433 309.249 li
f
249.476 306.303 mo
250.982 305.808 li
250.748 305.095 li
249.242 305.591 li
f
426.085 305.817 mo
432.639 307.295 li
432.804 306.563 li
426.25 305.086 li
f
432.622 307.291 mo
442.273 309.965 li
442.473 309.243 li
432.822 306.568 li
f
250.961 305.814 mo
263.559 302.496 li
263.368 301.771 li
250.77 305.089 li
f
263.532 302.502 mo
268.062 301.668 li
267.926 300.931 li
263.396 301.764 li
f
396.899 301.672 mo
404.466 302.595 li
404.557 301.851 li
396.99 300.927 li
f
404.462 302.595 mo
418.567 304.463 li
418.665 303.72 li
404.561 301.851 li
f
418.55 304.46 mo
426.101 305.821 li
426.234 305.083 li
418.683 303.722 li
f
268.048 301.67 mo
277.623 300.275 li
277.515 299.533 li
267.94 300.928 li
f
277.601 300.277 mo
291.706 299.075 li
291.642 298.328 li
277.537 299.53 li
f
291.696 299.076 mo
305.801 298.222 li
305.756 297.474 li
291.651 298.327 li
f
305.782 298.223 mo
319.887 298.075 li
319.879 297.325 li
305.774 297.473 li
f
319.881 298.075 mo
333.986 298.132 li
333.989 297.382 li
319.884 297.325 li
f
333.984 298.132 mo
348.09 298.253 li
348.096 297.503 li
333.991 297.382 li
f
348.079 298.253 mo
362.183 298.754 li
362.21 298.005 li
348.106 297.504 li
f
362.172 298.754 mo
376.277 299.677 li
376.326 298.929 li
362.221 298.005 li
f
376.268 299.677 mo
390.374 300.933 li
390.44 300.186 li
376.335 298.93 li
f
390.365 300.932 mo
396.902 301.672 li
396.987 300.927 li
390.449 300.186 li
f
319.944 251.475 mo
317.654 251.096 li
317.532 251.836 li
319.822 252.215 li
f
334.03 253.09 mo
319.926 251.473 li
319.84 252.218 li
333.945 253.835 li
f
348.101 253.39 mo
333.995 253.088 li
333.979 253.838 li
348.085 254.14 li
f
362.186 253.006 mo
348.083 253.39 li
348.103 254.14 li
362.206 253.756 li
f
376.271 251.857 mo
362.166 253.008 li
362.227 253.755 li
376.332 252.605 li
f
383.381 251.093 mo
376.262 251.858 li
376.342 252.604 li
383.461 251.839 li
f
317.722 251.114 mo
306.4 246.962 li
306.141 247.666 li
317.464 251.818 li
f
390.345 249.917 mo
383.358 251.097 li
383.483 251.836 li
390.47 250.657 li
f
404.321 246.947 mo
390.329 249.92 li
390.485 250.654 li
404.477 247.681 li
f
306.044 246.567 mo
302.387 242.896 li
301.855 243.426 li
305.513 247.097 li
f
306.533 247.046 mo
306.041 246.564 li
305.516 247.1 li
306.008 247.582 li
f
404.343 246.922 mo
404.231 246.979 li
404.568 247.649 li
404.681 247.592 li
f
411.934 242.831 mo
404.334 246.927 li
404.69 247.587 li
412.29 243.491 li
f
302.343 242.859 mo
296.685 238.706 li
296.241 239.311 li
301.899 243.463 li
f
411.507 239.029 mo
411.738 243.182 li
412.487 243.14 li
412.256 238.988 li
f
291.924 235.211 mo
291.215 234.576 li
290.715 235.134 li
291.424 235.77 li
f
296.685 238.706 mo
291.896 235.188 li
291.452 235.792 li
296.241 239.311 li
f
405.699 235.163 mo
411.668 239.316 li
412.096 238.7 li
406.127 234.547 li
f
291.245 234.605 mo
287.544 230.454 li
286.984 230.953 li
290.685 235.104 li
f
393.211 231.06 mo
404.398 234.62 li
404.625 233.905 li
393.438 230.346 li
f
404.366 234.608 mo
405.767 235.2 li
406.059 234.51 li
404.658 233.917 li
f
287.465 230.387 mo
280.935 226.234 li
280.533 226.867 li
287.063 231.02 li
f
382.29 226.902 mo
390.278 229.841 li
390.537 229.137 li
382.549 226.198 li
f
390.263 229.835 mo
393.18 231.049 li
393.468 230.357 li
390.551 229.143 li
f
277.713 224.915 mo
270.856 222.051 li
270.567 222.743 li
277.424 225.607 li
f
280.875 226.203 mo
277.71 224.914 li
277.427 225.609 li
280.592 226.898 li
f
375.383 222.709 mo
376.094 223.182 li
376.509 222.557 li
375.797 222.084 li
f
376.108 223.19 mo
382.227 226.872 li
382.613 226.229 li
376.495 222.548 li
f
263.652 218.619 mo
262.454 217.921 li
262.076 218.569 li
263.275 219.267 li
f
270.873 222.058 mo
263.625 218.604 li
263.303 219.281 li
270.551 222.735 li
f
371.273 218.507 mo
375.321 222.659 li
375.858 222.135 li
371.809 217.983 li
f
262.463 217.926 mo
255.765 213.774 li
255.37 214.411 li
262.068 218.564 li
f
368.228 214.312 mo
371.237 218.465 li
371.845 218.025 li
368.835 213.872 li
f
249.553 210.364 mo
248.323 209.618 li
247.934 210.26 li
249.164 211.006 li
f
255.748 213.764 mo
249.539 210.356 li
249.178 211.014 li
255.387 214.421 li
f
365.015 210.169 mo
368.235 214.322 li
368.828 213.863 li
365.608 209.709 li
f
248.356 209.641 mo
242.918 205.488 li
242.462 206.084 li
247.901 210.237 li
f
362.993 205.947 mo
364.973 210.1 li
365.65 209.778 li
363.671 205.625 li
f
242.969 205.536 mo
239.258 201.384 li
238.698 201.884 li
242.41 206.036 li
f
359.987 201.87 mo
361.904 204.246 li
362.488 203.775 li
360.57 201.399 li
f
361.88 204.212 mo
363.016 205.988 li
363.648 205.584 li
362.512 203.808 li
f
239.266 201.394 mo
235.797 197.241 li
235.221 197.721 li
238.69 201.875 li
f
356.874 197.705 mo
359.978 201.859 li
360.579 201.41 li
357.475 197.256 li
f
235.596 196.681 mo
234.03 193.175 li
233.346 193.481 li
234.911 196.987 li
f
235.858 197.343 mo
235.603 196.697 li
234.905 196.971 li
235.16 197.618 li
f
350.372 193.646 mo
356.975 197.798 li
357.374 197.163 li
350.771 193.011 li
f
234.008 193.523 mo
235.574 190.953 li
234.934 190.563 li
233.368 193.133 li
f
235.582 190.94 mo
236.462 189.357 li
235.806 188.993 li
234.926 190.576 li
f
341.898 189.514 mo
347.931 192.399 li
348.255 191.723 li
342.221 188.837 li
f
347.922 192.395 mo
350.401 193.662 li
350.742 192.994 li
348.263 191.727 li
f
236.387 189.452 mo
240.933 185.3 li
240.427 184.746 li
235.881 188.898 li
f
332.783 185.364 mo
333.832 185.841 li
334.143 185.159 li
333.094 184.682 li
f
333.832 185.841 mo
341.904 189.517 li
342.215 188.834 li
334.143 185.159 li
f
240.884 185.338 mo
247.304 181.185 li
246.896 180.555 li
240.476 184.708 li
f
322.607 181.217 mo
332.797 185.37 li
333.08 184.676 li
322.89 180.523 li
f
247.223 181.225 mo
249.481 180.444 li
249.236 179.735 li
246.978 180.516 li
f
249.447 180.454 mo
263.338 177.082 li
263.162 176.353 li
249.27 179.725 li
f
307.756 177.08 mo
319.789 180.206 li
319.977 179.48 li
307.945 176.354 li
f
319.756 180.196 mo
322.622 181.223 li
322.875 180.517 li
320.009 179.49 li
f
263.322 177.085 mo
263.536 177.043 li
263.392 176.307 li
263.178 176.349 li
f
263.52 177.046 mo
277.625 174.917 li
277.513 174.175 li
263.408 176.304 li
f
277.578 174.921 mo
291.683 174.582 li
291.665 173.832 li
277.56 174.171 li
f
291.619 174.578 mo
305.724 176.654 li
305.833 175.912 li
291.728 173.836 li
f
305.701 176.65 mo
307.774 177.084 li
307.927 176.35 li
305.855 175.916 li
f
252.287 315.571 mo
257.04 315.848 li
257.084 315.099 li
252.331 314.822 li
f
257.039 315.847 mo
263.437 316.239 li
263.483 315.49 li
257.085 315.099 li
f
263.494 316.238 mo
269.892 315.646 li
269.823 314.9 li
263.425 315.491 li
f
269.891 315.646 mo
270.745 315.57 li
270.679 314.823 li
269.825 314.899 li
f
243.184 314.493 mo
244.2 314.672 li
244.33 313.933 li
243.314 313.754 li
f
244.219 314.674 mo
250.618 315.462 li
250.71 314.718 li
244.311 313.93 li
f
250.64 315.465 mo
252.285 315.571 li
252.333 314.823 li
250.688 314.716 li
f
270.749 315.57 mo
276.293 315.015 li
276.219 314.269 li
270.675 314.824 li
f
276.315 315.012 mo
279.587 314.494 li
279.47 313.753 li
276.197 314.272 li
f
237.411 313.412 mo
237.774 313.504 li
237.96 312.778 li
237.597 312.685 li
f
237.8 313.51 mo
243.182 314.492 li
243.316 313.755 li
237.935 312.772 li
f
279.605 314.491 mo
282.731 313.837 li
282.578 313.103 li
279.452 313.756 li
f
282.76 313.83 mo
284.202 313.408 li
283.991 312.688 li
282.549 313.11 li
f
233.235 312.336 mo
237.41 313.411 li
237.597 312.685 li
233.422 311.61 li
f
284.171 313.416 mo
289.127 312.412 li
288.978 311.677 li
284.022 312.681 li
f
289.148 312.407 mo
289.419 312.336 li
289.228 311.611 li
288.957 311.682 li
f
230.51 311.247 mo
231.329 311.577 li
231.609 310.881 li
230.79 310.551 li
f
231.329 311.577 mo
233.189 312.321 li
233.467 311.625 li
231.608 310.881 li
f
289.478 312.315 mo
291.842 311.24 li
291.531 310.558 li
289.168 311.632 li
f
227.951 310.169 mo
230.504 311.245 li
230.795 310.553 li
228.242 309.478 li
f
291.89 311.214 mo
293.559 310.139 li
293.153 309.508 li
291.483 310.584 li
f
225.857 309.083 mo
227.923 310.156 li
228.269 309.491 li
226.203 308.418 li
f
293.548 310.146 mo
295.358 309.073 li
294.976 308.428 li
293.165 309.501 li
f
224.475 307.958 mo
224.825 308.262 li
225.317 307.696 li
224.967 307.392 li
f
224.836 308.271 mo
225.795 309.043 li
226.265 308.458 li
225.306 307.687 li
f
295.533 308.832 mo
295.773 307.757 li
295.041 307.594 li
294.801 308.669 li
f
223.751 306.794 mo
224.4 307.869 li
225.042 307.481 li
224.393 306.406 li
f
295.752 307.528 mo
295.294 306.453 li
294.604 306.747 li
295.062 307.822 li
f
222.672 305.799 mo
223.815 306.873 li
224.329 306.327 li
223.186 305.253 li
f
295.209 306.33 mo
294.091 305.255 li
293.571 305.796 li
294.689 306.871 li
f
222.54 304.456 mo
222.554 305.531 li
223.304 305.521 li
223.29 304.446 li
f
294.032 305.209 mo
292.341 304.134 li
291.938 304.767 li
293.63 305.842 li
f
223.517 303.138 mo
222.626 304.211 li
223.204 304.69 li
224.094 303.617 li
f
292.305 304.114 mo
290.126 303.041 li
289.794 303.714 li
291.974 304.787 li
f
223.695 302.216 mo
223.44 303.291 li
224.17 303.464 li
224.425 302.389 li
f
289.136 302.659 mo
285.967 301.937 li
285.8 302.668 li
288.969 303.391 li
f
290.096 303.028 mo
289.189 302.675 li
288.917 303.374 li
289.824 303.727 li
f
224.893 301.427 mo
223.882 301.972 li
224.238 302.632 li
225.249 302.087 li
f
226.191 300.881 mo
224.926 301.411 li
225.216 302.103 li
226.481 301.573 li
f
282.743 301.397 mo
280.55 300.863 li
280.372 301.591 li
282.566 302.126 li
f
285.946 301.932 mo
282.717 301.391 li
282.593 302.131 li
285.822 302.672 li
f
230.904 299.787 mo
226.252 300.862 li
226.42 301.592 li
231.073 300.518 li
f
276.306 299.936 mo
275.163 299.781 li
275.062 300.524 li
276.205 300.68 li
f
280.541 300.861 mo
276.336 299.942 li
276.176 300.674 li
280.381 301.593 li
f
231.372 299.663 mo
230.892 299.79 li
231.085 300.515 li
231.565 300.387 li
f
236.634 298.709 mo
231.402 299.656 li
231.536 300.394 li
236.768 299.447 li
f
269.891 299.188 mo
264.455 298.704 li
264.389 299.451 li
269.825 299.935 li
f
275.155 299.78 mo
269.9 299.188 li
269.816 299.934 li
275.071 300.525 li
f
237.833 298.599 mo
236.667 298.704 li
236.735 299.451 li
237.901 299.346 li
f
244.247 298.282 mo
237.849 298.598 li
237.886 299.347 li
244.284 299.031 li
f
250.658 298.181 mo
244.259 298.282 li
244.271 299.032 li
250.67 298.931 li
f
257.071 298.341 mo
250.673 298.181 li
250.655 298.931 li
257.053 299.091 li
f
263.477 298.637 mo
257.079 298.342 li
257.045 299.091 li
263.443 299.386 li
f
264.448 298.704 mo
263.486 298.637 li
263.434 299.385 li
264.396 299.452 li
f
270.071 257.543 mo
276.226 258.034 li
276.286 257.286 li
270.131 256.795 li
f
276.242 258.035 mo
282.641 258.264 li
282.668 257.514 li
276.269 257.285 li
f
282.653 258.264 mo
289.051 258.287 li
289.054 257.537 li
282.656 257.514 li
f
289.062 258.287 mo
295.461 258.126 li
295.442 257.376 li
289.043 257.537 li
f
295.464 258.126 mo
301.861 257.913 li
301.836 257.163 li
295.439 257.376 li
f
301.871 257.912 mo
307.957 257.543 li
307.912 256.795 li
301.826 257.164 li
f
264.52 256.462 mo
269.785 257.509 li
269.931 256.773 li
264.666 255.726 li
f
269.815 257.514 mo
270.058 257.542 li
270.144 256.796 li
269.901 256.769 li
f
307.959 257.543 mo
308.271 257.523 li
308.223 256.775 li
307.911 256.795 li
f
308.273 257.523 mo
314.672 257.074 li
314.619 256.326 li
308.221 256.775 li
f
314.675 257.074 mo
321.073 256.572 li
321.015 255.824 li
314.616 256.326 li
f
321.084 256.571 mo
322.049 256.467 li
321.969 255.721 li
321.004 255.825 li
f
261.488 255.368 mo
263.321 256.097 li
263.599 255.401 li
261.766 254.672 li
f
263.351 256.108 mo
264.483 256.453 li
264.702 255.736 li
263.569 255.39 li
f
322.049 256.467 mo
327.483 255.876 li
327.402 255.13 li
321.968 255.721 li
f
327.482 255.876 mo
332.05 255.393 li
331.971 254.647 li
327.403 255.13 li
f
260.118 254.231 mo
261.384 255.306 li
261.87 254.734 li
260.603 253.659 li
f
332.057 255.392 mo
333.886 255.167 li
333.794 254.423 li
331.965 254.648 li
f
333.889 255.167 mo
340.287 254.317 li
340.188 253.574 li
333.79 254.423 li
f
259.6 253.005 mo
260.011 254.079 li
260.711 253.811 li
260.3 252.737 li
f
340.296 254.316 mo
346.695 253.302 li
346.578 252.561 li
340.179 253.575 li
f
346.694 253.302 mo
347.082 253.242 li
346.967 252.501 li
346.579 252.561 li
f
259.831 251.712 mo
259.585 252.787 li
260.316 252.955 li
260.562 251.88 li
f
347.089 253.241 mo
353.099 252.194 li
352.971 251.455 li
346.96 252.502 li
f
353.105 252.193 mo
353.254 252.164 li
353.115 251.427 li
352.965 251.456 li
f
260.464 250.54 mo
259.869 251.614 li
260.525 251.978 li
261.12 250.903 li
f
353.26 252.163 mo
358.464 251.088 li
358.312 250.354 li
353.109 251.429 li
f
261.397 249.407 mo
260.504 250.481 li
261.08 250.961 li
261.973 249.887 li
f
358.467 251.088 mo
359.512 250.863 li
359.354 250.13 li
358.309 250.355 li
f
359.519 250.861 mo
363.113 250.012 li
362.94 249.282 li
359.346 250.131 li
f
262.599 248.296 mo
261.431 249.371 li
261.939 249.923 li
263.107 248.848 li
f
363.114 250.012 mo
365.919 249.339 li
365.744 248.609 li
362.939 249.282 li
f
365.919 249.339 mo
367.58 248.937 li
367.404 248.208 li
365.743 248.61 li
f
263.229 247.801 mo
262.622 248.277 li
263.084 248.867 li
263.691 248.391 li
f
264.071 247.194 mo
263.241 247.792 li
263.679 248.4 li
264.509 247.802 li
f
367.592 248.934 mo
371.477 247.859 li
371.277 247.137 li
367.392 248.211 li
f
265.753 246.108 mo
264.087 247.183 li
264.493 247.813 li
266.159 246.738 li
f
371.484 247.857 mo
372.337 247.602 li
372.122 246.884 li
371.27 247.139 li
f
372.343 247.601 mo
374.934 246.781 li
374.708 246.066 li
372.116 246.886 li
f
267.478 245.03 mo
265.757 246.105 li
266.155 246.741 li
267.875 245.666 li
f
374.94 246.779 mo
378.152 245.704 li
377.914 244.993 li
374.702 246.068 li
f
269.293 243.952 mo
267.485 245.026 li
267.868 245.671 li
269.676 244.596 li
f
378.162 245.7 mo
378.756 245.484 li
378.499 244.779 li
377.905 244.996 li
f
378.763 245.481 mo
380.979 244.624 li
380.708 243.924 li
378.493 244.782 li
f
269.677 243.74 mo
269.304 243.946 li
269.666 244.602 li
270.039 244.396 li
f
271.396 242.865 mo
269.688 243.734 li
270.028 244.402 li
271.736 243.533 li
f
380.987 244.62 mo
383.578 243.546 li
383.291 242.853 li
380.7 243.928 li
f
273.477 241.792 mo
271.394 242.866 li
271.738 243.533 li
273.821 242.458 li
f
383.587 243.542 mo
385.179 242.831 li
384.873 242.146 li
383.282 242.857 li
f
385.187 242.827 mo
385.954 242.464 li
385.634 241.786 li
384.866 242.149 li
f
275.61 240.715 mo
273.48 241.79 li
273.818 242.46 li
275.948 241.385 li
f
385.969 242.457 mo
388.002 241.382 li
387.652 240.719 li
385.619 241.793 li
f
276.09 240.479 mo
275.613 240.714 li
275.945 241.387 li
276.422 241.151 li
f
277.962 239.633 mo
276.102 240.473 li
276.41 241.157 li
278.271 240.317 li
f
388.013 241.376 mo
389.898 240.301 li
389.526 239.649 li
387.641 240.725 li
f
280.339 238.559 mo
277.962 239.633 li
278.271 240.317 li
280.648 239.243 li
f
389.911 240.293 mo
391.623 239.219 li
391.224 238.583 li
389.513 239.657 li
f
391.424 239.276 mo
391.425 239.276 li
391.425 238.526 li
391.424 238.526 li
f
282.499 237.576 mo
280.338 238.56 li
280.648 239.242 li
282.81 238.258 li
f
282.729 237.48 mo
282.511 237.571 li
282.799 238.263 li
283.017 238.172 li
f
391.655 239.197 mo
393.038 238.122 li
392.577 237.53 li
391.195 238.605 li
f
285.355 236.405 mo
282.731 237.479 li
283.015 238.173 li
285.639 237.099 li
f
393.055 238.108 mo
394.28 237.034 li
393.786 236.47 li
392.56 237.544 li
f
287.943 235.331 mo
285.353 236.406 li
285.641 237.098 li
288.231 236.024 li
f
394.302 237.014 mo
395.35 235.939 li
394.814 235.415 li
393.765 236.49 li
f
288.907 234.925 mo
287.941 235.332 li
288.232 236.023 li
289.198 235.617 li
f
290.691 234.251 mo
288.92 234.92 li
289.185 235.622 li
290.956 234.953 li
f
395.373 235.914 mo
396.246 234.838 li
395.664 234.366 li
394.791 235.441 li
f
293.5 233.178 mo
290.689 234.252 li
290.957 234.952 li
293.768 233.879 li
f
396.269 234.808 mo
396.973 233.734 li
396.346 233.323 li
395.641 234.396 li
f
295.317 232.48 mo
293.499 233.178 li
293.768 233.878 li
295.586 233.18 li
f
296.424 232.099 mo
295.329 232.475 li
295.573 233.185 li
296.668 232.808 li
f
396.998 233.689 mo
397.509 232.614 li
396.832 232.292 li
396.321 233.367 li
f
299.434 231.026 mo
296.42 232.1 li
296.672 232.806 li
299.685 231.732 li
f
397.529 232.565 mo
397.864 231.491 li
397.148 231.267 li
396.813 232.341 li
f
301.721 230.2 mo
299.432 231.026 li
299.687 231.732 li
301.976 230.906 li
f
302.514 229.947 mo
301.734 230.196 li
301.963 230.91 li
302.742 230.661 li
f
397.878 231.422 mo
398.003 230.348 li
397.258 230.261 li
397.133 231.336 li
f
305.812 228.872 mo
302.512 229.948 li
302.744 230.661 li
306.044 229.586 li
f
398.005 230.274 mo
397.917 229.198 li
397.169 229.26 li
397.257 230.335 li
f
308.128 228.099 mo
305.809 228.873 li
306.046 229.585 li
308.366 228.811 li
f
309.161 227.796 mo
308.141 228.095 li
308.353 228.815 li
309.372 228.515 li
f
397.903 229.123 mo
397.587 228.05 li
396.868 228.261 li
397.183 229.335 li
f
313.041 226.719 mo
309.166 227.794 li
309.367 228.517 li
313.242 227.441 li
f
397.563 227.987 mo
397.021 226.912 li
396.352 227.249 li
396.893 228.324 li
f
314.53 226.236 mo
313.026 226.723 li
313.257 227.437 li
314.761 226.949 li
f
316.491 225.647 mo
314.538 226.233 li
314.753 226.951 li
316.706 226.366 li
f
396.986 226.855 mo
396.181 225.781 li
395.581 226.231 li
396.387 227.305 li
f
320.377 224.57 mo
316.498 225.645 li
316.699 226.368 li
320.578 225.293 li
f
396.145 225.74 mo
395.062 224.665 li
394.534 225.197 li
395.617 226.272 li
f
320.941 224.409 mo
320.375 224.57 li
320.58 225.292 li
321.147 225.131 li
f
324.658 223.492 mo
320.954 224.406 li
321.134 225.134 li
324.838 224.22 li
f
395.018 224.628 mo
393.538 223.553 li
393.097 224.159 li
394.577 225.235 li
f
327.36 222.881 mo
324.665 223.49 li
324.831 224.222 li
327.525 223.613 li
f
329.63 222.415 mo
327.367 222.88 li
327.518 223.614 li
329.781 223.15 li
f
393.526 223.545 mo
391.928 222.471 li
391.51 223.094 li
393.108 224.167 li
f
333.753 221.436 mo
329.618 222.417 li
329.792 223.147 li
333.926 222.166 li
f
334.291 221.338 mo
333.773 221.432 li
333.907 222.17 li
334.425 222.076 li
f
391.563 222.261 mo
389.313 221.359 li
389.034 222.055 li
391.284 222.957 li
f
391.909 222.459 mo
391.614 222.286 li
391.234 222.932 li
391.529 223.106 li
f
339.941 220.265 mo
334.288 221.339 li
334.428 222.075 li
340.081 221.002 li
f
389.294 221.352 mo
386.119 220.278 li
385.879 220.989 li
389.054 222.062 li
f
340.164 220.22 mo
339.937 220.266 li
340.084 221.001 li
340.311 220.956 li
f
346.58 219.231 mo
340.18 220.217 li
340.294 220.959 li
346.694 219.973 li
f
346.976 219.186 mo
346.594 219.23 li
346.68 219.975 li
347.061 219.931 li
f
385.11 219.978 mo
381.682 219.193 li
381.515 219.924 li
384.943 220.709 li
f
386.106 220.274 mo
385.134 219.984 li
384.919 220.703 li
385.892 220.993 li
f
352.991 218.474 mo
346.974 219.186 li
347.063 219.93 li
353.079 219.219 li
f
357.771 218.109 mo
353.007 218.472 li
353.064 219.22 li
357.828 218.857 li
f
378.665 218.604 mo
373.681 218.11 li
373.607 218.856 li
378.591 219.35 li
f
381.671 219.19 mo
378.7 218.609 li
378.556 219.345 li
381.527 219.926 li
f
359.403 217.979 mo
357.77 218.109 li
357.83 218.857 li
359.462 218.727 li
f
365.82 217.793 mo
359.422 217.978 li
359.443 218.728 li
365.842 218.543 li
f
372.24 217.981 mo
365.842 217.793 li
365.82 218.543 li
372.218 218.731 li
f
373.677 218.109 mo
372.263 217.982 li
372.196 218.729 li
373.61 218.856 li
f
289.833 253.245 mo
295.417 253.748 li
295.485 253.002 li
289.901 252.498 li
f
295.444 253.75 mo
301.841 253.872 li
301.856 253.122 li
295.458 253 li
f
301.861 253.872 mo
308.259 253.667 li
308.235 252.917 li
301.837 253.122 li
f
308.267 253.666 mo
314.665 253.332 li
314.626 252.583 li
308.227 252.917 li
f
314.677 253.331 mo
315.697 253.245 li
315.634 252.497 li
314.614 252.583 li
f
285.732 252.156 mo
288.947 253.104 li
289.159 252.384 li
285.944 251.436 li
f
288.995 253.115 mo
289.809 253.242 li
289.925 252.501 li
289.11 252.374 li
f
315.7 253.244 mo
321.079 252.742 li
321.009 251.995 li
315.63 252.498 li
f
321.086 252.741 mo
326.169 252.169 li
326.085 251.423 li
321.002 251.996 li
f
284.043 251.031 mo
285.627 252.106 li
286.048 251.486 li
284.464 250.411 li
f
326.172 252.168 mo
327.488 252.007 li
327.397 251.263 li
326.081 251.424 li
f
327.496 252.006 mo
333.826 251.092 li
333.719 250.35 li
327.389 251.264 li
f
283.563 249.758 mo
283.896 250.832 li
284.612 250.61 li
284.279 249.536 li
f
333.829 251.092 mo
333.896 251.082 li
333.783 250.34 li
333.716 250.35 li
f
333.911 251.079 mo
339.452 250.015 li
339.31 249.279 li
333.769 250.343 li
f
284.202 248.388 mo
283.594 249.462 li
284.247 249.832 li
284.855 248.757 li
f
339.451 250.015 mo
340.308 249.851 li
340.167 249.115 li
339.31 249.279 li
f
340.311 249.851 mo
344.85 248.94 li
344.703 248.205 li
340.164 249.115 li
f
285.198 247.25 mo
284.248 248.324 li
284.81 248.821 li
285.76 247.746 li
f
344.862 248.937 mo
346.722 248.503 li
346.551 247.773 li
344.691 248.207 li
f
346.731 248.501 mo
349.197 247.861 li
349.008 247.135 li
346.542 247.775 li
f
286.53 246.135 mo
285.239 247.21 li
285.719 247.786 li
287.01 246.712 li
f
349.203 247.859 mo
353.085 246.785 li
352.885 246.062 li
349.003 247.137 li
f
288.174 245.036 mo
286.562 246.111 li
286.978 246.735 li
288.59 245.66 li
f
353.094 246.782 mo
353.144 246.767 li
352.926 246.049 li
352.876 246.065 li
f
353.158 246.762 mo
356.211 245.702 li
355.965 244.994 li
352.912 246.054 li
f
288.864 244.634 mo
288.193 245.024 li
288.57 245.672 li
289.241 245.282 li
f
290.227 243.94 mo
288.883 244.624 li
289.223 245.292 li
290.567 244.608 li
f
356.218 245.7 mo
359.126 244.626 li
358.866 243.922 li
355.958 244.996 li
f
292.543 242.859 mo
290.239 243.934 li
290.556 244.614 li
292.86 243.539 li
f
359.143 244.619 mo
359.58 244.433 li
359.286 243.743 li
358.849 243.929 li
f
359.593 244.427 mo
361.475 243.538 li
361.155 242.86 li
359.273 243.749 li
f
294.815 241.786 mo
292.541 242.86 li
292.861 243.538 li
295.136 242.464 li
f
361.499 243.526 mo
363.415 242.452 li
363.048 241.798 li
361.132 242.872 li
f
295.3 241.572 mo
294.824 241.782 li
295.127 242.468 li
295.603 242.258 li
f
297.583 240.7 mo
295.317 241.565 li
295.585 242.265 li
297.85 241.401 li
f
363.421 242.449 mo
365.26 241.374 li
364.882 240.726 li
363.042 241.801 li
f
300.388 239.625 mo
297.583 240.7 li
297.851 241.4 li
300.657 240.325 li
f
365.298 241.349 mo
366.058 240.773 li
365.604 240.175 li
364.845 240.751 li
f
366.073 240.76 mo
366.662 240.261 li
366.177 239.689 li
365.589 240.188 li
f
301.716 239.123 mo
300.39 239.624 li
300.655 240.326 li
301.981 239.825 li
f
303.494 238.544 mo
301.733 239.118 li
301.965 239.831 li
303.726 239.257 li
f
366.71 240.213 mo
367.592 239.139 li
367.012 238.663 li
366.13 239.737 li
f
306.771 237.47 mo
303.493 238.545 li
303.727 239.257 li
307.005 238.182 li
f
367.623 239.095 mo
368.273 238.02 li
367.631 237.632 li
366.981 238.707 li
f
308.13 237.022 mo
306.77 237.47 li
307.005 238.182 li
308.365 237.734 li
f
310.391 236.391 mo
308.146 237.017 li
308.348 237.739 li
310.593 237.113 li
f
368.317 237.911 mo
368.567 236.837 li
367.837 236.667 li
367.587 237.741 li
f
314.128 235.317 mo
310.389 236.392 li
310.596 237.112 li
314.335 236.038 li
f
368.569 236.674 mo
368.34 235.599 li
367.607 235.755 li
367.835 236.83 li
f
314.541 235.197 mo
314.127 235.317 li
314.336 236.037 li
314.75 235.917 li
f
318.539 234.237 mo
314.558 235.192 li
314.733 235.922 li
318.714 234.967 li
f
368.308 235.508 mo
367.763 234.433 li
367.094 234.772 li
367.639 235.847 li
f
320.955 233.649 mo
318.538 234.238 li
318.716 234.966 li
321.133 234.378 li
f
323.45 233.16 mo
320.972 233.645 li
321.116 234.381 li
323.594 233.896 li
f
367.665 234.311 mo
366.347 233.238 li
365.874 233.819 li
367.192 234.893 li
f
327.364 232.325 mo
323.444 233.162 li
323.601 233.895 li
327.521 233.059 li
f
328.849 232.083 mo
327.382 232.322 li
327.503 233.062 li
328.969 232.823 li
f
365.993 232.994 mo
364.156 232.115 li
363.832 232.791 li
365.669 233.67 li
f
366.326 233.222 mo
366.047 233.025 li
365.615 233.639 li
365.895 233.835 li
f
333.78 231.286 mo
328.849 232.083 li
328.969 232.823 li
333.9 232.026 li
f
336.202 231.006 mo
333.797 231.284 li
333.883 232.029 li
336.288 231.751 li
f
364.1 232.094 mo
360.467 231.019 li
360.254 231.739 li
363.888 232.813 li
f
340.191 230.511 mo
336.199 231.007 li
336.291 231.751 li
340.283 231.255 li
f
346.613 230.101 mo
340.213 230.509 li
340.261 231.258 li
346.661 230.849 li
f
353.037 230.129 mo
346.638 230.1 li
346.635 230.85 li
353.033 230.879 li
f
359.471 230.794 mo
353.074 230.131 li
352.996 230.877 li
359.394 231.54 li
f
360.444 231.013 mo
359.516 230.801 li
359.349 231.533 li
360.277 231.744 li
f
222.498 260.41 mo
225.73 260.549 li
225.762 259.8 li
222.53 259.66 li
f
225.744 260.549 mo
236.479 260.607 li
236.483 259.857 li
225.748 259.799 li
f
236.491 260.607 mo
243.706 260.41 li
243.686 259.66 li
236.471 259.857 li
f
202.385 258.014 mo
204.2 258.396 li
204.354 257.662 li
202.539 257.28 li
f
204.225 258.401 mo
214.959 259.895 li
215.062 259.152 li
204.329 257.658 li
f
214.985 259.898 mo
222.489 260.409 li
222.54 259.661 li
215.036 259.15 li
f
243.709 260.41 mo
247.229 260.285 li
247.202 259.535 li
243.682 259.66 li
f
247.243 260.284 mo
257.978 259.517 li
257.924 258.769 li
247.189 259.536 li
f
257.987 259.516 mo
268.721 258.484 li
268.649 257.738 li
257.915 258.77 li
f
268.73 258.483 mo
272.597 258.019 li
272.508 257.275 li
268.64 257.738 li
f
194.97 255.616 mo
202.346 258.004 li
202.577 257.29 li
195.201 254.902 li
f
272.609 258.018 mo
279.477 256.967 li
279.363 256.225 li
272.496 257.276 li
f
279.485 256.965 mo
287.061 255.629 li
286.931 254.89 li
279.355 256.227 li
f
190.702 253.19 mo
193.345 254.816 li
193.738 254.178 li
191.095 252.552 li
f
193.376 254.833 mo
194.92 255.596 li
195.252 254.923 li
193.708 254.161 li
f
287.079 255.625 mo
290.238 254.909 li
290.072 254.177 li
286.913 254.894 li
f
290.249 254.906 mo
296.706 253.234 li
296.518 252.508 li
290.061 254.18 li
f
188.101 250.756 mo
190.642 253.144 li
191.156 252.598 li
188.615 250.21 li
f
296.732 253.227 mo
301.009 251.791 li
300.77 251.08 li
296.493 252.516 li
f
301.023 251.786 mo
303.534 250.834 li
303.268 250.132 li
300.757 251.084 li
f
186.592 248.289 mo
188.037 250.677 li
188.679 250.289 li
187.234 247.901 li
f
303.577 250.814 mo
308.088 248.427 li
307.738 247.764 li
303.226 250.151 li
f
186.13 245.771 mo
186.544 248.159 li
187.283 248.031 li
186.87 245.643 li
f
308.149 248.387 mo
311.107 245.999 li
310.635 245.415 li
307.677 247.803 li
f
186.792 243.22 mo
186.138 245.608 li
186.862 245.806 li
187.515 243.418 li
f
311.2 245.887 mo
311.953 244.51 li
311.295 244.15 li
310.542 245.527 li
f
311.962 244.492 mo
312.447 243.481 li
311.77 243.157 li
311.286 244.168 li
f
188.644 240.706 mo
186.854 243.094 li
187.454 243.544 li
189.244 241.156 li
f
312.481 243.279 mo
312.229 240.892 li
311.483 240.97 li
311.735 243.358 li
f
191.724 238.249 mo
188.711 240.637 li
189.177 241.225 li
192.19 238.837 li
f
311.912 240.345 mo
310.206 238.303 li
309.63 238.783 li
311.336 240.825 li
f
312.168 240.722 mo
311.935 240.376 li
311.313 240.794 li
311.545 241.14 li
f
193.361 237.341 mo
191.776 238.214 li
192.138 238.871 li
193.723 237.998 li
f
196.685 235.814 mo
193.386 237.329 li
193.698 238.011 li
196.998 236.496 li
f
310.12 238.227 mo
306.397 235.84 li
305.992 236.471 li
309.716 238.859 li
f
203.582 233.413 mo
196.719 235.801 li
196.965 236.509 li
203.828 234.121 li
f
301.008 233.519 mo
300.684 233.411 li
300.447 234.123 li
300.771 234.231 li
f
306.342 235.811 mo
301.038 233.53 li
300.742 234.22 li
306.046 236.5 li
f
204.176 233.247 mo
203.604 233.406 li
203.806 234.128 li
204.377 233.969 li
f
214.16 231.013 mo
204.195 233.242 li
204.359 233.974 li
214.324 231.745 li
f
300.658 233.404 mo
291.242 231.015 li
291.057 231.742 li
300.473 234.131 li
f
214.942 230.867 mo
214.174 231.01 li
214.311 231.748 li
215.079 231.604 li
f
225.694 229.356 mo
214.959 230.864 li
215.063 231.607 li
225.798 230.098 li
f
233.374 228.618 mo
225.71 229.354 li
225.782 230.1 li
233.446 229.364 li
f
279.456 229.215 mo
273.199 228.618 li
273.127 229.365 li
279.384 229.961 li
f
290.21 230.807 mo
279.475 229.217 li
279.365 229.959 li
290.1 231.549 li
f
291.224 231.011 mo
290.229 230.811 li
290.081 231.546 li
291.075 231.746 li
f
236.45 228.365 mo
233.379 228.617 li
233.441 229.365 li
236.512 229.112 li
f
247.2 227.901 mo
236.465 228.364 li
236.497 229.113 li
247.232 228.651 li
f
257.95 227.861 mo
247.214 227.901 li
247.217 228.651 li
257.953 228.611 li
f
268.699 228.261 mo
257.965 227.861 li
257.937 228.611 li
268.671 229.011 li
f
273.193 228.617 mo
268.715 228.262 li
268.655 229.01 li
273.133 229.365 li
f
235.799 255.634 mo
236.457 255.676 li
236.505 254.927 li
235.847 254.885 li
f
236.48 255.676 mo
247.215 255.69 li
247.216 254.94 li
236.481 254.926 li
f
247.237 255.689 mo
248.228 255.634 li
248.186 254.885 li
247.195 254.941 li
f
219.777 253.237 mo
225.664 254.559 li
225.828 253.827 li
219.941 252.505 li
f
225.707 254.566 mo
235.784 255.632 li
235.863 254.886 li
225.786 253.82 li
f
248.235 255.633 mo
257.98 254.894 li
257.923 254.146 li
248.179 254.885 li
f
258 254.892 mo
268.734 253.487 li
268.636 252.743 li
257.902 254.148 li
f
268.753 253.484 mo
270.081 253.24 li
269.945 252.502 li
268.617 252.746 li
f
213.808 250.812 mo
214.831 251.371 li
215.191 250.713 li
214.168 250.154 li
f
214.878 251.393 mo
219.727 253.222 li
219.991 252.52 li
215.143 250.691 li
f
270.103 253.235 mo
279.51 250.913 li
279.33 250.185 li
269.923 252.507 li
f
279.532 250.907 mo
279.744 250.841 li
279.521 250.125 li
279.308 250.191 li
f
211.328 248.361 mo
213.723 250.748 li
214.253 250.217 li
211.858 247.83 li
f
279.793 250.822 mo
284.848 248.434 li
284.528 247.756 li
279.473 250.144 li
f
210.565 245.808 mo
211.232 248.196 li
211.954 247.994 li
211.287 245.606 li
f
284.927 248.384 mo
287.817 245.996 li
287.339 245.418 li
284.449 247.806 li
f
211.574 243.175 mo
210.58 245.563 li
211.272 245.851 li
212.266 243.463 li
f
287.944 245.791 mo
288.491 243.403 li
287.76 243.235 li
287.213 245.623 li
f
214.39 240.649 mo
211.672 243.037 li
212.167 243.601 li
214.885 241.213 li
f
288.417 243.083 mo
286.485 240.695 li
285.902 241.167 li
287.834 243.555 li
f
214.836 240.402 mo
214.462 240.6 li
214.812 241.263 li
215.186 241.065 li
f
220.488 238.194 mo
214.874 240.385 li
215.147 241.083 li
220.76 238.892 li
f
286.369 240.599 mo
281.843 238.211 li
281.493 238.875 li
286.019 241.263 li
f
225.647 236.777 mo
220.525 238.181 li
220.723 238.905 li
225.845 237.5 li
f
231.092 235.786 mo
225.679 236.769 li
225.813 237.507 li
231.226 236.524 li
f
279.501 237.425 mo
272.081 235.789 li
271.919 236.521 li
279.339 238.157 li
f
281.787 238.187 mo
279.539 237.435 li
279.301 238.147 li
281.549 238.899 li
f
236.429 235.044 mo
231.108 235.784 li
231.211 236.527 li
236.533 235.786 li
f
247.19 234.312 mo
236.456 235.041 li
236.506 235.789 li
247.241 235.06 li
f
257.953 234.37 mo
247.218 234.311 li
247.214 235.061 li
257.949 235.12 li
f
268.716 235.248 mo
257.982 234.371 li
257.921 235.119 li
268.655 235.996 li
f
272.06 235.785 mo
268.745 235.252 li
268.625 235.992 li
271.94 236.526 li
f
320.819 245.549 mo
327.667 245.549 li
324.243 238.7 li
320.819 245.549 li
cp
0 0 0 rgb
f
281.133 243.647 mo
280.758 243.647 li
280.758 247.065 li
284.552 247.065 li
284.552 244.022 li
287.596 244.022 li
287.596 240.228 li
284.552 240.228 li
284.552 237.184 li
280.758 237.184 li
280.758 240.228 li
277.714 240.228 li
277.714 244.022 li
281.133 244.022 li
281.133 243.647 li
280.758 243.647 li
281.133 243.647 li
281.133 243.272 li
278.464 243.272 li
278.464 240.978 li
281.508 240.978 li
281.508 237.934 li
283.802 237.934 li
283.802 240.978 li
286.846 240.978 li
286.846 243.272 li
283.802 243.272 li
283.802 246.315 li
281.508 246.315 li
281.508 243.272 li
281.133 243.272 li
281.133 243.647 li
cp
1 0 0 rgb
f
250.664 249.131 mo
254.088 242.282 li
247.239 242.282 li
250.664 249.131 li
cp
0 0 0 rgb
f
298.649 190.993 mo
299.675 194.148 li
302.992 194.148 li
300.31 196.098 li
301.334 199.253 li
298.649 197.303 li
295.966 199.253 li
296.992 196.098 li
294.308 194.148 li
297.625 194.148 li
298.649 190.993 li
cp
298.649 359.346 mo
299.675 362.501 li
302.992 362.501 li
300.31 364.451 li
301.334 367.606 li
298.649 365.656 li
295.966 367.606 li
296.992 364.451 li
294.308 362.501 li
297.625 362.501 li
298.649 359.346 li
cp
f
90.709 278.32 mo
91.709 278.32 li
91.709 277.57 li
90.709 277.57 li
cp
93.709 278.32 mo
94.709 278.32 li
94.709 277.57 li
93.709 277.57 li
cp
96.709 278.32 mo
97.709 278.32 li
97.709 277.57 li
96.709 277.57 li
cp
99.709 278.32 mo
100.709 278.32 li
100.709 277.57 li
99.709 277.57 li
cp
102.709 278.32 mo
103.709 278.32 li
103.709 277.57 li
102.709 277.57 li
cp
105.709 278.32 mo
106.709 278.32 li
106.709 277.57 li
105.709 277.57 li
cp
108.709 278.32 mo
109.709 278.32 li
109.709 277.57 li
108.709 277.57 li
cp
111.709 278.32 mo
112.709 278.32 li
112.709 277.57 li
111.709 277.57 li
cp
114.709 278.32 mo
115.709 278.32 li
115.709 277.57 li
114.709 277.57 li
cp
117.709 278.32 mo
118.709 278.32 li
118.709 277.57 li
117.709 277.57 li
cp
120.709 278.32 mo
121.709 278.32 li
121.709 277.57 li
120.709 277.57 li
cp
123.709 278.32 mo
124.709 278.32 li
124.709 277.57 li
123.709 277.57 li
cp
126.709 278.32 mo
127.709 278.32 li
127.709 277.57 li
126.709 277.57 li
cp
129.709 278.32 mo
130.709 278.32 li
130.709 277.57 li
129.709 277.57 li
cp
132.709 278.32 mo
133.709 278.32 li
133.709 277.57 li
132.709 277.57 li
cp
135.709 278.32 mo
136.709 278.32 li
136.709 277.57 li
135.709 277.57 li
cp
138.709 278.32 mo
139.709 278.32 li
139.709 277.57 li
138.709 277.57 li
cp
141.709 278.32 mo
142.709 278.32 li
142.709 277.57 li
141.709 277.57 li
cp
144.709 278.32 mo
145.709 278.32 li
145.709 277.57 li
144.709 277.57 li
cp
147.709 278.32 mo
148.709 278.32 li
148.709 277.57 li
147.709 277.57 li
cp
150.709 278.32 mo
151.709 278.32 li
151.709 277.57 li
150.709 277.57 li
cp
153.709 278.32 mo
154.709 278.32 li
154.709 277.57 li
153.709 277.57 li
cp
156.709 278.32 mo
157.709 278.32 li
157.709 277.57 li
156.709 277.57 li
cp
159.709 278.32 mo
160.709 278.32 li
160.709 277.57 li
159.709 277.57 li
cp
162.709 278.32 mo
163.709 278.32 li
163.709 277.57 li
162.709 277.57 li
cp
165.709 278.32 mo
166.709 278.32 li
166.709 277.57 li
165.709 277.57 li
cp
168.709 278.32 mo
169.709 278.32 li
169.709 277.57 li
168.709 277.57 li
cp
171.709 278.32 mo
172.709 278.32 li
172.709 277.57 li
171.709 277.57 li
cp
174.709 278.32 mo
175.709 278.32 li
175.709 277.57 li
174.709 277.57 li
cp
177.709 278.32 mo
178.709 278.32 li
178.709 277.57 li
177.709 277.57 li
cp
180.709 278.32 mo
181.709 278.32 li
181.709 277.57 li
180.709 277.57 li
cp
183.709 278.32 mo
184.709 278.32 li
184.709 277.57 li
183.709 277.57 li
cp
186.709 278.32 mo
187.709 278.32 li
187.709 277.57 li
186.709 277.57 li
cp
189.709 278.32 mo
190.709 278.32 li
190.709 277.57 li
189.709 277.57 li
cp
192.709 278.32 mo
193.709 278.32 li
193.709 277.57 li
192.709 277.57 li
cp
195.709 278.32 mo
196.709 278.32 li
196.709 277.57 li
195.709 277.57 li
cp
198.709 278.32 mo
199.709 278.32 li
199.709 277.57 li
198.709 277.57 li
cp
201.709 278.32 mo
202.709 278.32 li
202.709 277.57 li
201.709 277.57 li
cp
204.709 278.32 mo
205.709 278.32 li
205.709 277.57 li
204.709 277.57 li
cp
207.709 278.32 mo
208.709 278.32 li
208.709 277.57 li
207.709 277.57 li
cp
210.709 278.32 mo
211.709 278.32 li
211.709 277.57 li
210.709 277.57 li
cp
213.709 278.32 mo
214.709 278.32 li
214.709 277.57 li
213.709 277.57 li
cp
216.709 278.32 mo
217.709 278.32 li
217.709 277.57 li
216.709 277.57 li
cp
219.709 278.32 mo
220.709 278.32 li
220.709 277.57 li
219.709 277.57 li
cp
222.709 278.32 mo
223.709 278.32 li
223.709 277.57 li
222.709 277.57 li
cp
225.709 278.32 mo
226.709 278.32 li
226.709 277.57 li
225.709 277.57 li
cp
228.709 278.32 mo
229.709 278.32 li
229.709 277.57 li
228.709 277.57 li
cp
231.709 278.32 mo
232.709 278.32 li
232.709 277.57 li
231.709 277.57 li
cp
234.709 278.32 mo
235.709 278.32 li
235.709 277.57 li
234.709 277.57 li
cp
237.709 278.32 mo
238.709 278.32 li
238.709 277.57 li
237.709 277.57 li
cp
240.709 278.32 mo
241.709 278.32 li
241.709 277.57 li
240.709 277.57 li
cp
243.709 278.32 mo
244.709 278.32 li
244.709 277.57 li
243.709 277.57 li
cp
246.709 278.32 mo
247.709 278.32 li
247.709 277.57 li
246.709 277.57 li
cp
249.709 278.32 mo
250.709 278.32 li
250.709 277.57 li
249.709 277.57 li
cp
252.709 278.32 mo
253.709 278.32 li
253.709 277.57 li
252.709 277.57 li
cp
255.709 278.32 mo
256.709 278.32 li
256.709 277.57 li
255.709 277.57 li
cp
258.709 278.32 mo
259.708 278.32 li
259.708 277.57 li
258.709 277.57 li
cp
261.708 278.32 mo
262.708 278.32 li
262.708 277.57 li
261.708 277.57 li
cp
264.708 278.32 mo
265.708 278.32 li
265.708 277.57 li
264.708 277.57 li
cp
267.708 278.32 mo
268.708 278.32 li
268.708 277.57 li
267.708 277.57 li
cp
270.708 278.32 mo
271.708 278.32 li
271.708 277.57 li
270.708 277.57 li
cp
273.708 278.32 mo
274.708 278.32 li
274.708 277.57 li
273.708 277.57 li
cp
276.708 278.32 mo
277.708 278.32 li
277.708 277.57 li
276.708 277.57 li
cp
279.708 278.32 mo
280.708 278.32 li
280.708 277.57 li
279.708 277.57 li
cp
282.708 278.32 mo
283.708 278.32 li
283.708 277.57 li
282.708 277.57 li
cp
285.708 278.32 mo
286.708 278.32 li
286.708 277.57 li
285.708 277.57 li
cp
288.708 278.32 mo
289.708 278.32 li
289.708 277.57 li
288.708 277.57 li
cp
291.708 278.32 mo
292.708 278.32 li
292.708 277.57 li
291.708 277.57 li
cp
294.708 278.32 mo
295.708 278.32 li
295.708 277.57 li
294.708 277.57 li
cp
297.708 278.32 mo
298.708 278.32 li
298.708 277.57 li
297.708 277.57 li
cp
300.708 278.32 mo
301.708 278.32 li
301.708 277.57 li
300.708 277.57 li
cp
303.708 278.32 mo
304.708 278.32 li
304.708 277.57 li
303.708 277.57 li
cp
306.708 278.32 mo
307.708 278.32 li
307.708 277.57 li
306.708 277.57 li
cp
309.708 278.32 mo
310.708 278.32 li
310.708 277.57 li
309.708 277.57 li
cp
312.708 278.32 mo
313.708 278.32 li
313.708 277.57 li
312.708 277.57 li
cp
315.708 278.32 mo
316.708 278.32 li
316.708 277.57 li
315.708 277.57 li
cp
318.708 278.32 mo
319.708 278.32 li
319.708 277.57 li
318.708 277.57 li
cp
321.708 278.32 mo
322.708 278.32 li
322.708 277.57 li
321.708 277.57 li
cp
324.708 278.32 mo
325.708 278.32 li
325.708 277.57 li
324.708 277.57 li
cp
327.708 278.32 mo
328.708 278.32 li
328.708 277.57 li
327.708 277.57 li
cp
330.708 278.32 mo
331.708 278.32 li
331.708 277.57 li
330.708 277.57 li
cp
333.708 278.32 mo
334.708 278.32 li
334.708 277.57 li
333.708 277.57 li
cp
336.708 278.32 mo
337.708 278.32 li
337.708 277.57 li
336.708 277.57 li
cp
339.708 278.32 mo
340.708 278.32 li
340.708 277.57 li
339.708 277.57 li
cp
342.708 278.32 mo
343.708 278.32 li
343.708 277.57 li
342.708 277.57 li
cp
345.708 278.32 mo
346.708 278.32 li
346.708 277.57 li
345.708 277.57 li
cp
348.708 278.32 mo
349.708 278.32 li
349.708 277.57 li
348.708 277.57 li
cp
351.708 278.32 mo
352.708 278.32 li
352.708 277.57 li
351.708 277.57 li
cp
354.708 278.32 mo
355.708 278.32 li
355.708 277.57 li
354.708 277.57 li
cp
357.708 278.32 mo
358.708 278.32 li
358.708 277.57 li
357.708 277.57 li
cp
360.708 278.32 mo
361.708 278.32 li
361.708 277.57 li
360.708 277.57 li
cp
363.708 278.32 mo
364.708 278.32 li
364.708 277.57 li
363.708 277.57 li
cp
366.708 278.32 mo
367.708 278.32 li
367.708 277.57 li
366.708 277.57 li
cp
369.708 278.32 mo
370.708 278.32 li
370.708 277.57 li
369.708 277.57 li
cp
372.708 278.32 mo
373.708 278.32 li
373.708 277.57 li
372.708 277.57 li
cp
375.708 278.32 mo
376.708 278.32 li
376.708 277.57 li
375.708 277.57 li
cp
378.708 278.32 mo
379.708 278.32 li
379.708 277.57 li
378.708 277.57 li
cp
381.708 278.32 mo
382.708 278.32 li
382.708 277.57 li
381.708 277.57 li
cp
384.708 278.32 mo
385.708 278.32 li
385.708 277.57 li
384.708 277.57 li
cp
387.708 278.32 mo
388.708 278.32 li
388.708 277.57 li
387.708 277.57 li
cp
390.708 278.32 mo
391.708 278.32 li
391.708 277.57 li
390.708 277.57 li
cp
393.708 278.32 mo
394.708 278.32 li
394.708 277.57 li
393.708 277.57 li
cp
396.707 278.32 mo
397.707 278.32 li
397.707 277.57 li
396.707 277.57 li
cp
399.707 278.32 mo
400.707 278.32 li
400.707 277.57 li
399.707 277.57 li
cp
402.707 278.32 mo
403.707 278.32 li
403.707 277.57 li
402.707 277.57 li
cp
405.707 278.32 mo
406.707 278.32 li
406.707 277.57 li
405.707 277.57 li
cp
408.707 278.32 mo
409.707 278.32 li
409.707 277.57 li
408.707 277.57 li
cp
411.707 278.32 mo
412.707 278.32 li
412.707 277.57 li
411.707 277.57 li
cp
414.707 278.32 mo
415.707 278.32 li
415.707 277.57 li
414.707 277.57 li
cp
417.707 278.32 mo
418.707 278.32 li
418.707 277.57 li
417.707 277.57 li
cp
420.707 278.32 mo
421.707 278.32 li
421.707 277.57 li
420.707 277.57 li
cp
423.707 278.32 mo
424.707 278.32 li
424.707 277.57 li
423.707 277.57 li
cp
426.707 278.32 mo
427.707 278.32 li
427.707 277.57 li
426.707 277.57 li
cp
429.707 278.32 mo
430.707 278.32 li
430.707 277.57 li
429.707 277.57 li
cp
432.707 278.32 mo
433.707 278.32 li
433.707 277.57 li
432.707 277.57 li
cp
435.707 278.32 mo
436.707 278.32 li
436.707 277.57 li
435.707 277.57 li
cp
438.707 278.32 mo
439.707 278.32 li
439.707 277.57 li
438.707 277.57 li
cp
441.707 278.32 mo
442.707 278.32 li
442.707 277.57 li
441.707 277.57 li
cp
444.707 278.32 mo
445.707 278.32 li
445.707 277.57 li
444.707 277.57 li
cp
447.707 278.32 mo
448.707 278.32 li
448.707 277.57 li
447.707 277.57 li
cp
450.707 278.32 mo
451.707 278.32 li
451.707 277.57 li
450.707 277.57 li
cp
453.707 278.32 mo
454.707 278.32 li
454.707 277.57 li
453.707 277.57 li
cp
456.707 278.32 mo
457.707 278.32 li
457.707 277.57 li
456.707 277.57 li
cp
459.707 278.32 mo
460.707 278.32 li
460.707 277.57 li
459.707 277.57 li
cp
462.707 278.32 mo
463.707 278.32 li
463.707 277.57 li
462.707 277.57 li
cp
465.707 278.32 mo
466.707 278.32 li
466.707 277.57 li
465.707 277.57 li
cp
468.707 278.32 mo
469.707 278.32 li
469.707 277.57 li
468.707 277.57 li
cp
471.707 278.32 mo
472.707 278.32 li
472.707 277.57 li
471.707 277.57 li
cp
474.707 278.32 mo
475.707 278.32 li
475.707 277.57 li
474.707 277.57 li
cp
477.707 278.32 mo
478.707 278.32 li
478.707 277.57 li
477.707 277.57 li
cp
480.707 278.32 mo
481.707 278.32 li
481.707 277.57 li
480.707 277.57 li
cp
483.707 278.32 mo
484.707 278.32 li
484.707 277.57 li
483.707 277.57 li
cp
486.707 278.32 mo
487.707 278.32 li
487.707 277.57 li
486.707 277.57 li
cp
489.707 278.32 mo
490.707 278.32 li
490.707 277.57 li
489.707 277.57 li
cp
492.707 278.32 mo
493.707 278.32 li
493.707 277.57 li
492.707 277.57 li
cp
495.707 278.32 mo
496.707 278.32 li
496.707 277.57 li
495.707 277.57 li
cp
498.707 278.32 mo
499.707 278.32 li
499.707 277.57 li
498.707 277.57 li
cp
501.707 278.32 mo
502.707 278.32 li
502.707 277.57 li
501.707 277.57 li
cp
504.707 278.32 mo
505.706 278.32 li
505.706 277.57 li
504.707 277.57 li
cp
507.706 278.32 mo
508.706 278.32 li
508.706 277.57 li
507.706 277.57 li
cp
510.706 278.32 mo
511.706 278.32 li
511.706 277.57 li
510.706 277.57 li
cp
513.706 278.32 mo
514.706 278.32 li
514.706 277.57 li
513.706 277.57 li
cp
516.706 278.32 mo
517.706 278.32 li
517.706 277.57 li
516.706 277.57 li
cp
519.706 278.32 mo
520.706 278.32 li
520.706 277.57 li
519.706 277.57 li
cp
522.706 278.32 mo
523.706 278.32 li
523.706 277.57 li
522.706 277.57 li
cp
525.706 278.32 mo
526.706 278.32 li
526.706 277.57 li
525.706 277.57 li
cp
528.706 278.32 mo
529.706 278.32 li
529.706 277.57 li
528.706 277.57 li
cp
531.706 278.32 mo
532.706 278.32 li
532.706 277.57 li
531.706 277.57 li
cp
534.706 278.32 mo
535.706 278.32 li
535.706 277.57 li
534.706 277.57 li
cp
537.706 278.32 mo
538.583 278.32 li
538.583 277.57 li
537.706 277.57 li
cp
.8 .8 .8 rgb
f
90.709 242.5 mo
93.709 242.5 li
93.709 241.75 li
90.709 241.75 li
cp
96.709 242.5 mo
99.709 242.5 li
99.709 241.75 li
96.709 241.75 li
cp
102.709 242.5 mo
105.709 242.5 li
105.709 241.75 li
102.709 241.75 li
cp
108.709 242.5 mo
111.709 242.5 li
111.709 241.75 li
108.709 241.75 li
cp
114.709 242.5 mo
117.709 242.5 li
117.709 241.75 li
114.709 241.75 li
cp
120.709 242.5 mo
123.709 242.5 li
123.709 241.75 li
120.709 241.75 li
cp
126.709 242.5 mo
129.709 242.5 li
129.709 241.75 li
126.709 241.75 li
cp
132.709 242.5 mo
135.709 242.5 li
135.709 241.75 li
132.709 241.75 li
cp
138.709 242.5 mo
141.709 242.5 li
141.709 241.75 li
138.709 241.75 li
cp
144.709 242.5 mo
147.709 242.5 li
147.709 241.75 li
144.709 241.75 li
cp
150.709 242.5 mo
153.709 242.5 li
153.709 241.75 li
150.709 241.75 li
cp
156.709 242.5 mo
159.709 242.5 li
159.709 241.75 li
156.709 241.75 li
cp
162.709 242.5 mo
165.709 242.5 li
165.709 241.75 li
162.709 241.75 li
cp
168.709 242.5 mo
171.709 242.5 li
171.709 241.75 li
168.709 241.75 li
cp
174.709 242.5 mo
177.709 242.5 li
177.709 241.75 li
174.709 241.75 li
cp
180.709 242.5 mo
183.709 242.5 li
183.709 241.75 li
180.709 241.75 li
cp
186.709 242.5 mo
189.709 242.5 li
189.709 241.75 li
186.709 241.75 li
cp
192.709 242.5 mo
195.709 242.5 li
195.709 241.75 li
192.709 241.75 li
cp
198.709 242.5 mo
201.709 242.5 li
201.709 241.75 li
198.709 241.75 li
cp
204.709 242.5 mo
207.709 242.5 li
207.709 241.75 li
204.709 241.75 li
cp
210.709 242.5 mo
213.709 242.5 li
213.709 241.75 li
210.709 241.75 li
cp
216.709 242.5 mo
219.709 242.5 li
219.709 241.75 li
216.709 241.75 li
cp
222.709 242.5 mo
225.709 242.5 li
225.709 241.75 li
222.709 241.75 li
cp
228.709 242.5 mo
231.709 242.5 li
231.709 241.75 li
228.709 241.75 li
cp
234.709 242.5 mo
237.709 242.5 li
237.709 241.75 li
234.709 241.75 li
cp
240.709 242.5 mo
243.709 242.5 li
243.709 241.75 li
240.709 241.75 li
cp
246.709 242.5 mo
249.709 242.5 li
249.709 241.75 li
246.709 241.75 li
cp
252.709 242.5 mo
255.709 242.5 li
255.709 241.75 li
252.709 241.75 li
cp
258.709 242.5 mo
261.709 242.5 li
261.709 241.75 li
258.709 241.75 li
cp
264.709 242.5 mo
267.709 242.5 li
267.709 241.75 li
264.709 241.75 li
cp
270.709 242.5 mo
273.709 242.5 li
273.709 241.75 li
270.709 241.75 li
cp
276.709 242.5 mo
279.709 242.5 li
279.709 241.75 li
276.709 241.75 li
cp
282.709 242.5 mo
285.709 242.5 li
285.709 241.75 li
282.709 241.75 li
cp
288.709 242.5 mo
291.709 242.5 li
291.709 241.75 li
288.709 241.75 li
cp
294.709 242.5 mo
297.709 242.5 li
297.709 241.75 li
294.709 241.75 li
cp
300.709 242.5 mo
303.709 242.5 li
303.709 241.75 li
300.709 241.75 li
cp
306.709 242.5 mo
309.709 242.5 li
309.709 241.75 li
306.709 241.75 li
cp
312.709 242.5 mo
315.709 242.5 li
315.709 241.75 li
312.709 241.75 li
cp
318.709 242.5 mo
321.709 242.5 li
321.709 241.75 li
318.709 241.75 li
cp
324.709 242.5 mo
327.709 242.5 li
327.709 241.75 li
324.709 241.75 li
cp
330.709 242.5 mo
333.709 242.5 li
333.709 241.75 li
330.709 241.75 li
cp
336.709 242.5 mo
339.709 242.5 li
339.709 241.75 li
336.709 241.75 li
cp
342.709 242.5 mo
345.709 242.5 li
345.709 241.75 li
342.709 241.75 li
cp
348.709 242.5 mo
351.709 242.5 li
351.709 241.75 li
348.709 241.75 li
cp
354.709 242.5 mo
357.709 242.5 li
357.709 241.75 li
354.709 241.75 li
cp
360.709 242.5 mo
363.709 242.5 li
363.709 241.75 li
360.709 241.75 li
cp
366.709 242.5 mo
369.709 242.5 li
369.709 241.75 li
366.709 241.75 li
cp
372.709 242.5 mo
375.709 242.5 li
375.709 241.75 li
372.709 241.75 li
cp
378.709 242.5 mo
381.709 242.5 li
381.709 241.75 li
378.709 241.75 li
cp
384.709 242.5 mo
387.709 242.5 li
387.709 241.75 li
384.709 241.75 li
cp
390.709 242.5 mo
393.709 242.5 li
393.709 241.75 li
390.709 241.75 li
cp
396.709 242.5 mo
399.709 242.5 li
399.709 241.75 li
396.709 241.75 li
cp
402.709 242.5 mo
405.709 242.5 li
405.709 241.75 li
402.709 241.75 li
cp
408.709 242.5 mo
411.709 242.5 li
411.709 241.75 li
408.709 241.75 li
cp
414.709 242.5 mo
417.709 242.5 li
417.709 241.75 li
414.709 241.75 li
cp
420.709 242.5 mo
423.709 242.5 li
423.709 241.75 li
420.709 241.75 li
cp
426.709 242.5 mo
429.709 242.5 li
429.709 241.75 li
426.709 241.75 li
cp
432.709 242.5 mo
435.709 242.5 li
435.709 241.75 li
432.709 241.75 li
cp
438.709 242.5 mo
441.709 242.5 li
441.709 241.75 li
438.709 241.75 li
cp
444.709 242.5 mo
447.709 242.5 li
447.709 241.75 li
444.709 241.75 li
cp
450.709 242.5 mo
453.709 242.5 li
453.709 241.75 li
450.709 241.75 li
cp
456.709 242.5 mo
459.709 242.5 li
459.709 241.75 li
456.709 241.75 li
cp
462.709 242.5 mo
465.709 242.5 li
465.709 241.75 li
462.709 241.75 li
cp
468.709 242.5 mo
471.709 242.5 li
471.709 241.75 li
468.709 241.75 li
cp
474.709 242.5 mo
477.709 242.5 li
477.709 241.75 li
474.709 241.75 li
cp
480.709 242.5 mo
483.709 242.5 li
483.709 241.75 li
480.709 241.75 li
cp
486.709 242.5 mo
489.709 242.5 li
489.709 241.75 li
486.709 241.75 li
cp
492.709 242.5 mo
495.709 242.5 li
495.709 241.75 li
492.709 241.75 li
cp
498.709 242.5 mo
501.709 242.5 li
501.709 241.75 li
498.709 241.75 li
cp
504.709 242.5 mo
507.709 242.5 li
507.709 241.75 li
504.709 241.75 li
cp
510.709 242.5 mo
513.709 242.5 li
513.709 241.75 li
510.709 241.75 li
cp
516.709 242.5 mo
519.709 242.5 li
519.709 241.75 li
516.709 241.75 li
cp
522.709 242.5 mo
525.709 242.5 li
525.709 241.75 li
522.709 241.75 li
cp
528.709 242.5 mo
531.709 242.5 li
531.709 241.75 li
528.709 241.75 li
cp
534.709 242.5 mo
537.709 242.5 li
537.709 241.75 li
534.709 241.75 li
cp
.4 .4 .4 rgb
f
283.03 457.044 mo
283.03 454.044 li
282.28 454.044 li
282.28 457.044 li
cp
283.03 451.044 mo
283.03 448.044 li
282.28 448.044 li
282.28 451.044 li
cp
283.03 445.044 mo
283.03 442.044 li
282.28 442.044 li
282.28 445.044 li
cp
283.03 439.044 mo
283.03 436.044 li
282.28 436.044 li
282.28 439.044 li
cp
283.03 433.044 mo
283.03 430.044 li
282.28 430.044 li
282.28 433.044 li
cp
283.03 427.044 mo
283.03 424.044 li
282.28 424.044 li
282.28 427.044 li
cp
283.03 421.044 mo
283.03 418.044 li
282.28 418.044 li
282.28 421.044 li
cp
283.03 415.044 mo
283.03 412.044 li
282.28 412.044 li
282.28 415.044 li
cp
283.03 409.044 mo
283.03 406.044 li
282.28 406.044 li
282.28 409.044 li
cp
283.03 403.044 mo
283.03 400.044 li
282.28 400.044 li
282.28 403.044 li
cp
283.03 397.044 mo
283.03 394.044 li
282.28 394.044 li
282.28 397.044 li
cp
283.03 391.044 mo
283.03 388.044 li
282.28 388.044 li
282.28 391.044 li
cp
283.03 385.044 mo
283.03 382.044 li
282.28 382.044 li
282.28 385.044 li
cp
283.03 379.044 mo
283.03 376.044 li
282.28 376.044 li
282.28 379.044 li
cp
283.03 373.044 mo
283.03 370.044 li
282.28 370.044 li
282.28 373.044 li
cp
283.03 367.044 mo
283.03 364.044 li
282.28 364.044 li
282.28 367.044 li
cp
283.03 361.044 mo
283.03 358.044 li
282.28 358.044 li
282.28 361.044 li
cp
283.03 355.044 mo
283.03 352.044 li
282.28 352.044 li
282.28 355.044 li
cp
283.03 349.044 mo
283.03 346.044 li
282.28 346.044 li
282.28 349.044 li
cp
283.03 343.044 mo
283.03 340.044 li
282.28 340.044 li
282.28 343.044 li
cp
283.03 337.044 mo
283.03 334.044 li
282.28 334.044 li
282.28 337.044 li
cp
283.03 331.044 mo
283.03 328.044 li
282.28 328.044 li
282.28 331.044 li
cp
283.03 325.044 mo
283.03 322.044 li
282.28 322.044 li
282.28 325.044 li
cp
283.03 319.045 mo
283.03 316.045 li
282.28 316.045 li
282.28 319.045 li
cp
283.03 313.045 mo
283.03 310.045 li
282.28 310.045 li
282.28 313.045 li
cp
283.03 307.045 mo
283.03 304.045 li
282.28 304.045 li
282.28 307.045 li
cp
283.03 301.045 mo
283.03 298.045 li
282.28 298.045 li
282.28 301.045 li
cp
283.03 295.045 mo
283.03 292.045 li
282.28 292.045 li
282.28 295.045 li
cp
283.03 289.045 mo
283.03 286.045 li
282.28 286.045 li
282.28 289.045 li
cp
283.03 283.045 mo
283.03 280.045 li
282.28 280.045 li
282.28 283.045 li
cp
283.03 277.045 mo
283.03 274.045 li
282.28 274.045 li
282.28 277.045 li
cp
283.03 271.045 mo
283.03 268.045 li
282.28 268.045 li
282.28 271.045 li
cp
283.03 265.045 mo
283.03 262.045 li
282.28 262.045 li
282.28 265.045 li
cp
283.03 259.045 mo
283.03 256.045 li
282.28 256.045 li
282.28 259.045 li
cp
283.03 253.045 mo
283.03 250.045 li
282.28 250.045 li
282.28 253.045 li
cp
283.03 247.045 mo
283.03 244.045 li
282.28 244.045 li
282.28 247.045 li
cp
283.03 241.045 mo
283.03 238.045 li
282.28 238.045 li
282.28 241.045 li
cp
283.03 235.045 mo
283.03 232.045 li
282.28 232.045 li
282.28 235.045 li
cp
283.03 229.045 mo
283.03 226.045 li
282.28 226.045 li
282.28 229.045 li
cp
283.03 223.045 mo
283.03 220.045 li
282.28 220.045 li
282.28 223.045 li
cp
283.03 217.045 mo
283.03 214.045 li
282.28 214.045 li
282.28 217.045 li
cp
283.03 211.045 mo
283.03 208.045 li
282.28 208.045 li
282.28 211.045 li
cp
283.03 205.045 mo
283.03 202.045 li
282.28 202.045 li
282.28 205.045 li
cp
283.03 199.045 mo
283.03 196.045 li
282.28 196.045 li
282.28 199.045 li
cp
283.03 193.045 mo
283.03 190.045 li
282.28 190.045 li
282.28 193.045 li
cp
283.03 187.045 mo
283.03 184.045 li
282.28 184.045 li
282.28 187.045 li
cp
283.03 181.045 mo
283.03 178.045 li
282.28 178.045 li
282.28 181.045 li
cp
283.03 175.045 mo
283.03 172.045 li
282.28 172.045 li
282.28 175.045 li
cp
283.03 169.045 mo
283.03 166.045 li
282.28 166.045 li
282.28 169.045 li
cp
283.03 163.045 mo
283.03 160.045 li
282.28 160.045 li
282.28 163.045 li
cp
283.03 157.045 mo
283.03 154.045 li
282.28 154.045 li
282.28 157.045 li
cp
283.03 151.045 mo
283.03 148.045 li
282.28 148.045 li
282.28 151.045 li
cp
283.03 145.045 mo
283.03 142.045 li
282.28 142.045 li
282.28 145.045 li
cp
283.03 139.045 mo
283.03 136.045 li
282.28 136.045 li
282.28 139.045 li
cp
283.03 133.045 mo
283.03 130.045 li
282.28 130.045 li
282.28 133.045 li
cp
283.03 127.045 mo
283.03 124.045 li
282.28 124.045 li
282.28 127.045 li
cp
283.03 121.045 mo
283.03 118.045 li
282.28 118.045 li
282.28 121.045 li
cp
283.03 115.045 mo
283.03 112.045 li
282.28 112.045 li
282.28 115.045 li
cp
283.03 109.045 mo
283.03 106.045 li
282.28 106.045 li
282.28 109.045 li
cp
283.03 103.045 mo
283.03 100.045 li
282.28 100.045 li
282.28 103.045 li
cp
283.03 97.0447 mo
283.03 94.0447 li
282.28 94.0447 li
282.28 97.0447 li
cp
283.03 91.0447 mo
283.03 88.0447 li
282.28 88.0447 li
282.28 91.0447 li
cp
283.03 85.0447 mo
283.03 82.0447 li
282.28 82.0447 li
282.28 85.0447 li
cp
283.03 79.0447 mo
283.03 76.0447 li
282.28 76.0447 li
282.28 79.0447 li
cp
283.03 73.0447 mo
283.03 70.0447 li
282.28 70.0447 li
282.28 73.0447 li
cp
283.03 67.0447 mo
283.03 64.0447 li
282.28 64.0447 li
282.28 67.0447 li
cp
283.03 61.0447 mo
283.03 58.0447 li
282.28 58.0447 li
282.28 61.0447 li
cp
283.03 55.0447 mo
283.03 52.0447 li
282.28 52.0447 li
282.28 55.0447 li
cp
283.03 49.0447 mo
283.03 46.0447 li
282.28 46.0447 li
282.28 49.0447 li
cp
283.03 43.0447 mo
283.03 40.0447 li
282.28 40.0447 li
282.28 43.0447 li
cp
283.03 37.0447 mo
283.03 34.0447 li
282.28 34.0447 li
282.28 37.0447 li
cp
283.03 31.0447 mo
283.03 28.0447 li
282.28 28.0447 li
282.28 31.0447 li
cp
f
294.803 119.702 mo
396.851 119.702 li
396.851 43.5279 li
294.803 43.5279 li
294.803 119.702 li
1 1 1 rgb
ef
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
%%IncludeResource: font Helvetica-Bold
/JWLNMY+Helvetica-Bold /Helvetica-Bold findfont ct_VMDictPut/JWLNMY+Helvetica-Bold*1 [32{/.notdef}rp /space 16{/.notdef}rp /one 15{/.notdef}rp /A 10{/.notdef}rp /L 6{/.notdef}rp /S /T 171{/.notdef}rp]JWLNMY+Helvetica-Bold nfJWLNMY+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf296.782 57.0742 mo(ATLAS A1)[7.55664 6.3916 6.3916 7.55566 6.97949 2.90723 7.55566 0 ]xshgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
%%IncludeResource: font Helvetica-Bold
/JWLNMY+Helvetica-Bold*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 8{/.notdef}rp /period 2{/.notdef}rp /one 3{/.notdef}rp /five 3{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C 8{/.notdef}rp /L 6{/.notdef}rp /S /T 171{/.notdef}rp]JWLNMY+Helvetica-Bold nfJWLNMY+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf319.611 76.0981 mo(  95% C)sh356.831 76.0981 mo(.L. )shgrestore
316.487 78.7593 mo
298.63 78.7593 li
298.63 65.4283 li
316.487 65.4283 li
316.487 78.7593 li
.898039 .898039 1 rgb
f
298.63 65.8032 mo
316.487 65.8032 li
316.487 65.0532 li
298.63 65.0532 li
.6 .6 .6 rgb
f
298.63 79.1343 mo
316.487 79.1343 li
316.487 78.3843 li
298.63 78.3843 li
f
316.862 78.7593 mo
316.862 65.4282 li
316.112 65.4282 li
316.112 78.7593 li
f
299.005 78.7593 mo
299.005 65.4282 li
298.255 65.4282 li
298.255 78.7593 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
%%IncludeResource: font Helvetica-Bold
/JWLNMY+Helvetica-Bold*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 8{/.notdef}rp /period 2{/.notdef}rp /one 3{/.notdef}rp /five /six /.notdef /eight /nine 7{/.notdef}rp /A /.notdef /C 8{/.notdef}rp /L 6{/.notdef}rp /S /T 171{/.notdef}rp]JWLNMY+Helvetica-Bold nfJWLNMY+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf319.611 95.123 mo(  68% C)sh356.831 95.123 mo(.L.)shgrestore
316.487 97.8023 mo
298.63 97.8023 li
298.63 84.4721 li
316.487 84.4721 li
316.487 97.8023 li
.498039 .498039 1 rgb
f
298.63 84.8472 mo
316.487 84.8472 li
316.487 84.0972 li
298.63 84.0972 li
.6 .6 .6 rgb
f
298.63 98.1772 mo
316.487 98.1772 li
316.487 97.4272 li
298.63 97.4272 li
f
316.862 97.8022 mo
316.862 84.4722 li
316.112 84.4722 li
316.112 97.8022 li
f
299.005 97.8022 mo
299.005 84.4722 li
298.255 84.4722 li
298.255 97.8022 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
%%IncludeResource: font Helvetica-Bold
/JWLNMY+Helvetica-Bold*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 8{/.notdef}rp /period 2{/.notdef}rp /one 3{/.notdef}rp /five /six /.notdef /eight /nine 7{/.notdef}rp /A /B /C 2{/.notdef}rp /F 5{/.notdef}rp /L 6{/.notdef}rp /S /T 16{/.notdef}rp /e 3{/.notdef}rp /i 9{/.notdef}rp /s /t 139{/.notdef}rp]JWLNMY+Helvetica-Bold nfJWLNMY+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf319.611 114.147 mo( Best Fit)[2.90723 7.55664 5.81934 5.81934 3.48438 2.90625 6.3916 2.90723 0 ]xshgrestore
304.135 113.605 mo
310.983 113.605 li
307.56 106.756 li
304.135 113.605 li
cp
0 0 0 rgb
f
402.521 119.702 mo
510.237 119.702 li
510.237 43.5279 li
402.521 43.5279 li
402.521 119.702 li
1 1 1 rgb
ef
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
%%IncludeResource: font Helvetica-Bold
/JWLNMY+Helvetica-Bold*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 8{/.notdef}rp /period 2{/.notdef}rp /one 3{/.notdef}rp /five /six /.notdef /eight /nine 7{/.notdef}rp /A /B /C 2{/.notdef}rp /F 5{/.notdef}rp /L /M 2{/.notdef}rp /P 2{/.notdef}rp /S /T 16{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l 5{/.notdef}rp /r /s /t 139{/.notdef}rp]JWLNMY+Helvetica-Bold nfJWLNMY+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf404.27 57.0742 mo(CMS Prel. C1)[7.55664 8.71582 6.97949 2.90723 6.97852 4.07227 5.81934 2.90723 2.90625 2.90723 7.55664 0 ]xshgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
JWLNMY+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf429.002 76.0981 mo(  95% C)sh466.222 76.0981 mo(.L. )shgrestore
425.409 78.7593 mo
406.56 78.7593 li
406.56 65.4283 li
425.409 65.4283 li
425.409 78.7593 li
.898039 1 .898039 rgb
f
406.56 65.8032 mo
425.409 65.8032 li
425.409 65.0532 li
406.56 65.0532 li
.6 .6 .6 rgb
f
406.56 79.1343 mo
425.409 79.1343 li
425.409 78.3843 li
406.56 78.3843 li
f
425.784 78.7593 mo
425.784 65.4282 li
425.034 65.4282 li
425.034 78.7593 li
f
406.935 78.7593 mo
406.935 65.4282 li
406.185 65.4282 li
406.185 78.7593 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
JWLNMY+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf429.002 95.123 mo(  68% C)sh466.222 95.123 mo(.L.)shgrestore
425.409 97.8023 mo
406.56 97.8023 li
406.56 84.4721 li
425.409 84.4721 li
425.409 97.8023 li
.498039 1 .498039 rgb
f
406.56 84.8472 mo
425.409 84.8472 li
425.409 84.0972 li
406.56 84.0972 li
.6 .6 .6 rgb
f
406.56 98.1772 mo
425.409 98.1772 li
425.409 97.4272 li
406.56 97.4272 li
f
425.784 97.8022 mo
425.784 84.4722 li
425.034 84.4722 li
425.034 97.8022 li
f
406.935 97.8022 mo
406.935 84.4722 li
406.185 84.4722 li
406.185 97.8022 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
JWLNMY+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf429.002 114.147 mo( Best Fit )[2.90723 7.55664 5.81934 5.81934 3.48438 2.90625 6.3916 2.90723 3.48438 0 ]xshgrestore
415.983 113.605 mo
419.409 106.756 li
412.56 106.756 li
415.983 113.605 li
cp
0 0 0 rgb
f
402.521 141.466 mo
532.914 141.466 li
532.914 119.702 li
402.521 119.702 li
402.521 141.466 li
cp
1 1 1 rgb
ef
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
%%IncludeResource: font Helvetica-Bold
/JWLNMY+Helvetica-Bold*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 8{/.notdef}rp /period 2{/.notdef}rp /one 3{/.notdef}rp /five /six /.notdef /eight /nine 7{/.notdef}rp /A /B /C 2{/.notdef}rp /F 5{/.notdef}rp /L /M 2{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s /t 139{/.notdef}rp]JWLNMY+Helvetica-Bold nfJWLNMY+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf434.709 135.074 mo( Stand. Model)[2.90723 6.97852 3.48438 5.81934 6.3916 6.3916 2.90723 2.90723 8.71582 6.3916 6.3916 5.81934 0 ]xshgrestore
417.297 132.106 mo
416.922 132.106 li
416.922 135.525 li
420.716 135.525 li
420.716 132.481 li
423.76 132.481 li
423.76 128.687 li
420.716 128.687 li
420.716 125.643 li
416.922 125.643 li
416.922 128.687 li
413.878 128.687 li
413.878 132.481 li
417.297 132.481 li
417.297 132.106 li
416.922 132.106 li
417.297 132.106 li
417.297 131.731 li
414.628 131.731 li
414.628 129.437 li
417.672 129.437 li
417.672 126.393 li
419.966 126.393 li
419.966 129.437 li
423.01 129.437 li
423.01 131.731 li
419.966 131.731 li
419.966 134.775 li
417.672 134.775 li
417.672 131.731 li
417.297 131.731 li
417.297 132.106 li
cp
1 0 0 rgb
f
158.74 119.702 mo
272.126 119.702 li
272.126 43.5279 li
158.74 43.5279 li
158.74 119.702 li
1 1 1 rgb
ef
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
%%IncludeResource: font Helvetica-Bold
/JWLNMY+Helvetica-Bold*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 8{/.notdef}rp /period 2{/.notdef}rp /one 3{/.notdef}rp /five /six /.notdef /eight /nine 7{/.notdef}rp /A /B /C 2{/.notdef}rp /F 5{/.notdef}rp /L /M 2{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s /t /.notdef /v 137{/.notdef}rp]JWLNMY+Helvetica-Bold nfJWLNMY+Helvetica-Bold*1 [11.4147 0 0 -11.4147 0 0 ]msf160.757 57.0742 mo(Teva)sh186.774 57.0742 mo(tron T1)[3.80127 4.44189 6.97266 6.97266 3.17139 6.97217 0 ]xshgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
JWLNMY+Helvetica-Bold*1 [11.4147 0 0 -11.4147 0 0 ]msf186.44 76.0981 mo(  95)sh205.479 76.0981 mo(% C.L. )shgrestore
gsave
182.835 78.7593 mo
162.992 78.7593 li
162.992 65.4283 li
182.835 65.4283 li
182.835 78.7593 li
clp
162.992 65.4283 mo
182.835 65.4283 li
182.835 78.7593 li
162.992 78.7593 li
cp
1 1 .898039 rgb
f
grestore
162.992 65.8032 mo
182.835 65.8032 li
182.835 65.0532 li
162.992 65.0532 li
.6 .6 .6 rgb
f
162.992 79.1343 mo
182.835 79.1343 li
182.835 78.3843 li
162.992 78.3843 li
f
183.21 78.7593 mo
183.21 65.4282 li
182.46 65.4282 li
182.46 78.7593 li
f
163.367 78.7593 mo
163.367 65.4282 li
162.617 65.4282 li
162.617 78.7593 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
JWLNMY+Helvetica-Bold*1 [11.4147 0 0 -11.4147 0 0 ]msf186.44 95.123 mo(  68)sh205.479 95.123 mo(% C.L.)shgrestore
182.835 97.8023 mo
162.992 97.8023 li
162.992 84.4721 li
182.835 84.4721 li
182.835 97.8023 li
1 1 .498039 rgb
f
162.992 84.8472 mo
182.835 84.8472 li
182.835 84.0972 li
162.992 84.0972 li
.6 .6 .6 rgb
f
162.992 98.1772 mo
182.835 98.1772 li
182.835 97.4272 li
162.992 97.4272 li
f
183.21 97.8022 mo
183.21 84.4722 li
182.46 84.4722 li
182.46 97.8022 li
f
163.367 97.8022 mo
163.367 84.4722 li
162.617 84.4722 li
162.617 97.8022 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
%%IncludeResource: font Helvetica-Bold
/JWLNMY+Helvetica-Bold*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 8{/.notdef}rp /period 2{/.notdef}rp /one 3{/.notdef}rp /five /six /.notdef /eight /nine 7{/.notdef}rp /A /B /C 2{/.notdef}rp /F 5{/.notdef}rp /L /M 2{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s /t /.notdef /v 137{/.notdef}rp]JWLNMY+Helvetica-Bold nfJWLNMY+Helvetica-Bold*1 [11.4147 0 0 -11.4147 0 0 ]msf186.44 114.147 mo( Loc. M)sh225.756 114.147 mo(in.)shgrestore
172.913 105.615 mo
173.938 108.769 li
177.256 108.769 li
174.572 110.719 li
175.597 113.874 li
172.913 111.924 li
170.23 113.874 li
171.255 110.719 li
168.571 108.769 li
171.888 108.769 li
172.913 105.615 li
cp
0 0 0 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/JWLNMY+Helvetica-Bold*1 uf/JWLNMW+Helvetica*1 uf/JWLNMX+Symbol*1 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
