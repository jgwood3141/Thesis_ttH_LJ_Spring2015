%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: GGammaContourPDG.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 12/16/13
%%BoundingBox: 0 0 567 545
%%HiResBoundingBox: 0 0 566.9287 544.1001
%%CropBox: 0 0 566.9287 544.1001
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: font Symbol
%%+ font Helvetica-Bold
%%+ font Helvetica
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: Symbol
%%+ Helvetica-Bold
%%+ Helvetica
%%DocumentNeededFonts: Symbol
%%+ Helvetica-Bold
%%+ Helvetica
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2013-12-16T16:40:20-08:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>248</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA+AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqtd+KuV+J1Xlw&#xA;HXvTpU70xV5j5J/Oa78x+Y7LRp9Ht4DdxlpJLO/a8e1kWOSQxXUZtrf0mX0uLAtUMyim+Ksl1vUN&#xA;bsPPGmS+pO3lo6VqEuoQQ2zTKs9vJbGJy0avIXdJHCIOvE0BxVJPI2oeep/POrx62bg6eReEW7wt&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2013-12-16T16:40:21-08:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-12-16T16:40:21-08:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Keywords>ROOT</pdf:Keywords>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">GGammaContourPDG.pdf</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>7.416667</stDim:w>
            <stDim:h>6.958333</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>8.0d3e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica-Bold</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Bold</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>8.0d3e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Medium</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.007</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbo; Symbol Bitmapped Fonts</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:05801174072068118C14A5F004D5F715</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:05801174072068118C14A5F004D5F715</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:05801174072068118C14A5F004D5F715</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:05801174072068118C14A5F004D5F715</stEvt:instanceID>
                  <stEvt:when>2013-12-16T16:40:21-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -544.1 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 544.1 li
566.929 544.1 li
566.929 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
90.709 457.044 mo
538.583 457.044 li
538.583 27.2051 li
90.709 27.2051 li
90.709 457.044 li
ef
90.709 457.044 mo
90.709 457.419 li
538.958 457.419 li
538.958 26.8301 li
90.334 26.8301 li
90.334 457.419 li
90.709 457.419 li
90.709 457.044 li
91.084 457.044 li
91.084 27.5801 li
538.208 27.5801 li
538.208 456.669 li
90.709 456.669 li
90.709 457.044 li
91.084 457.044 li
90.709 457.044 li
cp
0 0 0 rgb
f
90.709 457.044 mo
538.583 457.044 li
538.583 27.2051 li
90.709 27.2051 li
90.709 457.044 li
1 1 1 rgb
ef
90.709 457.044 mo
90.709 457.419 li
538.958 457.419 li
538.958 26.8301 li
90.334 26.8301 li
90.334 457.419 li
90.709 457.419 li
90.709 457.044 li
91.084 457.044 li
91.084 27.5801 li
538.208 27.5801 li
538.208 456.669 li
90.709 456.669 li
90.709 457.044 li
91.084 457.044 li
90.709 457.044 li
cp
0 0 0 rgb
f
90.709 457.419 mo
538.583 457.419 li
538.583 456.669 li
90.709 456.669 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Symbol
/JWLNMT+Symbol /Symbol findfont ct_VMDictPut/JWLNMT+Symbol*1 [103{/.notdef}rp /gamma 152{/.notdef}rp]JWLNMT+Symbol nfJWLNMT+Symbol*1 [17.122 0 0 -17.122 0 0 ]msf529.831 508.905 mo(g)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Symbol
/JWLNMT+Symbol*1 [103{/.notdef}rp /gamma 3{/.notdef}rp /kappa 148{/.notdef}rp]JWLNMT+Symbol nfJWLNMT+Symbol*1 [25.683 0 0 -25.683 0 0 ]msf514.612 503.198 mo(k)shgrestore
120.192 444.149 mo
120.192 457.044 li
120.942 457.044 li
120.942 444.149 li
f
135.121 450.596 mo
135.121 457.044 li
135.871 457.044 li
135.871 450.596 li
f
150.05 450.596 mo
150.05 457.044 li
150.8 457.044 li
150.8 450.596 li
f
164.979 450.596 mo
164.979 457.044 li
165.729 457.044 li
165.729 450.596 li
f
179.908 444.149 mo
179.908 457.044 li
180.658 457.044 li
180.658 444.149 li
f
194.838 450.596 mo
194.838 457.044 li
195.588 457.044 li
195.588 450.596 li
f
209.767 450.596 mo
209.767 457.044 li
210.517 457.044 li
210.517 450.596 li
f
224.696 450.596 mo
224.696 457.044 li
225.446 457.044 li
225.446 450.596 li
f
239.625 444.149 mo
239.625 457.044 li
240.375 457.044 li
240.375 444.149 li
f
254.554 450.596 mo
254.554 457.044 li
255.304 457.044 li
255.304 450.596 li
f
269.483 450.596 mo
269.483 457.044 li
270.233 457.044 li
270.233 450.596 li
f
284.412 450.596 mo
284.412 457.044 li
285.162 457.044 li
285.162 450.596 li
f
299.342 444.149 mo
299.342 457.044 li
300.092 457.044 li
300.092 444.149 li
f
314.271 450.596 mo
314.271 457.044 li
315.021 457.044 li
315.021 450.596 li
f
329.2 450.596 mo
329.2 457.044 li
329.95 457.044 li
329.95 450.596 li
f
344.129 450.596 mo
344.129 457.044 li
344.879 457.044 li
344.879 450.596 li
f
359.058 444.149 mo
359.058 457.044 li
359.808 457.044 li
359.808 444.149 li
f
373.987 450.596 mo
373.987 457.044 li
374.737 457.044 li
374.737 450.596 li
f
388.916 450.596 mo
388.916 457.044 li
389.666 457.044 li
389.666 450.596 li
f
403.845 450.596 mo
403.845 457.044 li
404.595 457.044 li
404.595 450.596 li
f
418.774 444.149 mo
418.774 457.044 li
419.524 457.044 li
419.524 444.149 li
f
433.704 450.596 mo
433.704 457.044 li
434.454 457.044 li
434.454 450.596 li
f
448.633 450.596 mo
448.633 457.044 li
449.383 457.044 li
449.383 450.596 li
f
463.562 450.596 mo
463.562 457.044 li
464.312 457.044 li
464.312 450.596 li
f
478.491 444.149 mo
478.491 457.044 li
479.241 457.044 li
479.241 444.149 li
f
493.42 450.596 mo
493.42 457.044 li
494.17 457.044 li
494.17 450.596 li
f
508.349 450.596 mo
508.349 457.044 li
509.099 457.044 li
509.099 450.596 li
f
523.278 450.596 mo
523.278 457.044 li
524.028 457.044 li
524.028 450.596 li
f
538.208 444.149 mo
538.208 457.044 li
538.958 457.044 li
538.958 444.149 li
f
120.192 444.149 mo
120.192 457.044 li
120.942 457.044 li
120.942 444.149 li
f
105.263 450.596 mo
105.263 457.044 li
106.013 457.044 li
106.013 450.596 li
f
90.334 450.596 mo
90.334 457.044 li
91.084 457.044 li
91.084 450.596 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMU+Helvetica /Helvetica findfont ct_VMDictPut/JWLNMU+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero 3{/.notdef}rp /four 203{/.notdef}rp]JWLNMU+Helvetica nfJWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf107.488 479.417 mo(0.4)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMU+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero 3{/.notdef}rp /four /.notdef /six 201{/.notdef}rp]JWLNMU+Helvetica nfJWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf167.415 479.417 mo(0.6)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMU+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero 3{/.notdef}rp /four /.notdef /six /.notdef /eight 199{/.notdef}rp]JWLNMU+Helvetica nfJWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf227.342 479.417 mo(0.8)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMU+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one 2{/.notdef}rp /four /.notdef /six /.notdef /eight 199{/.notdef}rp]JWLNMU+Helvetica nfJWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf295.83 479.417 mo(1)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMU+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]JWLNMU+Helvetica nfJWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf346.245 479.417 mo(1.2)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf406.172 479.417 mo(1.4)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf466.099 479.417 mo(1.6)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf526.027 479.417 mo(1.8)shgrestore
90.709 27.5801 mo
538.583 27.5801 li
538.583 26.8301 li
90.709 26.8301 li
f
120.942 40.1001 mo
120.942 27.2051 li
120.192 27.2051 li
120.192 40.1001 li
f
135.871 33.6533 mo
135.871 27.2051 li
135.121 27.2051 li
135.121 33.6533 li
f
150.8 33.6533 mo
150.8 27.2051 li
150.05 27.2051 li
150.05 33.6533 li
f
165.729 33.6533 mo
165.729 27.2051 li
164.979 27.2051 li
164.979 33.6533 li
f
180.658 40.1001 mo
180.658 27.2051 li
179.908 27.2051 li
179.908 40.1001 li
f
195.588 33.6533 mo
195.588 27.2051 li
194.838 27.2051 li
194.838 33.6533 li
f
210.517 33.6533 mo
210.517 27.2051 li
209.767 27.2051 li
209.767 33.6533 li
f
225.446 33.6533 mo
225.446 27.2051 li
224.696 27.2051 li
224.696 33.6533 li
f
240.375 40.1001 mo
240.375 27.2051 li
239.625 27.2051 li
239.625 40.1001 li
f
255.304 33.6533 mo
255.304 27.2051 li
254.554 27.2051 li
254.554 33.6533 li
f
270.233 33.6533 mo
270.233 27.2051 li
269.483 27.2051 li
269.483 33.6533 li
f
285.162 33.6533 mo
285.162 27.2051 li
284.412 27.2051 li
284.412 33.6533 li
f
300.092 40.1001 mo
300.092 27.2051 li
299.342 27.2051 li
299.342 40.1001 li
f
315.021 33.6533 mo
315.021 27.2051 li
314.271 27.2051 li
314.271 33.6533 li
f
329.95 33.6533 mo
329.95 27.2051 li
329.2 27.2051 li
329.2 33.6533 li
f
344.879 33.6533 mo
344.879 27.2051 li
344.129 27.2051 li
344.129 33.6533 li
f
359.808 40.1001 mo
359.808 27.2051 li
359.058 27.2051 li
359.058 40.1001 li
f
374.737 33.6533 mo
374.737 27.2051 li
373.987 27.2051 li
373.987 33.6533 li
f
389.666 33.6533 mo
389.666 27.2051 li
388.916 27.2051 li
388.916 33.6533 li
f
404.595 33.6533 mo
404.595 27.2051 li
403.845 27.2051 li
403.845 33.6533 li
f
419.524 40.1001 mo
419.524 27.2051 li
418.774 27.2051 li
418.774 40.1001 li
f
434.454 33.6533 mo
434.454 27.2051 li
433.704 27.2051 li
433.704 33.6533 li
f
449.383 33.6533 mo
449.383 27.2051 li
448.633 27.2051 li
448.633 33.6533 li
f
464.312 33.6533 mo
464.312 27.2051 li
463.562 27.2051 li
463.562 33.6533 li
f
479.241 40.1001 mo
479.241 27.2051 li
478.491 27.2051 li
478.491 40.1001 li
f
494.17 33.6533 mo
494.17 27.2051 li
493.42 27.2051 li
493.42 33.6533 li
f
509.099 33.6533 mo
509.099 27.2051 li
508.349 27.2051 li
508.349 33.6533 li
f
524.028 33.6533 mo
524.028 27.2051 li
523.278 27.2051 li
523.278 33.6533 li
f
538.958 40.1001 mo
538.958 27.2051 li
538.208 27.2051 li
538.208 40.1001 li
f
120.942 40.1001 mo
120.942 27.2051 li
120.192 27.2051 li
120.192 40.1001 li
f
106.013 33.6533 mo
106.013 27.2051 li
105.263 27.2051 li
105.263 33.6533 li
f
91.084 33.6533 mo
91.084 27.2051 li
90.334 27.2051 li
90.334 33.6533 li
f
91.084 457.044 mo
91.084 27.2051 li
90.334 27.2051 li
90.334 457.044 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica
/JWLNMU+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 46{/.notdef}rp /g 152{/.notdef}rp]JWLNMU+Helvetica nfJWLNMU+Helvetica*1 [-1.04843e-15 -17.122 -17.122 1.04842e-15 0 0 ]msf44.708 35.1948 mo(g)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMT+Symbol*1 [-1.57264e-15 -25.683 -25.683 1.57263e-15 0 0 ]msf39 50.415 mo(k)shgrestore
104.145 417.593 mo
90.709 417.593 li
90.709 418.343 li
104.145 418.343 li
f
97.4268 398.055 mo
90.709 398.055 li
90.709 398.805 li
97.4268 398.805 li
f
97.4268 378.517 mo
90.709 378.517 li
90.709 379.267 li
97.4268 379.267 li
f
97.4268 358.978 mo
90.709 358.978 li
90.709 359.728 li
97.4268 359.728 li
f
104.145 339.44 mo
90.709 339.44 li
90.709 340.19 li
104.145 340.19 li
f
97.4268 319.902 mo
90.709 319.902 li
90.709 320.652 li
97.4268 320.652 li
f
97.4268 300.364 mo
90.709 300.364 li
90.709 301.114 li
97.4268 301.114 li
f
97.4268 280.826 mo
90.709 280.826 li
90.709 281.576 li
97.4268 281.576 li
f
104.145 261.288 mo
90.709 261.288 li
90.709 262.038 li
104.145 262.038 li
f
97.4268 241.75 mo
90.709 241.75 li
90.709 242.5 li
97.4268 242.5 li
f
97.4268 222.211 mo
90.709 222.211 li
90.709 222.961 li
97.4268 222.961 li
f
97.4268 202.673 mo
90.709 202.673 li
90.709 203.423 li
97.4268 203.423 li
f
104.145 183.135 mo
90.709 183.135 li
90.709 183.885 li
104.145 183.885 li
f
97.4268 163.597 mo
90.709 163.597 li
90.709 164.347 li
97.4268 164.347 li
f
97.4268 144.059 mo
90.709 144.059 li
90.709 144.809 li
97.4268 144.809 li
f
97.4268 124.521 mo
90.709 124.521 li
90.709 125.271 li
97.4268 125.271 li
f
104.145 104.983 mo
90.709 104.983 li
90.709 105.733 li
104.145 105.733 li
f
97.4268 85.4453 mo
90.709 85.4453 li
90.709 86.1953 li
97.4268 86.1953 li
f
97.4268 65.9063 mo
90.709 65.9063 li
90.709 66.6563 li
97.4268 66.6563 li
f
97.4268 46.3682 mo
90.709 46.3682 li
90.709 47.1182 li
97.4268 47.1182 li
f
104.145 26.8301 mo
90.709 26.8301 li
90.709 27.5801 li
104.145 27.5801 li
f
104.145 417.593 mo
90.709 417.593 li
90.709 418.343 li
104.145 418.343 li
f
97.4268 437.131 mo
90.709 437.131 li
90.709 437.881 li
97.4268 437.881 li
f
97.4268 456.669 mo
90.709 456.669 li
90.709 457.419 li
97.4268 457.419 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf58.0244 424.247 mo(0.6)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf58.0244 346.247 mo(0.8)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf75.1465 268.245 mo(1)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf58.0244 189.294 mo(1.2)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf58.0244 111.293 mo(1.4)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
JWLNMU+Helvetica*1 [17.122 0 0 -17.122 0 0 ]msf58.0244 33.293 mo(1.6)shgrestore
538.958 457.044 mo
538.958 27.2051 li
538.208 27.2051 li
538.208 457.044 li
f
525.146 418.343 mo
538.583 418.343 li
538.583 417.593 li
525.146 417.593 li
f
531.865 398.805 mo
538.583 398.805 li
538.583 398.055 li
531.865 398.055 li
f
531.865 379.267 mo
538.583 379.267 li
538.583 378.517 li
531.865 378.517 li
f
531.865 359.728 mo
538.583 359.728 li
538.583 358.978 li
531.865 358.978 li
f
525.146 340.19 mo
538.583 340.19 li
538.583 339.44 li
525.146 339.44 li
f
531.865 320.652 mo
538.583 320.652 li
538.583 319.902 li
531.865 319.902 li
f
531.865 301.114 mo
538.583 301.114 li
538.583 300.364 li
531.865 300.364 li
f
531.865 281.576 mo
538.583 281.576 li
538.583 280.826 li
531.865 280.826 li
f
525.146 262.038 mo
538.583 262.038 li
538.583 261.288 li
525.146 261.288 li
f
531.865 242.5 mo
538.583 242.5 li
538.583 241.75 li
531.865 241.75 li
f
531.865 222.961 mo
538.583 222.961 li
538.583 222.211 li
531.865 222.211 li
f
531.865 203.423 mo
538.583 203.423 li
538.583 202.673 li
531.865 202.673 li
f
525.146 183.885 mo
538.583 183.885 li
538.583 183.135 li
525.146 183.135 li
f
531.865 164.347 mo
538.583 164.347 li
538.583 163.597 li
531.865 163.597 li
f
531.865 144.809 mo
538.583 144.809 li
538.583 144.059 li
531.865 144.059 li
f
531.865 125.271 mo
538.583 125.271 li
538.583 124.521 li
531.865 124.521 li
f
525.146 105.733 mo
538.583 105.733 li
538.583 104.983 li
525.146 104.983 li
f
531.865 86.1953 mo
538.583 86.1953 li
538.583 85.4453 li
531.865 85.4453 li
f
531.865 66.6563 mo
538.583 66.6563 li
538.583 65.9063 li
531.865 65.9063 li
f
531.865 47.1182 mo
538.583 47.1182 li
538.583 46.3682 li
531.865 46.3682 li
f
525.146 27.5801 mo
538.583 27.5801 li
538.583 26.8301 li
525.146 26.8301 li
f
525.146 418.343 mo
538.583 418.343 li
538.583 417.593 li
525.146 417.593 li
f
531.865 437.881 mo
538.583 437.881 li
538.583 437.131 li
531.865 437.131 li
f
531.865 457.419 mo
538.583 457.419 li
538.583 456.669 li
531.865 456.669 li
f
428.106 363.566 mo
419.149 363.061 li
415.062 362.488 li
414.418 359.353 li
412.619 351.538 li
409.923 343.723 li
408.699 341.16 li
406.108 335.908 li
402.19 328.092 li
399.742 323.253 li
398.181 320.277 li
397.892 319.822 li
401.235 320.096 li
410.192 319.203 li
419.149 315.059 li
422.157 312.462 li
427.882 300.739 li
428.106 294.502 li
428.244 289.016 li
428.106 288.307 li
425.958 277.293 li
422.121 265.57 li
419.149 258.499 li
417.151 253.847 li
411.217 242.125 li
410.192 240.604 li
403.942 230.402 li
401.235 225.567 li
396.674 218.679 li
392.276 212.41 li
388.25 206.956 li
383.319 200.583 li
378.903 195.233 li
374.362 189.934 li
367.077 183.51 li
365.405 181.839 li
356.446 171.952 li
356.235 171.787 li
347.49 165.196 li
339.183 160.064 li
338.532 159.672 li
329.575 156.459 li
320.617 155.813 li
311.66 159.121 li
310.64 160.064 li
302.702 170.476 li
302.062 171.787 li
299.22 183.51 li
298.099 195.233 li
298.021 206.956 li
299.612 218.679 li
302.251 230.402 li
302.687 231.759 li
301.209 231.062 li
292.252 227.495 li
289.09 226.494 li
283.294 224.718 li
274.337 222.702 li
269.672 222.028 li
268.802 218.679 li
266.872 207.946 li
266.703 206.956 li
264.96 195.233 li
264.002 183.51 li
263.761 171.787 li
264.322 160.064 li
265.411 148.342 li
266.872 141.421 li
268.07 136.619 li
271.045 124.896 li
275.83 113.343 li
275.93 113.173 li
284.7 101.45 li
284.787 101.354 li
293.745 95.5342 li
302.702 95.101 li
311.66 94.2119 li
320.617 98.2271 li
328.776 101.45 li
329.575 101.723 li
338.532 108.755 li
344.583 113.173 li
347.49 113.757 li
356.446 123.243 li
358.069 124.896 li
365.405 132.325 li
368.832 136.619 li
374.362 142.791 li
379.712 148.342 li
383.319 153.088 li
389.062 160.064 li
392.276 163.542 li
398.017 171.787 li
401.235 175.962 li
407.522 183.51 li
410.192 187.591 li
413.864 195.233 li
419.149 202.028 li
424.122 206.956 li
428.106 213.628 li
431.388 218.679 li
437.065 227.691 li
438.75 230.402 li
446.022 241.261 li
446.545 242.125 li
452.554 253.847 li
454.979 258.309 li
459.287 265.57 li
463.936 275.265 li
464.913 277.293 li
469.717 289.016 li
472.895 298.323 li
473.728 300.739 li
476.436 312.462 li
477.567 324.185 li
475.675 335.908 li
472.895 343.239 li
470.586 347.631 li
463.936 353.651 li
455.341 359.353 li
454.979 359.502 li
446.022 361.573 li
437.065 363.263 li
428.106 363.566 li
.898039 .898039 1 rgb
f
401.235 320.096 mo
397.892 319.822 li
393.214 312.462 li
390.784 308.891 li
387.772 304.647 li
381.938 296.831 li
381.827 296.692 li
375.436 289.016 li
372.869 286.049 li
368.456 281.201 li
363.912 276.385 li
360.916 273.386 li
354.954 267.608 li
352.71 265.57 li
345.997 259.688 li
343.635 257.755 li
337.039 252.784 li
333.173 249.94 li
328.082 246.082 li
321.967 242.125 li
319.124 240.334 li
310.167 235.313 li
308.097 234.309 li
302.687 231.759 li
302.251 230.402 li
299.612 218.679 li
298.021 206.956 li
298.099 195.233 li
299.22 183.51 li
302.062 171.787 li
302.702 170.476 li
310.64 160.064 li
311.66 159.121 li
320.617 155.813 li
329.575 156.459 li
338.532 159.672 li
339.183 160.064 li
347.49 165.196 li
356.235 171.787 li
356.446 171.952 li
365.405 181.839 li
367.077 183.51 li
374.362 189.934 li
378.903 195.233 li
383.319 200.583 li
388.25 206.956 li
392.276 212.41 li
396.674 218.679 li
401.235 225.567 li
403.942 230.402 li
410.192 240.604 li
411.217 242.125 li
417.151 253.847 li
419.149 258.499 li
422.121 265.57 li
425.958 277.293 li
428.106 288.307 li
428.244 289.016 li
428.106 294.502 li
427.882 300.739 li
422.157 312.462 li
419.149 315.059 li
410.192 319.203 li
401.235 320.096 li
.447059 .447059 1 rgb
f
337.039 426.456 mo
328.082 426.206 li
319.124 425.581 li
310.167 424.615 li
301.209 423.337 li
292.84 421.876 li
292.252 421.766 li
283.294 419.814 li
274.337 417.615 li
265.38 415.188 li
261.567 414.06 li
256.422 412.432 li
247.465 409.387 li
238.738 406.245 li
238.507 406.155 li
229.55 402.478 li
220.592 398.634 li
220.132 398.43 li
211.635 394.3 li
204.295 390.614 li
202.677 389.717 li
193.72 384.623 li
190.583 382.799 li
184.762 379.001 li
178.703 374.984 li
175.805 372.79 li
168.463 367.169 li
166.847 365.725 li
159.749 359.353 li
157.89 357.333 li
152.549 351.538 li
148.932 346.599 li
146.814 343.723 li
142.54 335.908 li
139.975 328.814 li
139.71 328.092 li
138.233 320.277 li
138.11 312.462 li
139.287 304.647 li
139.975 302.413 li
141.644 296.831 li
145.153 289.016 li
148.932 282.61 li
149.754 281.201 li
155.392 273.386 li
157.89 270.463 li
162.079 265.57 li
166.847 260.755 li
169.876 257.755 li
175.805 252.558 li
178.922 249.94 li
184.762 245.544 li
189.598 242.125 li
193.72 239.487 li
202.603 234.309 li
202.677 234.27 li
211.635 230.055 li
220.592 226.526 li
220.695 226.494 li
229.55 223.958 li
238.507 222.145 li
247.465 221.125 li
256.422 221.179 li
265.38 221.408 li
269.672 222.028 li
271.849 230.402 li
275.522 242.125 li
275.83 242.962 li
280.212 253.847 li
284.787 263.842 li
285.504 265.303 li
283.294 264.72 li
274.337 263.331 li
265.38 262.952 li
256.422 263.656 li
247.465 265.497 li
247.241 265.57 li
238.507 268.95 li
230.198 273.386 li
229.55 273.809 li
220.592 281.05 li
220.432 281.201 li
213.941 289.016 li
211.635 292.845 li
209.472 296.831 li
206.78 304.647 li
205.637 312.462 li
206.015 320.277 li
207.908 328.092 li
211.334 335.908 li
211.635 336.386 li
216.457 343.723 li
220.592 348.507 li
223.364 351.538 li
229.55 357.029 li
232.344 359.353 li
238.507 363.677 li
243.842 367.169 li
247.465 369.225 li
256.422 373.9 li
258.724 374.984 li
265.38 377.745 li
274.337 381.057 li
279.834 382.799 li
283.294 383.783 li
292.252 385.842 li
301.209 387.388 li
310.167 388.348 li
319.124 388.63 li
328.082 388.105 li
337.039 386.626 li
345.997 383.942 li
348.559 382.799 li
354.954 378.923 li
359.5 374.984 li
363.912 368.892 li
364.853 367.169 li
367.078 359.353 li
367.49 351.538 li
366.925 347.082 li
368.056 347.631 li
374.362 350.417 li
383.319 353.697 li
392.276 357.495 li
399.476 359.353 li
401.235 359.777 li
410.192 361.805 li
415.062 362.488 li
416.024 367.169 li
416.48 374.984 li
415.856 382.799 li
413.913 390.614 li
410.33 398.43 li
408.699 400.826 li
404.204 406.245 li
399.742 410.171 li
394.166 414.06 li
390.784 415.941 li
381.827 419.828 li
375.496 421.876 li
372.869 422.6 li
363.912 424.42 li
354.954 425.618 li
345.997 426.277 li
337.039 426.456 li
.898039 1 .898039 rgb
f
415.062 362.488 mo
410.192 361.805 li
401.235 359.777 li
399.476 359.353 li
392.276 357.495 li
383.319 353.697 li
374.362 350.417 li
368.056 347.631 li
366.925 347.082 li
366.499 343.723 li
364.394 335.908 li
363.912 334.921 li
360.61 328.092 li
356.875 320.277 li
354.954 317.254 li
351.685 312.462 li
345.997 304.985 li
345.717 304.647 li
338.474 296.831 li
337.039 295.4 li
330.015 289.016 li
328.082 287.38 li
319.939 281.201 li
319.124 280.622 li
310.167 275.127 li
306.808 273.386 li
301.209 270.671 li
292.252 267.192 li
286.515 265.57 li
285.504 265.303 li
284.787 263.842 li
280.212 253.847 li
275.83 242.962 li
275.522 242.125 li
271.849 230.402 li
269.672 222.028 li
274.337 222.702 li
283.294 224.718 li
289.09 226.494 li
292.252 227.495 li
301.209 231.062 li
302.687 231.759 li
302.702 231.806 li
306.382 242.125 li
311.409 253.847 li
311.66 254.323 li
318.147 265.57 li
320.617 269.295 li
326.419 277.293 li
329.575 281.113 li
337.258 289.016 li
338.532 290.182 li
347.49 298.695 li
350.412 300.739 li
356.446 304.69 li
365.405 310.601 li
369.086 312.462 li
374.362 314.428 li
383.319 317.833 li
392.276 319.362 li
397.892 319.822 li
398.181 320.277 li
399.742 323.253 li
402.19 328.092 li
406.108 335.908 li
408.699 341.16 li
409.923 343.723 li
412.619 351.538 li
414.418 359.353 li
415.062 362.488 li
.847059 .94902 .898039 rgb
f
397.892 319.822 mo
392.276 319.362 li
383.319 317.833 li
374.362 314.428 li
369.086 312.462 li
365.405 310.601 li
356.446 304.69 li
350.412 300.739 li
347.49 298.695 li
338.532 290.182 li
337.258 289.016 li
329.575 281.113 li
326.419 277.293 li
320.617 269.295 li
318.147 265.57 li
311.66 254.323 li
311.409 253.847 li
306.382 242.125 li
302.702 231.806 li
302.687 231.759 li
308.097 234.309 li
310.167 235.313 li
319.124 240.334 li
321.967 242.125 li
328.082 246.082 li
333.173 249.94 li
337.039 252.784 li
343.635 257.755 li
345.997 259.688 li
352.71 265.57 li
354.954 267.608 li
360.916 273.386 li
363.912 276.385 li
368.456 281.201 li
372.869 286.049 li
375.436 289.016 li
381.827 296.692 li
381.938 296.831 li
387.772 304.647 li
390.784 308.891 li
393.214 312.462 li
397.892 319.822 li
.623529 .72549 .898039 rgb
f
319.124 388.63 mo
310.167 388.348 li
301.209 387.388 li
292.252 385.842 li
283.294 383.783 li
279.834 382.799 li
274.337 381.057 li
265.38 377.745 li
258.724 374.984 li
256.422 373.9 li
247.465 369.225 li
243.842 367.169 li
238.507 363.677 li
232.344 359.353 li
229.55 357.029 li
223.364 351.538 li
220.592 348.507 li
216.457 343.723 li
211.635 336.386 li
211.334 335.908 li
207.908 328.092 li
206.015 320.277 li
205.637 312.462 li
206.78 304.647 li
209.472 296.831 li
211.635 292.845 li
213.941 289.016 li
220.432 281.201 li
220.592 281.05 li
229.55 273.809 li
230.198 273.386 li
238.507 268.95 li
247.241 265.57 li
247.465 265.497 li
256.422 263.656 li
265.38 262.952 li
274.337 263.331 li
283.294 264.72 li
285.504 265.303 li
285.635 265.57 li
292.173 277.293 li
293.745 279.745 li
299.926 289.016 li
302.702 292.882 li
308.864 300.739 li
311.66 303.978 li
319.704 312.462 li
320.617 313.363 li
329.575 321.9 li
332.226 324.185 li
338.532 329.153 li
347.49 335.85 li
347.678 335.908 li
356.446 341.28 li
365.405 346.343 li
366.925 347.082 li
367.49 351.538 li
367.078 359.353 li
364.853 367.169 li
363.912 368.892 li
359.5 374.984 li
354.954 378.923 li
348.559 382.799 li
345.997 383.942 li
337.039 386.626 li
328.082 388.105 li
319.124 388.63 li
.447059 1 .447059 rgb
f
366.925 347.082 mo
365.405 346.343 li
356.446 341.28 li
347.678 335.908 li
347.49 335.85 li
338.532 329.153 li
332.226 324.185 li
329.575 321.9 li
320.617 313.363 li
319.704 312.462 li
311.66 303.978 li
308.864 300.739 li
302.702 292.882 li
299.926 289.016 li
293.745 279.745 li
292.173 277.293 li
285.635 265.57 li
285.504 265.303 li
286.515 265.57 li
292.252 267.192 li
301.209 270.671 li
306.808 273.386 li
310.167 275.127 li
319.124 280.622 li
319.939 281.201 li
328.082 287.38 li
330.015 289.016 li
337.039 295.4 li
338.474 296.831 li
345.717 304.647 li
345.997 304.985 li
351.685 312.462 li
354.954 317.254 li
356.875 320.277 li
360.61 328.092 li
363.912 334.921 li
364.394 335.908 li
366.499 343.723 li
366.925 347.082 li
.423529 .976471 .447059 rgb
f
399.388 359.718 mo
401.148 360.141 li
401.323 359.412 li
399.563 358.988 li
.6 .6 .6 rgb
f
401.153 360.143 mo
410.11 362.171 li
410.275 361.439 li
401.318 359.411 li
f
410.14 362.177 mo
419.097 363.432 li
419.201 362.69 li
410.244 361.434 li
f
419.128 363.435 mo
428.085 363.94 li
428.128 363.191 li
419.171 362.687 li
f
428.119 363.941 mo
437.078 363.638 li
437.053 362.888 li
428.094 363.191 li
f
437.135 363.632 mo
446.092 361.941 li
445.953 361.204 li
436.996 362.895 li
f
446.107 361.938 mo
455.064 359.868 li
454.895 359.137 li
445.938 361.207 li
f
455.123 359.849 mo
455.484 359.7 li
455.198 359.006 li
454.836 359.156 li
f
367.904 347.974 mo
374.211 350.76 li
374.514 350.074 li
368.207 347.288 li
f
374.233 350.77 mo
383.19 354.049 li
383.448 353.345 li
374.491 350.065 li
f
383.173 354.042 mo
392.13 357.84 li
392.423 357.149 li
383.466 353.352 li
f
392.183 357.858 mo
399.382 359.716 li
399.569 358.99 li
392.37 357.132 li
f
455.548 359.665 mo
464.144 353.963 li
463.729 353.338 li
455.134 359.041 li
f
464.188 353.929 mo
470.838 347.909 li
470.334 347.353 li
463.685 353.373 li
f
347.482 336.227 mo
356.25 341.6 li
356.642 340.96 li
347.874 335.588 li
f
356.262 341.606 mo
365.221 346.67 li
365.59 346.017 li
356.631 340.953 li
f
365.241 346.681 mo
367.892 347.969 li
368.22 347.294 li
365.569 346.006 li
f
470.918 347.806 mo
473.227 343.413 li
472.564 343.064 li
470.254 347.457 li
f
473.246 343.372 mo
476.025 336.041 li
475.324 335.775 li
472.545 343.106 li
f
331.994 324.48 mo
338.3 329.447 li
338.764 328.858 li
332.458 323.89 li
f
338.308 329.453 mo
347.266 336.15 li
347.715 335.55 li
338.757 328.852 li
f
347.38 336.209 mo
347.568 336.266 li
347.788 335.549 li
347.6 335.492 li
f
476.045 335.967 mo
477.938 324.245 li
477.197 324.125 li
475.305 335.848 li
f
319.441 312.729 mo
320.354 313.63 li
320.88 313.096 li
319.967 312.195 li
f
320.358 313.634 mo
329.316 322.171 li
329.834 321.628 li
320.876 313.091 li
f
329.33 322.184 mo
331.981 324.469 li
332.47 323.901 li
329.82 321.616 li
f
477.941 324.149 mo
476.81 312.426 li
476.063 312.498 li
477.194 324.221 li
f
308.58 300.984 mo
311.376 304.223 li
311.944 303.733 li
309.148 300.494 li
f
311.388 304.236 mo
319.432 312.72 li
319.976 312.204 li
311.932 303.72 li
f
476.802 312.378 mo
474.093 300.654 li
473.362 300.823 li
476.071 312.547 li
f
299.621 289.235 mo
302.398 293.101 li
303.007 292.664 li
300.23 288.797 li
f
302.407 293.114 mo
308.569 300.97 li
309.159 300.507 li
302.997 292.651 li
f
473.25 298.202 mo
470.072 288.895 li
469.362 289.137 li
472.541 298.444 li
f
474.082 300.617 mo
473.25 298.201 li
472.541 298.445 li
473.373 300.861 li
f
291.857 277.496 mo
293.429 279.947 li
294.061 279.542 li
292.488 277.091 li
f
293.433 279.953 mo
299.614 289.224 li
300.238 288.808 li
294.057 279.537 li
f
470.064 288.874 mo
465.26 277.151 li
464.566 277.436 li
469.37 289.158 li
f
285.307 265.753 mo
291.845 277.476 li
292.5 277.111 li
285.962 265.388 li
f
464.275 275.103 mo
459.625 265.408 li
458.949 265.732 li
463.598 275.427 li
f
465.251 277.131 mo
464.274 275.102 li
463.599 275.428 li
464.575 277.456 li
f
279.871 254.003 mo
284.446 263.998 li
285.128 263.686 li
280.553 253.691 li
f
284.45 264.007 mo
285.298 265.735 li
285.971 265.405 li
285.124 263.677 li
f
455.309 258.13 mo
452.883 253.668 li
452.224 254.026 li
454.65 258.488 li
f
459.61 265.379 mo
455.302 258.118 li
454.657 258.5 li
458.965 265.762 li
f
275.17 242.255 mo
275.478 243.091 li
276.182 242.832 li
275.874 241.995 li
f
275.482 243.102 mo
279.864 253.987 li
280.56 253.707 li
276.178 242.822 li
f
452.887 253.676 mo
446.879 241.954 li
446.211 242.296 li
452.22 254.018 li
f
271.491 230.514 mo
275.164 242.237 li
275.88 242.013 li
272.207 230.29 li
f
446.334 241.053 mo
439.062 230.193 li
438.438 230.611 li
445.711 241.47 li
f
446.866 241.931 mo
446.343 241.067 li
445.702 241.455 li
446.224 242.319 li
f
268.439 218.774 mo
271.486 230.496 li
272.212 230.307 li
269.165 218.585 li
f
437.383 227.491 mo
431.705 218.479 li
431.07 218.879 li
436.748 227.891 li
f
439.069 230.204 mo
437.384 227.493 li
436.747 227.889 li
438.431 230.6 li
f
266.333 207.019 mo
266.502 208.009 li
267.242 207.883 li
267.073 206.893 li
f
266.503 208.013 mo
268.433 218.746 li
269.171 218.613 li
267.241 207.88 li
f
428.428 213.436 mo
424.444 206.764 li
423.8 207.148 li
427.784 213.82 li
f
431.702 218.475 mo
428.421 213.424 li
427.792 213.832 li
431.073 218.883 li
f
264.589 195.288 mo
266.332 207.011 li
267.074 206.901 li
265.331 195.178 li
f
419.445 201.798 mo
414.16 195.003 li
413.568 195.463 li
418.853 202.259 li
f
424.386 206.69 mo
419.413 201.762 li
418.885 202.295 li
423.858 207.222 li
f
263.628 183.541 mo
264.586 195.263 li
265.334 195.202 li
264.376 183.48 li
f
410.506 187.386 mo
407.836 183.305 li
407.209 183.716 li
409.879 187.797 li
f
414.202 195.07 mo
410.53 187.429 li
409.854 187.754 li
413.526 195.395 li
f
263.386 171.795 mo
263.627 183.518 li
264.377 183.503 li
264.136 171.779 li
f
401.532 175.733 mo
398.314 171.558 li
397.72 172.016 li
400.938 176.191 li
f
407.811 183.27 mo
401.523 175.722 li
400.947 176.202 li
407.234 183.75 li
f
263.947 160.046 mo
263.386 171.769 li
264.135 171.805 li
264.696 160.082 li
f
392.552 163.287 mo
389.337 159.809 li
388.786 160.318 li
392.001 163.797 li
f
398.324 171.573 mo
392.584 163.328 li
391.969 163.756 li
397.709 172.001 li
f
265.038 148.308 mo
263.948 160.029 li
264.695 160.099 li
265.785 148.377 li
f
383.618 152.861 mo
380.01 148.115 li
379.413 148.569 li
383.021 153.315 li
f
389.351 159.826 mo
383.609 152.85 li
383.03 153.326 li
388.772 160.302 li
f
266.505 141.343 mo
265.044 148.265 li
265.778 148.42 li
267.239 141.498 li
f
267.706 136.528 mo
266.508 141.33 li
267.236 141.512 li
268.434 136.71 li
f
374.642 142.541 mo
369.111 136.369 li
368.553 136.869 li
374.083 143.041 li
f
379.982 148.082 mo
374.632 142.531 li
374.092 143.051 li
379.442 148.602 li
f
270.681 124.804 mo
267.706 136.527 li
268.433 136.711 li
271.408 124.988 li
f
365.672 132.062 mo
358.336 124.633 li
357.802 125.159 li
365.138 132.589 li
f
369.125 136.385 mo
365.698 132.091 li
365.112 132.559 li
368.539 136.853 li
f
275.484 113.2 mo
270.698 124.752 li
271.391 125.039 li
276.177 113.487 li
f
275.607 112.983 mo
275.507 113.153 li
276.153 113.534 li
276.253 113.364 li
f
347.564 113.39 mo
344.657 112.806 li
344.509 113.541 li
347.416 114.125 li
f
356.719 122.986 mo
347.763 113.5 li
347.218 114.015 li
356.174 123.501 li
f
358.337 124.633 mo
356.714 122.98 li
356.179 123.506 li
357.802 125.159 li
f
284.4 101.226 mo
275.63 112.949 li
276.23 113.398 li
285 101.675 li
f
329.696 101.368 mo
328.898 101.095 li
328.655 101.805 li
329.454 102.078 li
f
338.764 108.46 mo
329.807 101.428 li
329.344 102.018 li
338.301 109.05 li
f
344.804 112.87 mo
338.753 108.452 li
338.311 109.058 li
344.362 113.476 li
f
284.509 101.103 mo
284.422 101.199 li
284.978 101.702 li
285.065 101.605 li
f
293.541 95.2197 mo
284.583 101.04 li
284.991 101.668 li
293.949 95.8486 li
f
302.684 94.7265 mo
293.727 95.1596 li
293.763 95.9087 li
302.72 95.4756 li
f
311.623 93.8387 mo
302.665 94.7279 li
302.739 95.4742 li
311.697 94.5851 li
f
320.771 97.8849 mo
311.814 93.8697 li
311.507 94.5541 li
320.464 98.5692 li
f
328.914 101.101 mo
320.755 97.8783 li
320.479 98.5758 li
328.639 101.799 li
f
368.955 312.814 mo
374.231 314.78 li
374.493 314.077 li
369.217 312.111 li
f
374.229 314.779 mo
383.186 318.183 li
383.453 317.482 li
374.496 314.078 li
f
383.256 318.202 mo
392.213 319.731 li
392.339 318.992 li
383.382 317.463 li
f
392.246 319.736 mo
401.205 320.47 li
401.266 319.722 li
392.307 318.988 li
f
401.273 320.469 mo
410.23 319.576 li
410.155 318.829 li
401.198 319.723 li
f
410.35 319.543 mo
419.307 315.399 li
418.992 314.719 li
410.035 318.862 li
f
419.394 315.343 mo
422.402 312.746 li
421.912 312.179 li
418.904 314.775 li
f
350.207 301.052 mo
356.241 305.004 li
356.652 304.376 li
350.618 300.425 li
f
356.24 305.003 mo
365.199 310.914 li
365.612 310.288 li
356.653 304.377 li
f
365.236 310.936 mo
368.917 312.797 li
369.255 312.128 li
365.574 310.266 li
f
422.494 312.627 mo
428.219 300.903 li
427.545 300.574 li
421.82 312.298 li
f
337.005 289.293 mo
338.279 290.459 li
338.785 289.905 li
337.511 288.739 li
f
338.274 290.454 mo
347.232 298.967 li
347.749 298.423 li
338.791 289.91 li
f
347.275 299.002 mo
350.197 301.046 li
350.627 300.431 li
347.705 298.388 li
f
428.257 300.752 mo
428.481 294.516 li
427.732 294.489 li
427.507 300.725 li
f
428.481 294.512 mo
428.619 289.026 li
427.869 289.007 li
427.732 294.493 li
f
326.13 277.532 mo
329.286 281.352 li
329.864 280.874 li
326.708 277.055 li
f
329.306 281.374 mo
336.989 289.277 li
337.527 288.755 li
329.844 280.851 li
f
428.474 288.235 mo
426.326 277.222 li
425.59 277.365 li
427.738 288.379 li
f
428.612 288.945 mo
428.475 288.236 li
427.738 288.379 li
427.876 289.088 li
f
317.835 265.778 mo
320.305 269.502 li
320.93 269.088 li
318.46 265.363 li
f
320.314 269.515 mo
326.115 277.514 li
326.722 277.073 li
320.921 269.075 li
f
426.314 277.177 mo
422.477 265.454 li
421.765 265.687 li
425.602 277.41 li
f
311.077 254.022 mo
311.328 254.498 li
311.992 254.148 li
311.741 253.672 li
f
311.335 254.511 mo
317.823 265.758 li
318.472 265.383 li
311.985 254.136 li
f
419.494 258.351 mo
417.496 253.699 li
416.807 253.995 li
418.805 258.647 li
f
422.467 265.425 mo
419.495 258.354 li
418.804 258.644 li
421.775 265.716 li
f
306.037 242.273 mo
311.065 253.995 li
311.754 253.699 li
306.726 241.977 li
f
417.486 253.678 mo
411.551 241.956 li
410.882 242.294 li
416.817 254.017 li
f
301.894 230.517 mo
302.345 231.921 li
303.059 231.691 li
302.608 230.287 li
f
302.349 231.932 mo
306.029 242.251 li
306.735 241.999 li
303.055 231.68 li
f
410.512 240.408 mo
404.262 230.206 li
403.623 230.598 li
409.873 240.8 li
f
411.528 241.916 mo
410.503 240.395 li
409.881 240.813 li
410.906 242.334 li
f
299.246 218.762 mo
301.885 230.484 li
302.617 230.32 li
299.978 218.597 li
f
401.548 225.36 mo
396.986 218.472 li
396.361 218.886 li
400.923 225.774 li
f
404.27 230.219 mo
401.563 225.384 li
400.908 225.75 li
403.615 230.585 li
f
297.649 207.007 mo
299.241 218.73 li
299.984 218.629 li
298.392 206.906 li
f
392.578 212.187 mo
388.552 206.733 li
387.948 207.179 li
391.975 212.633 li
f
396.981 218.464 mo
392.583 212.195 li
391.969 212.626 li
396.367 218.895 li
f
297.724 195.23 mo
297.646 206.954 li
298.395 206.959 li
298.474 195.235 li
f
383.609 200.344 mo
379.193 194.994 li
378.614 195.472 li
383.03 200.822 li
f
388.547 206.727 mo
383.616 200.354 li
383.023 200.812 li
387.953 207.186 li
f
298.846 183.475 mo
297.725 195.197 li
298.472 195.269 li
299.593 183.546 li
f
374.61 189.653 mo
367.325 183.229 li
366.829 183.792 li
374.114 190.215 li
f
379.188 194.989 mo
374.647 189.69 li
374.078 190.178 li
378.619 195.477 li
f
301.697 171.699 mo
298.855 183.422 li
299.584 183.599 li
302.426 171.875 li
f
356.677 171.657 mo
356.466 171.492 li
356.004 172.082 li
356.215 172.247 li
f
365.683 181.588 mo
356.724 171.7 li
356.168 172.204 li
365.127 182.091 li
f
367.342 183.245 mo
365.67 181.574 li
365.14 182.105 li
366.812 183.775 li
f
302.365 170.311 mo
301.725 171.622 li
302.398 171.952 li
303.039 170.641 li
f
310.341 159.837 mo
302.404 170.249 li
303 170.703 li
310.938 160.291 li
f
347.687 164.877 mo
339.38 159.745 li
338.986 160.383 li
347.293 165.515 li
f
356.461 171.488 mo
347.716 164.897 li
347.265 165.496 li
356.01 172.087 li
f
311.406 158.846 mo
310.385 159.789 li
310.894 160.339 li
311.915 159.397 li
f
320.487 155.461 mo
311.53 158.769 li
311.79 159.473 li
320.747 156.165 li
f
329.602 156.085 mo
320.644 155.439 li
320.59 156.187 li
329.548 156.833 li
f
338.659 159.319 mo
329.702 156.106 li
329.449 156.812 li
338.406 160.025 li
f
339.376 159.743 mo
338.726 159.351 li
338.339 159.993 li
338.989 160.385 li
f
292.775 422.245 mo
301.144 423.707 li
301.273 422.968 li
292.904 421.506 li
f
301.156 423.709 mo
310.114 424.986 li
310.22 424.243 li
301.262 422.966 li
f
310.127 424.988 mo
319.084 425.953 li
319.164 425.208 li
310.207 424.242 li
f
319.098 425.955 mo
328.056 426.581 li
328.108 425.832 li
319.15 425.206 li
f
328.072 426.581 mo
337.029 426.83 li
337.049 426.081 li
328.092 425.832 li
f
337.047 426.83 mo
346.005 426.652 li
345.99 425.902 li
337.032 426.081 li
f
346.025 426.651 mo
354.982 425.992 li
354.927 425.244 li
345.97 425.903 li
f
355.004 425.989 mo
363.962 424.792 li
363.862 424.049 li
354.904 425.246 li
f
363.987 424.788 mo
372.944 422.968 li
372.794 422.233 li
363.837 424.053 li
f
372.969 422.962 mo
375.596 422.237 li
375.396 421.514 li
372.769 422.239 li
f
261.461 414.42 mo
265.273 415.548 li
265.486 414.828 li
261.673 413.7 li
f
265.282 415.55 mo
274.239 417.977 li
274.435 417.253 li
265.478 414.826 li
f
274.247 417.979 mo
283.204 420.178 li
283.383 419.45 li
274.426 417.251 li
f
283.214 420.18 mo
292.172 422.133 li
292.332 421.4 li
283.374 419.448 li
f
292.183 422.135 mo
292.771 422.244 li
292.908 421.507 li
292.321 421.397 li
f
375.611 422.232 mo
381.943 420.184 li
381.712 419.471 li
375.381 421.519 li
f
381.976 420.172 mo
390.933 416.285 li
390.635 415.597 li
381.678 419.484 li
f
390.966 416.269 mo
394.348 414.388 li
393.984 413.732 li
390.602 415.613 li
f
238.611 406.597 mo
247.338 409.74 li
247.592 409.034 li
238.865 405.892 li
f
247.344 409.742 mo
256.301 412.787 li
256.543 412.077 li
247.586 409.032 li
f
256.309 412.79 mo
261.454 414.418 li
261.68 413.703 li
256.535 412.075 li
f
394.38 414.368 mo
399.957 410.479 li
399.528 409.864 li
393.952 413.752 li
f
399.99 410.453 mo
404.452 406.526 li
403.956 405.963 li
399.494 409.89 li
f
219.98 398.773 mo
220.44 398.977 li
220.744 398.292 li
220.284 398.087 li
f
220.444 398.979 mo
229.402 402.823 li
229.698 402.133 li
220.74 398.29 li
f
229.407 402.825 mo
238.364 406.502 li
238.649 405.808 li
229.692 402.131 li
f
238.371 406.504 mo
238.602 406.594 li
238.874 405.895 li
238.643 405.805 li
f
404.493 406.484 mo
408.988 401.065 li
408.411 400.586 li
403.915 406.005 li
f
409.009 401.037 mo
410.64 398.641 li
410.02 398.219 li
408.389 400.615 li
f
204.127 390.949 mo
211.466 394.635 li
211.803 393.965 li
204.463 390.279 li
f
211.471 394.638 mo
219.968 398.767 li
220.296 398.093 li
211.799 393.963 li
f
410.671 398.586 mo
414.254 390.77 li
413.572 390.457 li
409.989 398.274 li
f
190.395 383.124 mo
193.532 384.947 li
193.909 384.298 li
190.771 382.475 li
f
193.535 384.948 mo
202.491 390.043 li
202.862 389.391 li
193.906 384.297 li
f
202.495 390.045 mo
204.113 390.942 li
204.477 390.286 li
202.858 389.389 li
f
414.277 390.704 mo
416.22 382.89 li
415.493 382.709 li
413.549 390.523 li
f
178.496 375.296 mo
184.555 379.314 li
184.969 378.689 li
178.91 374.671 li
f
184.557 379.316 mo
190.378 383.113 li
190.788 382.485 li
184.967 378.687 li
f
416.23 382.829 mo
416.853 375.014 li
416.106 374.954 li
415.483 382.77 li
f
168.235 367.467 mo
175.577 373.087 li
176.033 372.492 li
168.691 366.872 li
f
175.579 373.089 mo
178.477 375.283 li
178.929 374.685 li
176.032 372.491 li
f
416.854 374.962 mo
416.399 367.148 li
415.65 367.191 li
416.105 375.006 li
f
159.499 359.632 mo
166.597 366.004 li
167.098 365.446 li
160 359.074 li
f
166.597 366.005 mo
168.213 367.449 li
168.713 366.89 li
167.097 365.445 li
f
416.392 367.094 mo
414.785 359.278 li
414.051 359.428 li
415.657 367.245 li
f
152.273 351.792 mo
157.614 357.588 li
158.165 357.079 li
152.825 351.283 li
f
157.614 357.587 mo
159.473 359.607 li
160.025 359.099 li
158.166 357.079 li
f
414.783 359.269 mo
412.985 351.453 li
412.254 351.622 li
414.053 359.437 li
f
146.512 343.945 mo
148.63 346.821 li
149.234 346.377 li
147.116 343.501 li
f
148.629 346.821 mo
152.246 351.759 li
152.851 351.316 li
149.234 346.378 li
f
412.974 351.415 mo
410.277 343.601 li
409.568 343.845 li
412.265 351.66 li
f
142.211 336.088 mo
146.485 343.903 li
147.143 343.543 li
142.869 335.728 li
f
409.036 340.994 mo
406.445 335.742 li
405.772 336.074 li
408.363 341.326 li
f
410.261 343.562 mo
409.038 340.998 li
408.361 341.321 li
409.584 343.885 li
f
139.358 328.221 mo
139.623 328.943 li
140.327 328.685 li
140.062 327.963 li
f
139.622 328.941 mo
142.187 336.035 li
142.893 335.78 li
140.327 328.686 li
f
406.444 335.74 mo
402.526 327.924 li
401.855 328.26 li
405.773 336.076 li
f
137.865 320.346 mo
139.341 328.162 li
140.078 328.023 li
138.602 320.207 li
f
400.074 323.079 mo
398.513 320.103 li
397.849 320.451 li
399.41 323.428 li
f
402.525 327.923 mo
400.077 323.084 li
399.408 323.423 li
401.856 328.262 li
f
137.735 312.468 mo
137.858 320.283 li
138.608 320.271 li
138.485 312.456 li
f
398.497 320.076 mo
393.53 312.261 li
392.897 312.664 li
397.864 320.478 li
f
138.916 304.591 mo
137.74 312.407 li
138.481 312.518 li
139.658 304.703 li
f
391.09 308.674 mo
388.078 304.43 li
387.467 304.864 li
390.478 309.108 li
f
393.524 312.251 mo
391.094 308.68 li
390.474 309.102 li
392.904 312.673 li
f
139.616 302.302 mo
138.929 304.537 li
139.646 304.757 li
140.333 302.523 li
f
141.284 296.724 mo
139.615 302.305 li
140.334 302.52 li
142.003 296.939 li
f
388.073 304.423 mo
382.239 296.607 li
381.638 297.056 li
387.472 304.871 li
f
144.811 288.862 mo
141.301 296.678 li
141.986 296.985 li
145.495 289.17 li
f
382.115 296.452 mo
375.725 288.776 li
375.148 289.256 li
381.539 296.932 li
f
382.232 296.598 mo
382.12 296.458 li
381.534 296.926 li
381.645 297.065 li
f
148.609 282.419 mo
144.83 288.826 li
145.476 289.207 li
149.255 282.8 li
f
149.43 281.012 mo
148.608 282.421 li
149.256 282.799 li
150.078 281.39 li
f
373.146 285.797 mo
368.733 280.948 li
368.179 281.453 li
372.592 286.302 li
f
375.72 288.771 mo
373.153 285.804 li
372.586 286.295 li
375.153 289.261 li
f
155.087 273.167 mo
149.45 280.981 li
150.058 281.42 li
155.696 273.606 li
f
364.177 276.12 mo
361.181 273.121 li
360.651 273.651 li
363.647 276.65 li
f
368.729 280.943 mo
364.185 276.128 li
363.639 276.643 li
368.183 281.458 li
f
157.605 270.219 mo
155.107 273.143 li
155.677 273.63 li
158.175 270.706 li
f
161.794 265.326 mo
157.605 270.219 li
158.174 270.707 li
162.364 265.814 li
f
355.206 267.33 mo
352.962 265.293 li
352.458 265.848 li
354.702 267.886 li
f
361.177 273.117 mo
355.215 267.339 li
354.693 267.877 li
360.655 273.655 li
f
166.581 260.491 mo
161.813 265.306 li
162.346 265.834 li
167.114 261.019 li
f
169.612 257.488 mo
166.583 260.488 li
167.111 261.021 li
170.14 258.021 li
f
346.235 259.398 mo
343.872 257.465 li
343.397 258.045 li
345.76 259.978 li
f
352.957 265.288 mo
346.244 259.406 li
345.75 259.97 li
352.463 265.852 li
f
175.558 252.276 mo
169.629 257.473 li
170.123 258.037 li
176.052 252.84 li
f
178.681 249.653 mo
175.564 252.271 li
176.046 252.845 li
179.163 250.227 li
f
337.261 252.482 mo
333.395 249.638 li
332.951 250.242 li
336.817 253.086 li
f
343.86 257.455 mo
337.265 252.485 li
336.813 253.084 li
343.409 258.054 li
f
184.537 245.244 mo
178.696 249.64 li
179.147 250.24 li
184.988 245.844 li
f
189.382 241.819 mo
184.546 245.238 li
184.979 245.85 li
189.815 242.431 li
f
328.286 245.767 mo
322.171 241.81 li
321.763 242.44 li
327.878 246.397 li
f
333.399 249.641 mo
328.309 245.783 li
327.856 246.381 li
332.946 250.239 li
f
193.518 239.171 mo
189.396 241.809 li
189.8 242.441 li
193.922 239.803 li
f
202.414 233.985 mo
193.531 239.163 li
193.909 239.811 li
202.792 234.633 li
f
310.331 234.976 mo
308.26 233.972 li
307.933 234.646 li
310.003 235.65 li
f
319.307 240.007 mo
310.35 234.986 li
309.984 235.64 li
318.941 240.661 li
f
322.167 241.808 mo
319.324 240.017 li
318.924 240.651 li
321.767 242.442 li
f
202.501 233.939 mo
202.427 233.978 li
202.779 234.64 li
202.852 234.601 li
f
211.475 229.716 mo
202.517 233.931 li
202.836 234.609 li
211.794 230.394 li
f
220.454 226.177 mo
211.497 229.706 li
211.772 230.404 li
220.729 226.875 li
f
220.584 226.136 mo
220.481 226.167 li
220.702 226.884 li
220.805 226.853 li
f
292.365 227.138 mo
289.203 226.137 li
288.977 226.852 li
292.139 227.853 li
f
301.348 230.714 mo
292.391 227.147 li
292.113 227.844 li
301.07 231.41 li
f
308.257 233.97 mo
301.369 230.723 li
301.049 231.401 li
307.937 234.648 li
f
229.447 223.597 mo
220.592 226.134 li
220.798 226.855 li
229.653 224.319 li
f
238.432 221.777 mo
229.475 223.59 li
229.624 224.326 li
238.581 222.513 li
f
247.422 220.752 mo
238.464 221.772 li
238.549 222.518 li
247.507 221.498 li
f
256.424 220.804 mo
247.467 220.75 li
247.463 221.5 li
256.42 221.554 li
f
265.389 221.033 mo
256.431 220.804 li
256.412 221.554 li
265.37 221.783 li
f
274.391 222.331 mo
265.433 221.037 li
265.326 221.779 li
274.283 223.073 li
f
283.376 224.352 mo
274.419 222.336 li
274.255 223.068 li
283.212 225.084 li
f
289.2 226.136 mo
283.404 224.36 li
283.184 225.077 li
288.98 226.853 li
f
279.731 383.16 mo
283.191 384.143 li
283.396 383.422 li
279.936 382.439 li
f
283.21 384.148 mo
292.168 386.208 li
292.336 385.477 li
283.378 383.417 li
f
292.188 386.212 mo
301.145 387.758 li
301.273 387.019 li
292.316 385.473 li
f
301.169 387.761 mo
310.127 388.721 li
310.207 387.975 li
301.249 387.015 li
f
310.155 388.723 mo
319.112 389.005 li
319.136 388.256 li
310.179 387.973 li
f
319.146 389.005 mo
328.104 388.479 li
328.06 387.731 li
319.102 388.256 li
f
328.143 388.475 mo
337.1 386.995 li
336.978 386.255 li
328.021 387.735 li
f
337.147 386.985 mo
346.105 384.301 li
345.889 383.583 li
336.931 386.266 li
f
346.15 384.284 mo
348.712 383.142 li
348.407 382.457 li
345.844 383.599 li
f
258.58 375.33 mo
265.236 378.091 li
265.524 377.398 li
258.868 374.637 li
f
265.25 378.096 mo
274.207 381.409 li
274.467 380.705 li
265.51 377.393 li
f
274.224 381.415 mo
279.721 383.157 li
279.947 382.442 li
274.45 380.7 li
f
348.754 383.12 mo
355.148 379.244 li
354.76 378.603 li
348.365 382.479 li
f
355.2 379.207 mo
359.746 375.267 li
359.254 374.7 li
354.708 378.64 li
f
243.657 367.496 mo
247.28 369.551 li
247.65 368.899 li
244.027 366.843 li
f
247.291 369.558 mo
256.248 374.232 li
256.595 373.567 li
247.638 368.893 li
f
256.262 374.239 mo
258.564 375.323 li
258.884 374.645 li
256.582 373.561 li
f
359.804 375.204 mo
364.216 369.112 li
363.608 368.672 li
359.196 374.764 li
f
364.241 369.072 mo
365.182 367.349 li
364.523 366.99 li
363.583 368.712 li
f
232.128 359.66 mo
238.291 363.984 li
238.722 363.37 li
232.559 359.046 li
f
238.301 363.991 mo
243.636 367.483 li
244.047 366.856 li
238.712 363.363 li
f
365.213 367.272 mo
367.439 359.456 li
366.717 359.25 li
364.492 367.067 li
f
223.115 351.818 mo
229.301 357.309 li
229.799 356.748 li
223.613 351.257 li
f
229.31 357.317 mo
232.104 359.641 li
232.584 359.065 li
229.79 356.741 li
f
367.453 359.373 mo
367.865 351.557 li
367.116 351.518 li
366.704 359.333 li
f
216.173 343.968 mo
220.308 348.753 li
220.876 348.262 li
216.741 343.478 li
f
220.315 348.76 mo
223.087 351.791 li
223.64 351.284 li
220.868 348.254 li
f
367.862 351.49 mo
366.871 343.676 li
366.127 343.77 li
367.118 351.585 li
f
211.016 336.107 mo
211.317 336.586 li
211.952 336.187 li
211.651 335.708 li
f
211.321 336.592 mo
216.144 343.929 li
216.77 343.517 li
211.948 336.18 li
f
366.861 343.626 mo
364.756 335.81 li
364.031 336.005 li
366.137 343.821 li
f
207.565 328.243 mo
210.991 336.058 li
211.677 335.757 li
208.252 327.942 li
f
364.25 334.758 mo
360.948 327.929 li
360.273 328.255 li
363.574 335.085 li
f
364.731 335.743 mo
364.249 334.757 li
363.575 335.086 li
364.057 336.072 li
f
205.651 320.365 mo
207.544 328.181 li
208.273 328.004 li
206.38 320.189 li
f
360.949 327.931 mo
357.213 320.115 li
356.537 320.439 li
360.272 328.254 li
f
205.263 312.48 mo
205.641 320.295 li
206.39 320.259 li
206.012 312.444 li
f
355.264 317.043 mo
351.994 312.251 li
351.375 312.674 li
354.644 317.466 li
f
357.191 320.076 mo
355.271 317.053 li
354.638 317.456 li
356.559 320.478 li
f
206.409 304.593 mo
205.266 312.408 li
206.008 312.517 li
207.151 304.701 li
f
346.286 304.745 mo
346.005 304.408 li
345.428 304.886 li
345.708 305.224 li
f
351.983 312.235 mo
346.296 304.758 li
345.699 305.212 li
351.386 312.689 li
f
209.118 296.709 mo
206.425 304.525 li
207.134 304.769 li
209.827 296.954 li
f
345.992 304.392 mo
338.749 296.577 li
338.199 297.086 li
345.442 304.902 li
f
211.305 292.666 mo
209.143 296.653 li
209.802 297.01 li
211.964 293.024 li
f
213.62 288.823 mo
211.314 292.652 li
211.956 293.039 li
214.262 289.21 li
f
337.291 295.122 mo
330.267 288.739 li
329.762 289.294 li
336.787 295.677 li
f
338.739 296.566 mo
337.304 295.134 li
336.774 295.665 li
338.209 297.097 li
f
220.144 280.961 mo
213.652 288.776 li
214.229 289.256 li
220.721 281.44 li
f
328.309 287.082 mo
320.165 280.902 li
319.712 281.499 li
327.855 287.679 li
f
330.257 288.73 mo
328.324 287.094 li
327.84 287.667 li
329.772 289.302 li
f
220.335 280.777 mo
220.175 280.928 li
220.689 281.474 li
220.849 281.323 li
f
229.314 273.517 mo
220.356 280.759 li
220.828 281.342 li
229.786 274.101 li
f
229.993 273.072 mo
229.345 273.495 li
229.755 274.123 li
230.403 273.7 li
f
310.34 274.794 mo
306.98 273.053 li
306.635 273.719 li
309.994 275.46 li
f
319.32 280.302 mo
310.363 274.807 li
309.971 275.447 li
318.928 280.941 li
f
320.156 280.895 mo
319.341 280.316 li
318.907 280.927 li
319.721 281.506 li
f
238.33 268.619 mo
230.022 273.055 li
230.375 273.717 li
238.683 269.281 li
f
247.106 265.221 mo
238.371 268.6 li
238.642 269.3 li
247.377 265.92 li
f
292.354 266.831 mo
286.617 265.209 li
286.413 265.931 li
292.15 267.553 li
f
301.345 270.321 mo
292.388 266.842 li
292.116 267.541 li
301.073 271.02 li
f
306.971 273.049 mo
301.373 270.333 li
301.045 271.008 li
306.644 273.724 li
f
247.348 265.141 mo
247.124 265.214 li
247.358 265.927 li
247.582 265.853 li
f
256.346 263.289 mo
247.389 265.13 li
247.54 265.864 li
256.497 264.024 li
f
265.35 262.578 mo
256.392 263.282 li
256.451 264.03 li
265.409 263.326 li
f
274.353 262.956 mo
265.396 262.577 li
265.364 263.327 li
274.321 263.706 li
f
283.351 264.35 mo
274.394 262.96 li
274.279 263.702 li
283.236 265.091 li
f
286.611 265.208 mo
283.39 264.358 li
283.198 265.083 li
286.419 265.933 li
f
356.009 249.457 mo
362.856 249.457 li
359.433 242.608 li
356.009 249.457 li
cp
0 0 0 rgb
f
298.194 263.185 mo
297.819 263.185 li
297.819 266.604 li
301.612 266.604 li
301.612 263.56 li
304.657 263.56 li
304.657 259.766 li
301.612 259.766 li
301.612 256.722 li
297.819 256.722 li
297.819 259.766 li
294.776 259.766 li
294.776 263.56 li
298.194 263.56 li
298.194 263.185 li
297.819 263.185 li
298.194 263.185 li
298.194 262.81 li
295.526 262.81 li
295.526 260.516 li
298.569 260.516 li
298.569 257.472 li
300.862 257.472 li
300.862 260.516 li
303.907 260.516 li
303.907 262.81 li
300.862 262.81 li
300.862 265.854 li
298.569 265.854 li
298.569 262.81 li
298.194 262.81 li
298.194 263.185 li
cp
1 0 0 rgb
f
290.759 331.517 mo
294.183 324.668 li
287.335 324.668 li
290.759 331.517 li
cp
0 0 0 rgb
f
90.709 262.038 mo
93.709 262.038 li
93.709 261.288 li
90.709 261.288 li
cp
96.709 262.038 mo
99.709 262.038 li
99.709 261.288 li
96.709 261.288 li
cp
102.709 262.038 mo
105.709 262.038 li
105.709 261.288 li
102.709 261.288 li
cp
108.709 262.038 mo
111.709 262.038 li
111.709 261.288 li
108.709 261.288 li
cp
114.709 262.038 mo
117.709 262.038 li
117.709 261.288 li
114.709 261.288 li
cp
120.709 262.038 mo
123.709 262.038 li
123.709 261.288 li
120.709 261.288 li
cp
126.709 262.038 mo
129.709 262.038 li
129.709 261.288 li
126.709 261.288 li
cp
132.709 262.038 mo
135.709 262.038 li
135.709 261.288 li
132.709 261.288 li
cp
138.709 262.038 mo
141.709 262.038 li
141.709 261.288 li
138.709 261.288 li
cp
144.709 262.038 mo
147.709 262.038 li
147.709 261.288 li
144.709 261.288 li
cp
150.709 262.038 mo
153.709 262.038 li
153.709 261.288 li
150.709 261.288 li
cp
156.709 262.038 mo
159.709 262.038 li
159.709 261.288 li
156.709 261.288 li
cp
162.709 262.038 mo
165.709 262.038 li
165.709 261.288 li
162.709 261.288 li
cp
168.709 262.038 mo
171.709 262.038 li
171.709 261.288 li
168.709 261.288 li
cp
174.709 262.038 mo
177.709 262.038 li
177.709 261.288 li
174.709 261.288 li
cp
180.709 262.038 mo
183.709 262.038 li
183.709 261.288 li
180.709 261.288 li
cp
186.709 262.038 mo
189.709 262.038 li
189.709 261.288 li
186.709 261.288 li
cp
192.709 262.038 mo
195.709 262.038 li
195.709 261.288 li
192.709 261.288 li
cp
198.709 262.038 mo
201.709 262.038 li
201.709 261.288 li
198.709 261.288 li
cp
204.709 262.038 mo
207.709 262.038 li
207.709 261.288 li
204.709 261.288 li
cp
210.709 262.038 mo
213.709 262.038 li
213.709 261.288 li
210.709 261.288 li
cp
216.709 262.038 mo
219.709 262.038 li
219.709 261.288 li
216.709 261.288 li
cp
222.709 262.038 mo
225.709 262.038 li
225.709 261.288 li
222.709 261.288 li
cp
228.709 262.038 mo
231.709 262.038 li
231.709 261.288 li
228.709 261.288 li
cp
234.709 262.038 mo
237.709 262.038 li
237.709 261.288 li
234.709 261.288 li
cp
240.709 262.038 mo
243.709 262.038 li
243.709 261.288 li
240.709 261.288 li
cp
246.709 262.038 mo
249.709 262.038 li
249.709 261.288 li
246.709 261.288 li
cp
252.709 262.038 mo
255.709 262.038 li
255.709 261.288 li
252.709 261.288 li
cp
258.709 262.038 mo
261.709 262.038 li
261.709 261.288 li
258.709 261.288 li
cp
264.709 262.038 mo
267.709 262.038 li
267.709 261.288 li
264.709 261.288 li
cp
270.709 262.038 mo
273.709 262.038 li
273.709 261.288 li
270.709 261.288 li
cp
276.709 262.038 mo
279.709 262.038 li
279.709 261.288 li
276.709 261.288 li
cp
282.709 262.038 mo
285.709 262.038 li
285.709 261.288 li
282.709 261.288 li
cp
288.709 262.038 mo
291.709 262.038 li
291.709 261.288 li
288.709 261.288 li
cp
294.709 262.038 mo
297.709 262.038 li
297.709 261.288 li
294.709 261.288 li
cp
300.709 262.038 mo
303.709 262.038 li
303.709 261.288 li
300.709 261.288 li
cp
306.709 262.038 mo
309.709 262.038 li
309.709 261.288 li
306.709 261.288 li
cp
312.709 262.038 mo
315.709 262.038 li
315.709 261.288 li
312.709 261.288 li
cp
318.709 262.038 mo
321.709 262.038 li
321.709 261.288 li
318.709 261.288 li
cp
324.709 262.038 mo
327.709 262.038 li
327.709 261.288 li
324.709 261.288 li
cp
330.709 262.038 mo
333.709 262.038 li
333.709 261.288 li
330.709 261.288 li
cp
336.709 262.038 mo
339.709 262.038 li
339.709 261.288 li
336.709 261.288 li
cp
342.709 262.038 mo
345.709 262.038 li
345.709 261.288 li
342.709 261.288 li
cp
348.709 262.038 mo
351.709 262.038 li
351.709 261.288 li
348.709 261.288 li
cp
354.709 262.038 mo
357.709 262.038 li
357.709 261.288 li
354.709 261.288 li
cp
360.709 262.038 mo
363.709 262.038 li
363.709 261.288 li
360.709 261.288 li
cp
366.709 262.038 mo
369.709 262.038 li
369.709 261.288 li
366.709 261.288 li
cp
372.709 262.038 mo
375.709 262.038 li
375.709 261.288 li
372.709 261.288 li
cp
378.709 262.038 mo
381.709 262.038 li
381.709 261.288 li
378.709 261.288 li
cp
384.709 262.038 mo
387.709 262.038 li
387.709 261.288 li
384.709 261.288 li
cp
390.709 262.038 mo
393.709 262.038 li
393.709 261.288 li
390.709 261.288 li
cp
396.709 262.038 mo
399.709 262.038 li
399.709 261.288 li
396.709 261.288 li
cp
402.709 262.038 mo
405.709 262.038 li
405.709 261.288 li
402.709 261.288 li
cp
408.709 262.038 mo
411.709 262.038 li
411.709 261.288 li
408.709 261.288 li
cp
414.709 262.038 mo
417.709 262.038 li
417.709 261.288 li
414.709 261.288 li
cp
420.709 262.038 mo
423.709 262.038 li
423.709 261.288 li
420.709 261.288 li
cp
426.709 262.038 mo
429.709 262.038 li
429.709 261.288 li
426.709 261.288 li
cp
432.709 262.038 mo
435.709 262.038 li
435.709 261.288 li
432.709 261.288 li
cp
438.709 262.038 mo
441.709 262.038 li
441.709 261.288 li
438.709 261.288 li
cp
444.709 262.038 mo
447.709 262.038 li
447.709 261.288 li
444.709 261.288 li
cp
450.709 262.038 mo
453.709 262.038 li
453.709 261.288 li
450.709 261.288 li
cp
456.709 262.038 mo
459.709 262.038 li
459.709 261.288 li
456.709 261.288 li
cp
462.709 262.038 mo
465.709 262.038 li
465.709 261.288 li
462.709 261.288 li
cp
468.709 262.038 mo
471.709 262.038 li
471.709 261.288 li
468.709 261.288 li
cp
474.709 262.038 mo
477.709 262.038 li
477.709 261.288 li
474.709 261.288 li
cp
480.709 262.038 mo
483.709 262.038 li
483.709 261.288 li
480.709 261.288 li
cp
486.709 262.038 mo
489.709 262.038 li
489.709 261.288 li
486.709 261.288 li
cp
492.709 262.038 mo
495.709 262.038 li
495.709 261.288 li
492.709 261.288 li
cp
498.709 262.038 mo
501.709 262.038 li
501.709 261.288 li
498.709 261.288 li
cp
504.709 262.038 mo
507.709 262.038 li
507.709 261.288 li
504.709 261.288 li
cp
510.709 262.038 mo
513.709 262.038 li
513.709 261.288 li
510.709 261.288 li
cp
516.709 262.038 mo
519.709 262.038 li
519.709 261.288 li
516.709 261.288 li
cp
522.709 262.038 mo
525.709 262.038 li
525.709 261.288 li
522.709 261.288 li
cp
528.709 262.038 mo
531.709 262.038 li
531.709 261.288 li
528.709 261.288 li
cp
534.709 262.038 mo
537.709 262.038 li
537.709 261.288 li
534.709 261.288 li
cp
.4 .4 .4 rgb
f
300.092 457.044 mo
300.092 454.044 li
299.342 454.044 li
299.342 457.044 li
cp
300.092 451.044 mo
300.092 448.044 li
299.342 448.044 li
299.342 451.044 li
cp
300.092 445.044 mo
300.092 442.044 li
299.342 442.044 li
299.342 445.044 li
cp
300.092 439.044 mo
300.092 436.044 li
299.342 436.044 li
299.342 439.044 li
cp
300.092 433.044 mo
300.092 430.044 li
299.342 430.044 li
299.342 433.044 li
cp
300.092 427.044 mo
300.092 424.044 li
299.342 424.044 li
299.342 427.044 li
cp
300.092 421.044 mo
300.092 418.044 li
299.342 418.044 li
299.342 421.044 li
cp
300.092 415.044 mo
300.092 412.044 li
299.342 412.044 li
299.342 415.044 li
cp
300.092 409.044 mo
300.092 406.044 li
299.342 406.044 li
299.342 409.044 li
cp
300.092 403.044 mo
300.092 400.044 li
299.342 400.044 li
299.342 403.044 li
cp
300.092 397.044 mo
300.092 394.044 li
299.342 394.044 li
299.342 397.044 li
cp
300.092 391.044 mo
300.092 388.044 li
299.342 388.044 li
299.342 391.044 li
cp
300.092 385.044 mo
300.092 382.044 li
299.342 382.044 li
299.342 385.044 li
cp
300.092 379.044 mo
300.092 376.044 li
299.342 376.044 li
299.342 379.044 li
cp
300.092 373.044 mo
300.092 370.044 li
299.342 370.044 li
299.342 373.044 li
cp
300.092 367.044 mo
300.092 364.044 li
299.342 364.044 li
299.342 367.044 li
cp
300.092 361.044 mo
300.092 358.044 li
299.342 358.044 li
299.342 361.044 li
cp
300.092 355.044 mo
300.092 352.044 li
299.342 352.044 li
299.342 355.044 li
cp
300.092 349.044 mo
300.092 346.044 li
299.342 346.044 li
299.342 349.044 li
cp
300.092 343.044 mo
300.092 340.044 li
299.342 340.044 li
299.342 343.044 li
cp
300.092 337.044 mo
300.092 334.044 li
299.342 334.044 li
299.342 337.044 li
cp
300.092 331.044 mo
300.092 328.044 li
299.342 328.044 li
299.342 331.044 li
cp
300.092 325.044 mo
300.092 322.044 li
299.342 322.044 li
299.342 325.044 li
cp
300.092 319.045 mo
300.092 316.045 li
299.342 316.045 li
299.342 319.045 li
cp
300.092 313.045 mo
300.092 310.045 li
299.342 310.045 li
299.342 313.045 li
cp
300.092 307.045 mo
300.092 304.045 li
299.342 304.045 li
299.342 307.045 li
cp
300.092 301.045 mo
300.092 298.045 li
299.342 298.045 li
299.342 301.045 li
cp
300.092 295.045 mo
300.092 292.045 li
299.342 292.045 li
299.342 295.045 li
cp
300.092 289.045 mo
300.092 286.045 li
299.342 286.045 li
299.342 289.045 li
cp
300.092 283.045 mo
300.092 280.045 li
299.342 280.045 li
299.342 283.045 li
cp
300.092 277.045 mo
300.092 274.045 li
299.342 274.045 li
299.342 277.045 li
cp
300.092 271.045 mo
300.092 268.045 li
299.342 268.045 li
299.342 271.045 li
cp
300.092 265.045 mo
300.092 262.045 li
299.342 262.045 li
299.342 265.045 li
cp
300.092 259.045 mo
300.092 256.045 li
299.342 256.045 li
299.342 259.045 li
cp
300.092 253.045 mo
300.092 250.045 li
299.342 250.045 li
299.342 253.045 li
cp
300.092 247.045 mo
300.092 244.045 li
299.342 244.045 li
299.342 247.045 li
cp
300.092 241.045 mo
300.092 238.045 li
299.342 238.045 li
299.342 241.045 li
cp
300.092 235.045 mo
300.092 232.045 li
299.342 232.045 li
299.342 235.045 li
cp
300.092 229.045 mo
300.092 226.045 li
299.342 226.045 li
299.342 229.045 li
cp
300.092 223.045 mo
300.092 220.045 li
299.342 220.045 li
299.342 223.045 li
cp
300.092 217.045 mo
300.092 214.045 li
299.342 214.045 li
299.342 217.045 li
cp
300.092 211.045 mo
300.092 208.045 li
299.342 208.045 li
299.342 211.045 li
cp
300.092 205.045 mo
300.092 202.045 li
299.342 202.045 li
299.342 205.045 li
cp
300.092 199.045 mo
300.092 196.045 li
299.342 196.045 li
299.342 199.045 li
cp
300.092 193.045 mo
300.092 190.045 li
299.342 190.045 li
299.342 193.045 li
cp
300.092 187.045 mo
300.092 184.045 li
299.342 184.045 li
299.342 187.045 li
cp
300.092 181.045 mo
300.092 178.045 li
299.342 178.045 li
299.342 181.045 li
cp
300.092 175.045 mo
300.092 172.045 li
299.342 172.045 li
299.342 175.045 li
cp
300.092 169.045 mo
300.092 166.045 li
299.342 166.045 li
299.342 169.045 li
cp
300.092 163.045 mo
300.092 160.045 li
299.342 160.045 li
299.342 163.045 li
cp
300.092 157.045 mo
300.092 154.045 li
299.342 154.045 li
299.342 157.045 li
cp
300.092 151.045 mo
300.092 148.045 li
299.342 148.045 li
299.342 151.045 li
cp
300.092 145.045 mo
300.092 142.045 li
299.342 142.045 li
299.342 145.045 li
cp
300.092 139.045 mo
300.092 136.045 li
299.342 136.045 li
299.342 139.045 li
cp
300.092 133.045 mo
300.092 130.045 li
299.342 130.045 li
299.342 133.045 li
cp
300.092 127.045 mo
300.092 124.045 li
299.342 124.045 li
299.342 127.045 li
cp
300.092 121.045 mo
300.092 118.045 li
299.342 118.045 li
299.342 121.045 li
cp
300.092 115.045 mo
300.092 112.045 li
299.342 112.045 li
299.342 115.045 li
cp
300.092 109.045 mo
300.092 106.045 li
299.342 106.045 li
299.342 109.045 li
cp
300.092 103.045 mo
300.092 100.045 li
299.342 100.045 li
299.342 103.045 li
cp
300.092 97.0447 mo
300.092 94.0447 li
299.342 94.0447 li
299.342 97.0447 li
cp
300.092 91.0447 mo
300.092 88.0447 li
299.342 88.0447 li
299.342 91.0447 li
cp
300.092 85.0447 mo
300.092 82.0447 li
299.342 82.0447 li
299.342 85.0447 li
cp
300.092 79.0447 mo
300.092 76.0447 li
299.342 76.0447 li
299.342 79.0447 li
cp
300.092 73.0447 mo
300.092 70.0447 li
299.342 70.0447 li
299.342 73.0447 li
cp
300.092 67.0447 mo
300.092 64.0447 li
299.342 64.0447 li
299.342 67.0447 li
cp
300.092 61.0447 mo
300.092 58.0447 li
299.342 58.0447 li
299.342 61.0447 li
cp
300.092 55.0447 mo
300.092 52.0447 li
299.342 52.0447 li
299.342 55.0447 li
cp
300.092 49.0447 mo
300.092 46.0447 li
299.342 46.0447 li
299.342 49.0447 li
cp
300.092 43.0447 mo
300.092 40.0447 li
299.342 40.0447 li
299.342 43.0447 li
cp
300.092 37.0447 mo
300.092 34.0447 li
299.342 34.0447 li
299.342 37.0447 li
cp
300.092 31.0447 mo
300.092 28.0447 li
299.342 28.0447 li
299.342 31.0447 li
cp
f
124.724 119.702 mo
238.11 119.702 li
238.11 43.5279 li
124.724 43.5279 li
124.724 119.702 li
1 1 1 rgb
ef
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
%%IncludeResource: font Helvetica-Bold
/JWLNMV+Helvetica-Bold /Helvetica-Bold findfont ct_VMDictPut/JWLNMV+Helvetica-Bold*1 [32{/.notdef}rp /space 16{/.notdef}rp /one 15{/.notdef}rp /A 10{/.notdef}rp /L 6{/.notdef}rp /S /T 171{/.notdef}rp]JWLNMV+Helvetica-Bold nfJWLNMV+Helvetica-Bold*1 [11.4147 0 0 -11.4147 0 0 ]msf127.464 57.0742 mo(ATLAS)sh165.509 57.0742 mo( A1)shgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
%%IncludeResource: font Helvetica-Bold
/JWLNMV+Helvetica-Bold*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 8{/.notdef}rp /period 2{/.notdef}rp /one 3{/.notdef}rp /five 3{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C 8{/.notdef}rp /L 6{/.notdef}rp /S /T 171{/.notdef}rp]JWLNMV+Helvetica-Bold nfJWLNMV+Helvetica-Bold*1 [11.4147 0 0 -11.4147 0 0 ]msf152.196 76.0981 mo(  95)sh171.235 76.0981 mo(% C.L. )shgrestore
148.819 78.7593 mo
128.976 78.7593 li
128.976 65.4283 li
148.819 65.4283 li
148.819 78.7593 li
.898039 .898039 1 rgb
f
128.976 65.8032 mo
148.819 65.8032 li
148.819 65.0532 li
128.976 65.0532 li
.6 .6 .6 rgb
f
128.976 79.1343 mo
148.819 79.1343 li
148.819 78.3843 li
128.976 78.3843 li
f
149.194 78.7593 mo
149.194 65.4282 li
148.444 65.4282 li
148.444 78.7593 li
f
129.351 78.7593 mo
129.351 65.4282 li
128.601 65.4282 li
128.601 78.7593 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
%%IncludeResource: font Helvetica-Bold
/JWLNMV+Helvetica-Bold*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 8{/.notdef}rp /period 2{/.notdef}rp /one 3{/.notdef}rp /five /six /.notdef /eight /nine 7{/.notdef}rp /A /.notdef /C 8{/.notdef}rp /L 6{/.notdef}rp /S /T 171{/.notdef}rp]JWLNMV+Helvetica-Bold nfJWLNMV+Helvetica-Bold*1 [11.4147 0 0 -11.4147 0 0 ]msf152.196 95.123 mo(  68)sh171.235 95.123 mo(% C.L.)shgrestore
148.819 97.8023 mo
128.976 97.8023 li
128.976 84.4721 li
148.819 84.4721 li
148.819 97.8023 li
.498039 .498039 1 rgb
f
128.976 84.8472 mo
148.819 84.8472 li
148.819 84.0972 li
128.976 84.0972 li
.6 .6 .6 rgb
f
128.976 98.1772 mo
148.819 98.1772 li
148.819 97.4272 li
128.976 97.4272 li
f
149.194 97.8022 mo
149.194 84.4722 li
148.444 84.4722 li
148.444 97.8022 li
f
129.351 97.8022 mo
129.351 84.4722 li
128.601 84.4722 li
128.601 97.8022 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
%%IncludeResource: font Helvetica-Bold
/JWLNMV+Helvetica-Bold*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 8{/.notdef}rp /period 2{/.notdef}rp /one 3{/.notdef}rp /five /six /.notdef /eight /nine 7{/.notdef}rp /A /B /C 2{/.notdef}rp /F 5{/.notdef}rp /L 6{/.notdef}rp /S /T 16{/.notdef}rp /e 3{/.notdef}rp /i 9{/.notdef}rp /s /t 139{/.notdef}rp]JWLNMV+Helvetica-Bold nfJWLNMV+Helvetica-Bold*1 [11.4147 0 0 -11.4147 0 0 ]msf152.196 114.147 mo( Be)sh169.959 114.147 mo(st F)sh190.252 114.147 mo(it)[3.17139 0 ]xshgrestore
135.473 113.605 mo
142.322 113.605 li
138.898 106.756 li
135.473 113.605 li
cp
0 0 0 rgb
f
396.851 146.907 mo
532.913 146.907 li
532.913 43.5283 li
396.851 43.5283 li
396.851 146.907 li
1 1 1 rgb
ef
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
%%IncludeResource: font Helvetica-Bold
/JWLNMV+Helvetica-Bold*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 8{/.notdef}rp /period 2{/.notdef}rp /one 3{/.notdef}rp /five /six /.notdef /eight /nine 7{/.notdef}rp /A /B /C 2{/.notdef}rp /F 5{/.notdef}rp /L /M 2{/.notdef}rp /P 2{/.notdef}rp /S /T 16{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l 5{/.notdef}rp /r /s /t 139{/.notdef}rp]JWLNMV+Helvetica-Bold nfJWLNMV+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf399.514 58.0249 mo(CMS Prel. C1)[7.55664 8.71582 6.97949 2.90723 6.97852 4.07227 5.81934 2.90723 2.90625 2.90723 7.55664 0 ]xshgrestore
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
JWLNMV+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf429.953 78.9521 mo(  95% C)sh467.173 78.9521 mo(.L. )shgrestore
425.765 81.7783 mo
401.953 81.7783 li
401.953 67.3052 li
425.765 67.3052 li
425.765 81.7783 li
.898039 1 .898039 rgb
f
401.953 67.6802 mo
425.765 67.6802 li
425.765 66.9302 li
401.953 66.9302 li
.6 .6 .6 rgb
f
401.953 82.1533 mo
425.765 82.1533 li
425.765 81.4033 li
401.953 81.4033 li
f
426.14 81.7783 mo
426.14 67.3052 li
425.39 67.3052 li
425.39 81.7783 li
f
402.328 81.7783 mo
402.328 67.3052 li
401.578 67.3052 li
401.578 81.7783 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
JWLNMV+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf429.953 98.9272 mo(  68% C)sh467.173 98.9272 mo(.L.)shgrestore
425.765 102.454 mo
401.953 102.454 li
401.953 87.9809 li
425.765 87.9809 li
425.765 102.454 li
.498039 1 .498039 rgb
f
401.953 88.356 mo
425.765 88.356 li
425.765 87.606 li
401.953 87.606 li
.6 .6 .6 rgb
f
401.953 102.829 mo
425.765 102.829 li
425.765 102.079 li
401.953 102.079 li
f
426.14 102.454 mo
426.14 87.981 li
425.39 87.981 li
425.39 102.454 li
f
402.328 102.454 mo
402.328 87.981 li
401.578 87.981 li
401.578 102.454 li
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
0 0 0 rgb
JWLNMV+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf429.953 119.854 mo( Best Fit )[2.90723 7.55664 5.81934 5.81934 3.48438 2.90625 6.3916 2.90723 3.48438 0 ]xshgrestore
413.858 119.318 mo
417.283 112.469 li
410.435 112.469 li
413.858 119.318 li
cp
0 0 0 rgb
f
gsave
0 544.1 mo
566.929 544.1 li
566.929 0 li
0 0 li
0 544.1 li
clp
%%IncludeResource: font Helvetica-Bold
/JWLNMV+Helvetica-Bold*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 8{/.notdef}rp /period 2{/.notdef}rp /one 3{/.notdef}rp /five /six /.notdef /eight /nine 7{/.notdef}rp /A /B /C 2{/.notdef}rp /F 5{/.notdef}rp /L /M 2{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp /a 2{/.notdef}rp /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s /t 139{/.notdef}rp]JWLNMV+Helvetica-Bold nfJWLNMV+Helvetica-Bold*1 [10.4635 0 0 -10.4635 0 0 ]msf429.953 140.781 mo( Stand. Model)[2.90723 6.97852 3.48438 5.81934 6.3916 6.3916 2.90723 2.90723 8.71582 6.3916 6.3916 5.81934 0 ]xshgrestore
412.336 138.091 mo
411.961 138.091 li
411.961 141.51 li
415.755 141.51 li
415.755 138.466 li
418.799 138.466 li
418.799 134.672 li
415.755 134.672 li
415.755 131.628 li
411.961 131.628 li
411.961 134.672 li
408.917 134.672 li
408.917 138.466 li
412.336 138.466 li
412.336 138.091 li
411.961 138.091 li
412.336 138.091 li
412.336 137.716 li
409.667 137.716 li
409.667 135.422 li
412.711 135.422 li
412.711 132.378 li
415.005 132.378 li
415.005 135.422 li
418.049 135.422 li
418.049 137.716 li
415.005 137.716 li
415.005 140.76 li
412.711 140.76 li
412.711 137.716 li
412.336 137.716 li
412.336 138.091 li
cp
1 0 0 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/JWLNMV+Helvetica-Bold*1 uf/JWLNMU+Helvetica*1 uf/JWLNMT+Symbol*1 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
